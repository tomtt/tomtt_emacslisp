;; do not display a splash screen on startup
(setq inhibit-splash-screen t)

;; set system checks
(defconst win32p
    (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")

(defconst cygwinp
    (eq system-type 'cygwin)
  "Are we running on a WinTel cygwin system?")

(defconst linuxp
    (or (eq system-type 'gnu/linux)
        (eq system-type 'linux))
  "Are we running on a GNU/Linux system?")

(defconst unixp
  (or linuxp
      (eq system-type 'usg-unix-v)
      (eq system-type 'berkeley-unix))
  "Are we running unix")

(defconst linux-x-p
    (and window-system linuxp)
  "Are we running under X on a GNU/Linux system?")

(defconst xemacsp (featurep 'xemacs)
  "Are we running XEmacs?")

(defconst emacs>=21p (and (not xemacsp) (or (= emacs-major-version 21) (= emacs-major-version 22)))
  "Are we running GNU Emacs 21 or above?")

;; Add the given path to the load-path variable.
(defun add-to-load-path (path-string)
  (message (format "Passed %S..." path-string))
  (if (stringp path-string)
      (when (file-exists-p path-string)
        (message (format "Adding %S to load-path..." path-string))
        (add-to-list 'load-path (expand-file-name path-string)))
    (crs-add-to-load-path (car path-string))
    (if (cdr path-string)
        (crs-add-to-load-path (cdr path-string)))))


(defun add-to-load-path-if-exists (dir)
     (if (file-exists-p (expand-file-name dir))
         (add-to-load-path (expand-file-name dir))))

(add-to-load-path-if-exists "~/.emacs.d")
(add-to-load-path-if-exists "~/.emacslisp")
(add-to-load-path-if-exists "~/.emacslisp/python-mode")
(add-to-load-path-if-exists "~/.emacslisp/rails")
(add-to-load-path-if-exists "~/.emacslisp/color-theme")
(add-to-load-path-if-exists "~/.emacslisp/semantic")
(add-to-load-path-if-exists "~/.emacslisp/eieio")
(add-to-load-path-if-exists "~/.emacslisp/speedbar")
(add-to-load-path-if-exists "~/.emacslisp/ecb")
(add-to-load-path-if-exists "~/.emacslisp/muse")
(add-to-load-path-if-exists "~/.emacslisp/planner")
(add-to-load-path-if-exists "~/.emacslisp/remember")

(setq semantic-load-turn-everything-on t)
(setq planner-directory "~/created/plans")

(require 'php-mode)
(require 'javascript-mode)
(require 'python-mode)
(require 'ruby-mode)
(require 'inf-ruby)
(require 'snippet)
(require 'rails)
(require 'semantic-load)
(require 'ecb)
(require 'css-mode)
(require 'anything)
(require 'haml-mode)
(require 'sass-mode)

(require 'muse-mode)     ; load authoring mode
(require 'muse-html)     ; load publishing styles I use
(require 'muse-latex)
(require 'muse-texinfo)
(require 'muse-docbook)
(require 'muse-project)  ; publish files in projects

(require 'planner)
(require 'planner-registry)
(planner-registry-initialize)

(require 'remember)
(require 'tomtt)

(setq planner-project "tomtt_planner")
(setq muse-project-alist
           '(("tomtt_planner"
              ("~/created/productivity/plans"           ;; where your Planner pages are located
               :default "TaskPool" ;; use value of `planner-default-page'
               :major-mode planner-mode
               :visit-link planner-visit-link)

              ;; This next part is for specifying where Planner pages
              ;; should be published and what Muse publishing style to
              ;; use.  In this example, we will use the XHTML publishing
              ;; style.

              (:base "planner-xhtml"
                     ;; where files are published to
                     ;; (the value of `planner-publishing-directory', if
                     ;;  you have a configuration for an older version
                     ;;  of Planner)
                     :path "~/public_html/plans"))))
(global-set-key (kbd "<f9> t") 'planner-create-task-from-buffer)

(setq auto-mode-alist
     (cons '("\\.css\\'" . css-mode) auto-mode-alist))
(setq cssm-indent-function #'cssm-c-style-indenter)
(global-set-key "\C-f" 'anything)
(autoload 'speedbar-frame-mode "speedbar" "Popup a speedbar frame" t)
(autoload 'speedbar-get-focus "speedbar" "Jump to speedbar frame" t)
(setq ecb-tip-of-the-day nil)

(setq c-basic-offset 4)

(defun try-complete-abbrev (old)
  (if (expand-abbrev) t nil))

(setq hippie-expand-try-functions-list
      '(try-complete-abbrev
        try-complete-file-name
        try-expand-dabbrev))

(add-to-list 'auto-mode-alist '("\\.js\\'" . php-mode))
(add-to-list 'auto-mode-alist '("\\.inc\\'" . php-mode))
(add-to-list 'auto-mode-alist '("\\.module\\'" . php-mode))
(add-to-list 'auto-mode-alist '("\\.rb\\'" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.rake\\'" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.rjs\\'" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.rhtml\\'" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.dryml\\'" . ruby-mode))

(tool-bar-mode 0)
(menu-bar-mode 1)
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(global-font-lock-mode t)

;; Ruby
(defun ruby-eval-buffer () (interactive)
   "Evaluate the buffer with ruby."
   (shell-command-on-region (point-min) (point-max) "ruby"))

(require 'color-theme)
(color-theme-initialize)
(load "color-theme-tomtt")

;; dark
;(color-theme-hober)

;; dark with green text
;(color-theme-euphoria)

;; dark bold constructs
;(color-theme-renegade)

(require 'psvn)
(setq svn-status-verbose nil)

(custom-set-variables
 '(ecb-options-version "2.32"))
(custom-set-faces
 ;; Flymake fonts are set here, because setting them in the color theme does not work for me.
 '(flymake-errline ((((class color)) (:background "DarkRed"))))
 '(flymake-warnline ((((class color)) (:background "DarkBlue")))))

(global-set-key "\C-c e" 'ecb-activate)

;; Setup for cygwin
(if win32p
    (progn
      (require 'cygwin-mount)
      (cygwin-mount-activate)
      ;; This assumes that Cygwin is installed in C:\cygwin (the
      ;; default) and that C:\cygwin\bin is not already in your
      ;; Windows Path (it generally should not be).
      ;;
      (setq exec-path (cons "C:/tomtt/cygwin/bin" exec-path))
      ;;
      ;; NT-emacs assumes a Windows command shell, which you change
      ;; here.
      ;;
      (setq process-coding-system-alist '(("bash" . undecided-unix)))
      (setq shell-file-name "bash")
      (setenv "SHELL" shell-file-name)
      (setq explicit-shell-file-name shell-file-name)
      ;;
      ;; This removes unsightly ^M characters that would otherwise
      ;; appear in the output of java applications.
      ;;
      (add-hook 'comint-output-filter-functions
                'comint-strip-ctrl-m)))

(server-start)
