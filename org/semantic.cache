;; Object semantic.cache
;; SEMANTICDB Tags save file
(semanticdb-project-database "semantic.cache"
  :file "semantic.cache"
  :tables (list 
   (semanticdb-table "org.el"
    :file "org.el"
    :pointmax 1106267
    :major-mode 'emacs-lisp-mode
    :tokens '(("eval-when-compile" code nil [2960 3039]) ("if" code nil [3152 3216]) ("outline" include nil nil nil [3279 3297]) ("noutline" include nil nil nil [3298 3317]) ("time-date" include nil nil nil [3342 3362]) ("easymenu" include nil nil nil [3363 3382]) ("org-version" variable nil "5.13i" ((const . t)) "The version number of the file org.el." nil [3427 3500]) ("org-version" function nil nil nil (interactive) nil [3501 3585]) ("org-xemacs-p" variable nil (featurep (quote xemacs)) ((const . t)) nil nil [3615 3657]) ("org-format-transports-properties-p" variable nil (let ((x "a")) (add-text-properties 0 1 (quote (test t)) x) (get-text-property 0 (quote test) (format "%s" x))) ((const . t)) "Does format transport text properties?" nil [3686 3882]) ("org-unmodified" function nil ("&rest" "body") nil "Execute body without changing buffer-modified-p." nil [3884 4041]) ("org-re" function nil ("s") nil "Replace posix classes in regular expression." nil [4043 4420]) ("org-preserve-lc" function nil ("&rest" "body") nil (\` (let ((_line (org-current-line)) (_col (current-column))) (unwind-protect (progn (\,@ body)) (goto-line _line) (move-to-column _col)))) nil [4422 4632]) ("org-without-partial-completion" function nil ("&rest" "body") nil (\` (let ((pc-mode (and (boundp (quote partial-completion-mode)) partial-completion-mode))) (unwind-protect (progn (if pc-mode (partial-completion-mode -1)) (\,@ body)) (if pc-mode (partial-completion-mode 1))))) nil [4634 4954]) ("defgroup" code nil [4982 5122]) ("org-completion-fallback-command" variable nil (quote hippie-expand) nil "The expansion command called by \\[org-complete] in normal context.
Normal means, no org-mode-specific context." nil [5160 5366]) ("defgroup" code nil [5368 5473]) ("org-startup-folded" variable nil t nil "Non-nil means, entering Org-mode will switch to OVERVIEW.
This can also be configured on a per-file basis by adding one of
the following lines anywhere in the buffer:

   #+STARTUP: fold
   #+STARTUP: nofold
   #+STARTUP: content" nil [5475 5925]) ("org-startup-truncated" variable nil t nil "Non-nil means, entering Org-mode will set `truncate-lines'.
This is useful since some lines containing links can be very long and
uninteresting.  Also tables look terrible when wrapped." nil [5927 6191]) ("org-startup-align-all-tables" variable nil nil nil "Non-nil means, align all tables when visiting a file.
This is useful when the column width in tables is forced with <N> cookies
in table fields.  Such tables will look correct only after the first re-align.
This can also be configured on a per-file basis by adding one of
the following lines anywhere in the buffer:
   #+STARTUP: align
   #+STARTUP: noalign" nil [6193 6638]) ("org-insert-mode-line-in-empty-file" variable nil nil nil "Non-nil means insert the first line setting Org-mode in empty files.
When the function `org-mode' is called interactively in an empty file, this
normally means that the file name does not automatically trigger Org-mode.
To ensure that the file will always be in Org-mode in the future, a
line enforcing Org-mode will be inserted into the buffer, if this option
has been set." nil [6640 7108]) ("org-replace-disputed-keys" variable nil nil nil "Non-nil means use alternative key bindings for some keys.
Org-mode uses S-<cursor> keys for changing timestamps and priorities.
These keys are also used by other packages like `CUA-mode' or `windmove.el'.
If you want to use Org-mode together with one of these other modes,
or more generally if you would like to move some Org-mode commands to
other keys, set this variable and configure the keys with the variable
`org-disputed-keys'.

This option is only relevant at load-time of Org-mode, and must be set
*before* org.el is loaded.  Changing it requires a restart of Emacs to
become effective." nil [7110 7790]) ("if" code nil [7792 7884]) ("org-disputed-keys" variable nil (quote (([(shift up)] . [(meta p)]) ([(shift down)] . [(meta n)]) ([(shift left)] . [(meta -)]) ([(shift right)] . [(meta +)]) ([(control shift right)] . [(meta shift +)]) ([(control shift left)] . [(meta shift -)]))) nil "Keys for which Org-mode and other modes compete.
This is an alist, cars are the default keys, second element specifies
the alternative to use when `org-replace-disputed-keys' is t.

Keys can be specified in any syntax supported by `define-key'.
The value of this option takes effect only at Org-mode's startup,
therefore you'll have to restart Emacs to apply it after changing." nil [7886 8623]) ("org-key" function nil ("key") nil "Select key according to `org-replace-disputed-keys' and `org-disputed-keys'.
Or return the original if not disputed." nil [8625 9040]) ("org-find-if" function nil ("predicate" "seq") nil (catch (quote exit) (while seq (if (funcall predicate (car seq)) (throw (quote exit) (car seq)) (pop seq)))) nil [9042 9202]) ("org-defkey" function nil ("keymap" "key" "def") nil "Define a key, possibly translated, as returned by `org-key'." nil [9204 9344]) ("org-ellipsis" variable nil (quote org-ellipsis) nil "The ellipsis to use in the Org-mode outline.
When nil, just use the standard three dots.  When a string, use that instead,
When a face, use the standart 3 dots, but with the specified face.
The change affects only Org-mode (which will then use its own display table).
Changing this requires executing `M-x org-mode' in a buffer to become
effective." nil [9346 9913]) ("org-display-table" variable nil nil nil "The display table for org-mode, in case `org-ellipsis' is non-nil." nil [9915 10016]) ("defgroup" code nil [10018 10107]) ("org-deadline-string" variable nil "DEADLINE:" nil "String to mark deadline entries.
A deadline is this string, followed by a time stamp.  Should be a word,
terminated by a colon.  You can insert a schedule keyword and
a timestamp with \\[org-deadline].
Changes become only effective after restarting Emacs." nil [10109 10451]) ("org-scheduled-string" variable nil "SCHEDULED:" nil "String to mark scheduled TODO entries.
A schedule is this string, followed by a time stamp.  Should be a word,
terminated by a colon.  You can insert a schedule keyword and
a timestamp with \\[org-schedule].
Changes become only effective after restarting Emacs." nil [10453 10803]) ("org-closed-string" variable nil "CLOSED:" nil "String used as the prefix for timestamps logging closing a TODO entry." nil [10805 10958]) ("org-clock-string" variable nil "CLOCK:" nil "String used as prefix for timestamps clocking work hours on an item." nil [10960 11109]) ("org-comment-string" variable nil "COMMENT" nil "Entries starting with this keyword will never be exported.
An entry can be toggled between COMMENT and normal with
\\[org-toggle-comment].
Changes become only effective after restarting Emacs." nil [11111 11387]) ("org-quote-string" variable nil "QUOTE" nil "Entries starting with this keyword will be exported in fixed-width font.
Quoting applies only to the text in the entry following the headline, and does
not extend beyond the next headline, even if that is lower level.
An entry can be toggled between QUOTE and normal with
\\[org-toggle-fixed-width-section]." nil [11389 11776]) ("org-repeat-re" variable nil (concat "\\(?:\\<\\(?:" org-scheduled-string "\\|" org-deadline-string "\\)" " +<[0-9]\\{4\\}-[0-9][0-9]-[0-9][0-9] [^>
]*\\)\\(\\+[0-9]+[dwmy]\\)") ((const . t)) "Regular expression for specifying repeated events.
After a match, group 1 contains the repeat expression." nil [11778 12074]) ("defgroup" code nil [12076 12205]) ("defgroup" code nil [12207 12355]) ("org-show-hierarchy-above" variable nil (quote ((default . t))) nil "Non-nil means, show full hierarchy when revealing a location.
Org-mode often shows locations in an org-mode file which might have
been invisible before.  When this is set, the hierarchy of headings
above the exposed location is shown.
Turning this off for example for sparse trees makes them very compact.
Instead of t, this can also be an alist specifying this option for different
contexts.  Valid contexts are
  agenda         when exposing an entry from the agenda
  org-goto       when using the command `org-goto' on key C-c C-j
  occur-tree     when using the command `org-occur' on key C-c /
  tags-tree      when constructing a sparse tree based on tags matches
  link-search    when exposing search matches associated with a link
  mark-goto      when exposing the jump goal of a mark
  bookmark-jump  when exposing a bookmark location
  isearch        when exiting from an incremental search
  default        default for all contexts not set explicitly" nil [12357 13989]) ("org-show-following-heading" variable nil (quote ((default))) nil "Non-nil means, show following heading when revealing a location.
Org-mode often shows locations in an org-mode file which might have
been invisible before.  When this is set, the heading following the
match is shown.
Turning this off for example for sparse trees makes them very compact,
but makes it harder to edit the location of the match.  In such a case,
use the command \\[org-reveal] to show more context.
Instead of t, this can also be an alist specifying this option for different
contexts.  See `org-show-hierarchy-above' for valid contexts." nil [13991 15215]) ("org-show-siblings" variable nil (quote ((default) (isearch t))) nil "Non-nil means, show all sibling heading when revealing a location.
Org-mode often shows locations in an org-mode file which might have
been invisible before.  When this is set, the sibling of the current entry
heading are all made visible.  If `org-show-hierarchy-above' is t,
the same happens on each level of the hierarchy above the current entry.

By default this is on for the isearch context, off for all other contexts.
Turning this off for example for sparse trees makes them very compact,
but makes it harder to edit the location of the match.  In such a case,
use the command \\[org-reveal] to show more context.
Instead of t, this can also be an alist specifying this option for different
contexts.  See `org-show-hierarchy-above' for valid contexts." nil [15217 16653]) ("defgroup" code nil [16655 16777]) ("org-drawers" variable nil (quote ("PROPERTIES" "CLOCK")) nil "Names of drawers.  Drawers are not opened by cycling on the headline above.
Drawers only open with a TAB on the drawer line itself.  A drawer looks like
this:
   :DRAWERNAME:
   .....
   :END:
The drawer \"PROPERTIES\" is special for capturing properties through
the property API.

Drawers can be defined on the per-file basis with a line like:

#+DRAWERS: HIDDEN STATE PROPERTIES" nil [16779 17281]) ("org-cycle-global-at-bob" variable nil nil nil "Cycle globally if cursor is at beginning of buffer and not at a headline.
This makes it possible to do global cycling without having to use S-TAB or
C-u TAB.  For this special case to work, the first line of the buffer
must not be a headline - it may be empty ot some other text.  When used in
this way, `org-cycle-hook' is disables temporarily, to make sure the
cursor stays at the beginning of the buffer.
When this option is nil, don't do anything special at the beginning
of the buffer." nil [17283 17854]) ("org-cycle-emulate-tab" variable nil t nil "Where should `org-cycle' emulate TAB.
nil         Never
white       Only in completely white lines
whitestart  Only at the beginning of lines, before the first non-white char.
t           Everywhere except in headlines
exc-hl-bol  Everywhere except at the start of a headline
If TAB is used in a place where it does not emulate TAB, the current subtree
visibility is cycled." nil [17856 18637]) ("org-cycle-separator-lines" variable nil 2 nil "Number of empty lines needed to keep an empty line between collapsed trees.
If you leave an empty line between the end of a subtree and the following
headline, this empty line is hidden when the subtree is folded.
Org-mode will leave (exactly) one empty line visible if the number of
empty lines is equal or larger to the number given in this variable.
So the default 2 means, at least 2 empty lines after the end of a subtree
are needed to produce free space between a collapsed subtree and the
following headline.

Special case: when 0, never leave empty lines in collapsed view." nil [18639 19301]) ("org-cycle-hook" variable nil (quote (org-cycle-hide-archived-subtrees org-cycle-hide-drawers org-cycle-show-empty-lines org-optimize-window-after-visibility-change)) nil "Hook that is run after `org-cycle' has changed the buffer visibility.
The function(s) in this hook must accept a single argument which indicates
the new state that was set by the most recent `org-cycle' command.  The
argument is a symbol.  After a global state change, it can have the values
`overview', `content', or `all'.  After a local state change, it can have
the values `folded', `children', or `subtree'." nil [19303 19994]) ("defgroup" code nil [19996 20135]) ("org-special-ctrl-a/e" variable nil nil nil "Non-nil means `C-a' and `C-e' behave specially in headlines and items.
When t, `C-a' will bring back the cursor to the beginning of the
headline text, i.e. after the stars and after a possible TODO keyword.
In an item, this will be the position after the bullet.
When the cursor is already at that position, another `C-a' will bring
it to the beginning of the line.
`C-e' will jump to the end of the headline, ignoring the presence of tags
in the headline.  A second `C-e' will then jump to the true end of the
line, after any tags.
When set to the symbol `reversed', the first `C-a' or `C-e' works normally,
and only a directly following, identical keypress will bring the cursor
to the special positions." nil [20137 21057]) ("if" code nil [21059 21146]) ("org-odd-levels-only" variable nil nil nil "Non-nil means, skip even levels and only use odd levels for the outline.
This has the effect that two stars are being added/taken away in
promotion/demotion commands.  It also influences how levels are
handled by the exporters.
Changing it requires restart of `font-lock-mode' to become effective
for fontification also in regions already fontified.
You may also set this on a per-file basis by adding one of the following
lines to the buffer:

   #+STARTUP: odd
   #+STARTUP: oddeven" nil [21148 21742]) ("org-adapt-indentation" variable nil t nil "Non-nil means, adapt indentation when promoting and demoting.
When this is set and the *entire* text in an entry is indented, the
indentation is increased by one space in a demotion command, and
decreased by one in a promotion command.  If any line in the entry
body starts at column 0, indentation is not changed at all." nil [21744 22151]) ("org-blank-before-new-entry" variable nil (quote ((heading) (plain-list-item))) nil "Should `org-insert-heading' leave a blank line before new heading/item?
The value is an alist, with `heading' and `plain-list-item' as car,
and a boolean flag as cdr." nil [22153 22584]) ("org-insert-heading-hook" variable nil nil nil "Hook being run after inserting a new heading." nil [22586 22721]) ("org-enable-fixed-width-editor" variable nil t nil "Non-nil means, lines starting with \":\" are treated as fixed-width.
This currently only means, they are never auto-wrapped.
When nil, such lines will be treated like ordinary lines.
See also the QUOTE keyword." nil [22723 23027]) ("defgroup" code nil [23029 23159]) ("org-highlight-sparse-tree-matches" variable nil t nil "Non-nil means, highlight all matches that define a sparse tree.
The highlights will automatically disappear the next time the buffer is
changed by an edit command." nil [23161 23420]) ("org-remove-highlights-with-change" variable nil t nil "Non-nil means, any change to the buffer will remove temporary highlights.
Such highlights are created by `org-occur' and `org-clock-display'.
When nil, `C-c C-c needs to be used to get rid of the highlights.
The highlights created by `org-preview-latex-fragment' always need
`C-c C-c' to be removed." nil [23422 23836]) ("org-occur-hook" variable nil (quote (org-first-headline-recenter)) nil "Hook that is run after `org-occur' has constructed a sparse tree.
This can be used to recenter the window to show as much of the structure
as possible." nil [23839 24093]) ("defgroup" code nil [24095 24222]) ("org-cycle-include-plain-lists" variable nil nil nil "Non-nil means, include plain lists into visibility cycling.
This means that during cycling, plain list items will *temporarily* be
interpreted as outline headlines with a level given by 1000+i where i is the
indentation of the bullet.  In all other operations, plain list items are
not seen as headlines.  For example, you cannot assign a TODO keyword to
such an item." nil [24224 24685]) ("org-plain-list-ordered-item-terminator" variable nil t nil "The character that makes a line with leading number an ordered list item.
Valid values are ?. and ?).  To get both terminators, use t.  While
?. may look nicer, it creates the danger that a line with leading
number may be incorrectly interpreted as an item.  ?) therefore is
the safe choice." nil [24687 25214]) ("org-auto-renumber-ordered-lists" variable nil t nil "Non-nil means, automatically renumber ordered plain lists.
Renumbering happens when the sequence have been changed with
\\[org-shiftmetaup] or \\[org-shiftmetadown].  After other editing commands,
use \\[org-ctrl-c-ctrl-c] to trigger renumbering." nil [25216 25555]) ("org-provide-checkbox-statistics" variable nil t nil "Non-nil means, update checkbox statistics after insert and toggle.
When this is set, checkbox statistics is updated each time you either insert
a new checkbox with \\[org-insert-todo-heading] or toggle a checkbox
with \\[org-ctrl-c-ctrl-c\\]." nil [25557 25892]) ("defgroup" code nil [25894 26011]) ("org-archive-tag" variable nil "ARCHIVE" nil "The tag that marks a subtree as archived.
An archived subtree does not open during visibility cycling, and does
not contribute to the agenda listings." nil [26013 26266]) ("org-agenda-skip-archived-trees" variable nil t nil "Non-nil means, the agenda will skip any items located in archived trees.
An archived tree is a tree marked with the tag ARCHIVE." nil [26268 26510]) ("org-cycle-open-archived-trees" variable nil nil nil "Non-nil means, `org-cycle' will open archived trees.
An archived tree is a tree marked with the tag ARCHIVE.
When nil, archived trees will stay folded.  You can still open them with
normal outline commands like `show-all', but not with the cycling commands." nil [26512 26878]) ("org-sparse-tree-open-archived-trees" variable nil nil nil "Non-nil means sparse tree construction shows matches in archived trees.
When nil, matches in these trees are highlighted, but the trees are kept in
collapsed state." nil [26880 27166]) ("org-archive-location" variable nil "%s_archive::" nil "The location where subtrees should be archived.
This string consists of two parts, separated by a double-colon.

The first part is a file name - when omitted, archiving happens in the same
file.  %s will be replaced by the current file name (without directory part).
Archiving to a different file is useful to keep archived entries from
contributing to the Org-mode Agenda.

The part after the double colon is a headline.  The archived entries will be
filed under that headline.  When omitted, the subtrees are simply filed away
at the end of the file, as top-level entries.

Here are a few examples:
\"%s_archive::\"
        If the current file is Projects.org, archive in file
        Projects.org_archive, as top-level trees.  This is the default.

\"::* Archived Tasks\"
        Archive in the current file, under the top-level headline
        \"* Archived Tasks\".

\"~/org/archive.org::\"
        Archive in file ~/org/archive.org (absolute path), as top-level trees.

\"basement::** Finished Tasks\"
        Archive in file ./basement (relative path), as level 3 trees
        below the level 2 heading \"** Finished Tasks\".

You may set this option on a per-file basis by adding to the buffer a
line like

#+ARCHIVE: basement::** Finished Tasks" nil [27168 28512]) ("org-archive-mark-done" variable nil t nil "Non-nil means, mark entries as DONE when they are moved to the archive file.
This can be a string to set the keyword to use.  When t, Org-mode will
use the first keyword in its list that means done." nil [28514 28898]) ("org-archive-stamp-time" variable nil t nil "Non-nil means, add a time stamp to entries moved to an archive file.
This variable is obsolete and has no effect anymore, instead add ot remove
`time' from the variablle `org-archive-save-context-info'." nil [28900 29182]) ("org-archive-save-context-info" variable nil (quote (time file category todo itags)) nil "Parts of context info that should be stored as properties when archiving.
When a subtree is moved to an archive file, it looses information given by
context, like inherited tags, the category, and possibly also the TODO
state (depending on the variable `org-archive-mark-done').
This variable can be a list of any of the following symbols:

time       The time of archiving.
file       The file where the entry originates.
itags      The local tags, in the headline of the subtree.
ltags      The tags the subtree inherits from further up the hierarchy.
todo       The pre-archive TODO state.
category   The category, taken from file name or #+CATEGORY lines.

For each symbol present in the list, a property will be created in
the archived entry, with a prefix \"PRE_ARCHIVE_\", to remember this
information." nil [29184 30406]) ("defgroup" code nil [30408 30508]) ("org-enable-table-editor" variable nil (quote optimized) nil "Non-nil means, lines starting with \"|\" are handled by the table editor.
When nil, such lines will be treated like ordinary lines.

When equal to the symbol `optimized', the table editor will be optimized to
do the following:
- Automatic overwrite mode in front of whitespace in table fields.
  This makes the structure of the table stay in tact as long as the edited
  field does not exceed the column width.
- Minimize the number of realigns.  Normally, the table is aligned each time
  TAB or RET are pressed to move to another field.  With optimization this
  happens only if changes to a field might have changed the column width.
Optimization requires replacing the functions `self-insert-command',
`delete-char', and `backward-delete-char' in Org-mode buffers, with a
slight (in fact: unnoticeable) speed impact for normal typing.  Org-mode is
very good at guessing when a re-align will be necessary, but you can always
force one with \\[org-ctrl-c-ctrl-c].

If you would like to use the optimized version in Org-mode, but the
un-optimized version in OrgTbl-mode, see the variable `orgtbl-optimized'.

This variable can be used to turn on and off the table editor during a session,
but in order to toggle optimization, a restart is required.

See also the variable `org-table-auto-blank-field'." nil [30510 32013]) ("orgtbl-optimized" variable nil (eq org-enable-table-editor (quote optimized)) nil "Non-nil means, use the optimized table editor version for `orgtbl-mode'.
In the optimized version, the table editor takes over all simple keys that
normally just insert a character.  In tables, the characters are inserted
in a way to minimize disturbing the table structure (i.e. in overwrite mode
for empty fields).  Outside tables, the correct binding of the keys is
restored.

The default for this option is t if the optimized version is also used in
Org-mode.  See the variable `org-enable-table-editor' for details.  Changing
this variable requires a restart of Emacs to become effective." nil [32015 32718]) ("orgtbl-radio-table-templates" variable nil (quote ((latex-mode "% BEGIN RECEIVE ORGTBL %n
% END RECEIVE ORGTBL %n
\\begin{comment}
#+ORGTBL: SEND %n orgtbl-to-latex :splice nil :skip 0
| | |
\\end{comment}
") (texinfo-mode "@c BEGIN RECEIVE ORGTBL %n
@c END RECEIVE ORGTBL %n
@ignore
#+ORGTBL: SEND %n orgtbl-to-html :splice nil :skip 0
| | |
@end ignore
") (html-mode "<!-- BEGIN RECEIVE ORGTBL %n -->
<!-- END RECEIVE ORGTBL %n -->
<!--
#+ORGTBL: SEND %n orgtbl-to-html :splice nil :skip 0
| | |
-->
"))) nil "Templates for radio tables in different major modes.
All occurrences of %n in a template will be replaced with the name of the
table, obtained by prompting the user." nil [32720 33521]) ("defgroup" code nil [33523 33641]) ("org-table-default-size" variable nil "5x2" nil "The default size for newly created tables, Columns x Rows." nil [33643 33792]) ("org-table-number-regexp" variable nil "^\\([<>]?[-+^.0-9]*[0-9][-+^.0-9eEdDx()%:]*\\|\\(0[xX]\\)[0-9a-fA-F]+\\|nan\\)$" nil "Regular expression for recognizing numbers in table columns.
If a table column contains mostly numbers, it will be aligned to the
right.  If not, it will be aligned to the left.

The default value of this option is a regular expression which allows
anything which looks remotely like a number as used in scientific
context.  For example, all of the following will be considered a
number:
    12    12.2    2.4e-08    2x10^12    4.034+-0.02    2.7(10)  >3.5

Other options offered by the customize interface are more restrictive." nil [33794 35184]) ("org-table-number-fraction" variable nil 0.5 nil "Fraction of numbers in a column required to make the column align right.
In a column all non-white fields are considered.  If at least this
fraction of fields is matched by `org-table-number-fraction',
alignment to the right border applies." nil [35186 35517]) ("defgroup" code nil [35519 35649]) ("org-table-automatic-realign" variable nil t nil "Non-nil means, automatically re-align table when pressing TAB or RETURN.
When nil, aligning is only done with \\[org-table-align], or after column
removal/insertion." nil [35651 35907]) ("org-table-auto-blank-field" variable nil t nil "Non-nil means, automatically blank table field when starting to type into it.
This only happens when typing immediately after a field motion
command (TAB, S-TAB or RET).
Only relevant when `org-enable-table-editor' is equal to `optimized'." nil [35909 36238]) ("org-table-tab-jumps-over-hlines" variable nil t nil "Non-nil means, tab in the last column of a table with jump over a hline.
If a horizontal separator line is following the current line,
`org-table-next-field' can either create a new row before that line, or jump
over the line.  When this option is nil, a new line will be created before
this line." nil [36240 36632]) ("org-table-tab-recognizes-table\\.el" variable nil t nil "Non-nil means, TAB will automatically notice a table.el table.
When it sees such a table, it moves point into it and - if necessary -
calls `table-recognize-table'." nil [36634 36895]) ("defgroup" code nil [36897 37027]) ("org-table-use-standard-references" variable nil t nil "Should org-mode work with table refrences like B3 instead of @3$2?
Possible values are:
nil     never use them
from    accept as input, do not present for editing
t:      accept as input and present for editing" nil [37029 37565]) ("org-table-copy-increment" variable nil t nil "Non-nil means, increment when copying current field with \\[org-table-copy-down]." nil [37567 37740]) ("org-calc-default-modes" variable nil (quote (calc-internal-prec 12 calc-float-format (float 5) calc-angle-mode deg calc-prefer-frac nil calc-symbolic-mode nil calc-date-format (YYYY "-" MM "-" DD " " Www (" " HH ":" mm)) calc-display-working-message t)) nil "List with Calc mode settings for use in calc-eval for table formulas.
The list must contain alternating symbols (Calc modes variables and values).
Don't remove any of the default settings, just change the values.  Org-mode
relies on the variables to be present in the list." nil [37742 38348]) ("org-table-formula-evaluate-inline" variable nil t nil "Non-nil means, TAB and RET evaluate a formula in current table field.
If the current field starts with an equal sign, it is assumed to be a formula
which should be evaluated as described in the manual and in the documentation
string of the command `org-table-eval-formula'.  This feature requires the
Emacs calc package.
When this variable is nil, formula calculation is only available through
the command \\[org-table-eval-formula]." nil [38350 38884]) ("org-table-formula-use-constants" variable nil t nil "Non-nil means, interpret constants in formulas in tables.
A constant looks like `$c' or `$Grav' and will be replaced before evaluation
by the value given in `org-table-formula-constants', or by a value obtained
from the `constants.el' package." nil [38886 39228]) ("org-table-formula-constants" variable nil nil nil "Alist with constant names and values, for use in table formulas.
The car of each element is a name of a constant, without the `$' before it.
The cdr is the value as a string.  For example, if you'd like to use the
speed of light in a formula, you would configure

  (setq org-table-formula-constants '((\"c\" . \"299792458.\")))

and then use it in an equation like `$1*$c'.

Constants can also be defined on a per-file basis using a line like

#+CONSTANTS: c=299792458. pi=3.14 eps=2.4e-6" nil [39230 39893]) ("org-table-formula-constants-local" variable nil nil nil "Local version of `org-table-formula-constants'." nil [39895 39993]) ("make-variable-buffer-local" code nil [39994 40057]) ("org-table-allow-automatic-line-recalculation" variable nil t nil "Non-nil means, lines marked with |#| or |*| will be recomputed automatically.
Automatically means, when TAB or RET or C-c C-c are pressed in the line." nil [40059 40321]) ("defgroup" code nil [40323 40420]) ("org-link-abbrev-alist-local" variable nil nil nil "Buffer-local version of `org-link-abbrev-alist', which see.
The value of this is taken from the #+LINK lines." nil [40422 40576]) ("make-variable-buffer-local" code nil [40577 40634]) ("org-link-abbrev-alist" variable nil nil nil "Alist of link abbreviations.
The car of each element is a string, to be replaced at the start of a link.
The cdrs are replacement values, like (\"linkkey\" . REPLACE).  Abbreviated
links in Org-mode buffers can have an optional tag after a double colon, e.g.

     [[linkkey:tag][description]]

If REPLACE is a string, the tag will simply be appended to create the link.
If the string contains \"%s\", the tag will be inserted there.  REPLACE may
also be a function that will be called with the tag as the only argument to
create the link.  See the manual for examples." nil [40636 41281]) ("org-descriptive-links" variable nil t nil "Non-nil means, hide link part and only show description of bracket links.
Bracket links are like [[link][descritpion]]. This variable sets the initial
state in new org-mode buffers.  The setting can then be toggled on a
per-buffer basis from the Org->Hyperlinks menu." nil [41283 41626]) ("org-link-file-path-type" variable nil (quote adaptive) nil "How the path name in file links should be stored.
Valid values are:

relative  relative to the current directory, i.e. the directory of the file
          into which the link is being inserted.
absolute  absolute path, if possible with ~ for home directory.
noabbrev  absolute path, no abbreviation of home directory.
adaptive  Use relative path for files in the current directory and sub-
          directories of it.  For other files, use an absolute path." nil [41628 42281]) ("org-activate-links" variable nil (quote (bracket angle plain radio tag date)) nil "Types of links that should be activated in Org-mode files.
This is a list of symbols, each leading to the activation of a certain link
type.  In principle, it does not hurt to turn on most link types - there may
be a small gain when turning off unused link types.  The types are:

bracket   The recommended [[link][description]] or [[link]] links with hiding.
angular   Links in angular brackes that may contain whitespace like
          <bbdb:Carsten Dominik>.
plain     Plain links in normal text, no whitespace, like http://google.com.
radio     Text that is matched by a radio target, see manual for details.
tag       Tag settings in a headline (link to tag search).
date      Time stamps (link to calendar).

Changing this variable requires a restart of Emacs to become effective." nil [42283 43535]) ("defgroup" code nil [43537 43658]) ("org-email-link-description-format" variable nil "Email %c: %.30s" nil "Format of the description part of a link to an email or usenet message.
The following %-excapes will be replaced by corresponding information:

%F   full \"From\" field
%f   name, taken from \"From\" field, address if no name
%T   full \"To\" field
%t   first name in \"To\" field, address if no name
%c   correspondent.  Unually \"from NAME\", but if you sent it yourself, it
     will be \"to NAME\".  See also the variable `org-from-is-user-regexp'.
%s   subject
%m   message-id.

You may use normal field width specification between the % and the letter.
This is for example useful to limit the length of the subject.

Examples: \"%f on: %.30s\", \"Email from %f\", \"Email %c\"" nil [43660 44451]) ("org-from-is-user-regexp" variable nil (let (r1 r2) (when (and user-mail-address (not (string= user-mail-address ""))) (setq r1 (concat "\\<" (regexp-quote user-mail-address) "\\>"))) (when (and user-full-name (not (string= user-full-name ""))) (setq r2 (concat "\\<" (regexp-quote user-full-name) "\\>"))) (if (and r1 r2) (concat r1 "\\|" r2) (or r1 r2))) nil "Regexp mached against the \"From:\" header of an email or usenet message.
It should match if the message is from the user him/herself." nil [44453 45012]) ("org-context-in-file-links" variable nil t nil "Non-nil means, file links from `org-store-link' contain context.
A search string will be added to the file name with :: as separator and
used to find the context when the link is activated by the command
`org-open-at-point'.
Using a prefix arg to the command \\[org-store-link] (`org-store-link')
negates this setting for the duration of the command." nil [45014 45450]) ("org-keep-stored-link-after-insertion" variable nil nil nil "Non-nil means, keep link in list for entire session.

The command `org-store-link' adds a link pointing to the current
location to an internal list.  These links accumulate during a session.
The command `org-insert-link' can be used to insert links into any
Org-mode file (offering completion for all stored links).  When this
option is nil, every link which has been inserted once using \\[org-insert-link]
will be removed from the list, to make completing the unused links
more efficient." nil [45452 46041]) ("org-usenet-links-prefer-google" variable nil nil nil "Non-nil means, `org-store-link' will create web links to Google groups.
When nil, Gnus will be used for such links.
Using a prefix arg to the command \\[org-store-link] (`org-store-link')
negates this setting for the duration of the command." nil [46043 46377]) ("defgroup" code nil [46379 46504]) ("org-tab-follows-link" variable nil nil nil "Non-nil means, on links TAB will follow the link.
Needs to be set before org.el is loaded." nil [46506 46680]) ("org-return-follows-link" variable nil nil nil "Non-nil means, on links RET will follow the link.
Needs to be set before org.el is loaded." nil [46682 46859]) ("org-mouse-1-follows-link" variable nil t nil "Non-nil means, mouse-1 on a link will follow the link.
A longer mouse click will still set point.  Does not wortk on XEmacs.
Needs to be set before org.el is loaded." nil [46861 47112]) ("org-mark-ring-length" variable nil 4 nil "Number of different positions to be recorded in the ring
Changing this requires a restart of Emacs to work correctly." nil [47114 47314]) ("org-link-frame-setup" variable nil (quote ((vm . vm-visit-folder-other-frame) (gnus . gnus-other-frame) (file . find-file-other-window))) nil "Setup the frame configuration for following links.
When following a link with Emacs, it may often be useful to display
this link in another window or frame.  This variable can be used to
set this up for the different types of links.
For VM, use any of
    `vm-visit-folder'
    `vm-visit-folder-other-frame'
For Gnus, use any of
    `gnus'
    `gnus-other-frame'
For FILE, use any of
    `find-file'
    `find-file-other-window'
    `find-file-other-frame'
For the calendar, use the variable `calendar-setup'.
For BBDB, it is currently only possible to display the matches in
another window." nil [47316 48605]) ("org-display-internal-link-with-indirect-buffer" variable nil nil nil "Non-nil means, use indirect buffer to display infile links.
Activating internal links (from one location in a file to another location
in the same file) normally just jumps to the location.  When the link is
activated with a C-u prefix (or with mouse-3), the link is displayed in
another window.  When this option is set, the other window actually displays
an indirect buffer clone of the current buffer, to avoid any visibility
changes to the current buffer." nil [48607 49176]) ("org-open-non-existing-files" variable nil nil nil "Non-nil means, `org-open-file' will open non-existing files.
When nil, an error will be generated." nil [49178 49367]) ("org-link-mailto-program" variable nil (quote (browse-url "mailto:%a?subject=%s")) nil "Function and arguments to call for following mailto links.
This is a list with the first element being a lisp function, and the
remaining elements being arguments to the function.  In string arguments,
%a will be replaced by the address, and %s will be replaced by the subject
if one was given like in <mailto:arthur@galaxy.org::this subject>." nil [49369 50107]) ("org-confirm-shell-link-function" variable nil (quote yes-or-no-p) nil "Non-nil means, ask for confirmation before executing shell links.
Shell links can be dangerous: just think about a link

     [[shell:rm -rf ~/*][Google Search]]

This link would show up in your Org-mode document as \"Google Search\",
but really it would remove your entire home directory.
Therefore we advise against setting this variable to nil.
Just change it to `y-or-n-p' of you want to confirm with a
single keystroke rather than having to type \"yes\"." nil [50109 50845]) ("org-confirm-elisp-link-function" variable nil (quote yes-or-no-p) nil "Non-nil means, ask for confirmation before executing Emacs Lisp links.
Elisp links can be dangerous: just think about a link

     [[elisp:(shell-command \"rm -rf ~/*\")][Google Search]]

This link would show up in your Org-mode document as \"Google Search\",
but really it would remove your entire home directory.
Therefore we advise against setting this variable to nil.
Just change it to `y-or-n-p' of you want to confirm with a
single keystroke rather than having to type \"yes\"." nil [50847 51608]) ("org-file-apps-defaults-gnu" variable nil (quote ((remote . emacs) (t . mailcap))) ((const . t)) "Default file applications on a UNIX or GNU/Linux system.
See `org-file-apps'." nil [51610 51769]) ("org-file-apps-defaults-macosx" variable nil (quote ((remote . emacs) (t . "open %s") ("ps" . "gv %s") ("ps.gz" . "gv %s") ("eps" . "gv %s") ("eps.gz" . "gv %s") ("dvi" . "xdvi %s") ("fig" . "xfig %s"))) ((const . t)) "Default file applications on a MacOS X system.
The system \"open\" is known as a default, but we use X11 applications
for some files for which the OS does not have a good default.
See `org-file-apps'." nil [51771 52212]) ("org-file-apps-defaults-windowsnt" variable nil (list (quote (remote . emacs)) (cons t (list (if (featurep (quote xemacs)) (quote mswindows-shell-execute) (quote w32-shell-execute)) "open" (quote file)))) ((const . t)) "Default file applications on a Windows NT system.
The system \"open\" is used for most files.
See `org-file-apps'." nil [52214 52566]) ("org-file-apps" variable nil (quote (("txt" . emacs) ("tex" . emacs) ("ltx" . emacs) ("org" . emacs) ("el" . emacs) ("bib" . emacs))) nil "External applications for opening `file:path' items in a document.
Org-mode uses system defaults for different file types, but
you can use this variable to set the application for a given file
extension.  The entries in this list are cons cells where the car identifies
files and the cdr the corresponding command.  Possible values for the
file identifier are
 \"ext\"         A string identifying an extension
 `directory'   Matches a directory
 `remote'      Matches a remote file, accessible through tramp or efs.
               Remote files most likely should be visited through Emacs
               because external applications cannot handle such paths.
 t             Default for all remaining files

Possible values for the command are:
 `emacs'       The file will be visited by the current Emacs process.
 `default'     Use the default application for this file type.
 string        A command to be executed by a shell; %s will be replaced
               by the path to the file.
 sexp          A Lisp form which will be evaluated.  The file path will
               be available in the Lisp variable `file'.
For more examples, see the system specific constants
`org-file-apps-defaults-macosx'
`org-file-apps-defaults-windowsnt'
`org-file-apps-defaults-gnu'." nil [52568 54586]) ("org-mhe-search-all-folders" variable nil nil nil "Non-nil means, that the search for the mh-message will be extended to
all folders if the message cannot be found in the folder given in the link.
Searching all folders is very efficient with one of the search engines
supported by MH-E, but will be slow with pick." nil [54588 54941]) ("defgroup" code nil [54943 55059]) ("org-directory" variable nil "~/org" nil "Directory with org files.
This directory will be used as default to prompt for org files.
Used by the hooks for remember.el." nil [55061 55265]) ("org-default-notes-file" variable nil "~/.notes" nil "Default target for storing notes.
Used by the hooks for remember.el.  This can be a string, or nil to mean
the value of `remember-data-file'.
You can set this on a per-template basis with the variable
`org-remember-templates'." nil [55267 55660]) ("org-remember-store-without-prompt" variable nil t nil "Non-nil means, `C-c C-c' stores remember note without further promts.
In this case, you need `C-u C-c C-c' to get the prompts for
note file and headline.
When this variable is nil, `C-c C-c' give you the prompts, and
`C-u C-c C-c' trigger the fasttrack." nil [55662 56007]) ("org-remember-default-headline" variable nil "" nil "The headline that should be the default location in the notes file.
When filing remember notes, the cursor will start at that position.
You can set this on a per-template basis with the variable
`org-remember-templates'." nil [56009 56317]) ("org-remember-templates" variable nil nil nil "Templates for the creation of remember buffers.
When nil, just let remember make the buffer.
When not nil, this is a list of 5-element lists.  In each entry, the first
element is a the name of the template, It should be a single short word.
The second element is a character, a unique key to select this template.
The third element is the template.  The forth element is optional and can
specify a destination file for remember items created with this template.
The default file is given by `org-default-notes-file'.  An optional fifth
element can specify the headline in that file that should be offered
first when the user is asked to file the entry.  The default headline is
given in the variable `org-remember-default-headline'.

The template specifies the structure of the remember buffer.  It should have
a first line starting with a star, to act as the org-mode headline.
Furthermore, the following %-escapes will be replaced with content:

  %^{prompt}  prompt the user for a string and replace this sequence with it.
  %t          time stamp, date only
  %T          time stamp with date and time
  %u, %U      like the above, but inactive time stamps
  %^t         like %t, but prompt for date.  Similarly %^T, %^u, %^U
              You may define a prompt like %^{Please specify birthday}t
  %n          user name (taken from `user-full-name')
  %a          annotation, normally the link created with org-store-link
  %i          initial content, the region when remember is called with C-u.
              If %i is indented, the entire inserted text will be indented
              as well.

  %?          After completing the template, position cursor here.

Apart from these general escapes, you can access information specific to the
link type that is created.  For example, calling `remember' in emails or gnus
will record the author and the subject of the message, which you can access
with %:author and %:subject, respectively.  Here is a complete list of what
is recorded for each link type.

Link type          |  Available information
-------------------+------------------------------------------------------
bbdb               |  %:type %:name %:company
vm, wl, mh, rmail  |  %:type %:subject %:message-id
                   |  %:from %:fromname %:fromaddress
                   |  %:to   %:toname   %:toaddress
                   |  %:fromto (either \"to NAME\" or \"from NAME\")
gnus               |  %:group, for messages also all email fields
w3, w3m            |  %:type %:url
info               |  %:type %:file %:node
calendar           |  %:type %:date" nil [56319 59806]) ("org-reverse-note-order" variable nil nil nil "Non-nil means, store new notes at the beginning of a file or entry.
When nil, new notes will be filed to the end of a file or entry." nil [59808 60195]) ("defgroup" code nil [60197 60299]) ("defgroup" code nil [60301 60422]) ("org-todo-keywords" variable nil (quote ((sequence "TODO" "DONE"))) nil "List of TODO entry keyword sequences and their interpretation.
\\<org-mode-map>This is a list of sequences.

Each sequence starts with a symbol, either `sequence' or `type',
indicating if the keywords should be interpreted as a sequence of
action steps, or as different types of TODO items.  The first
keywords are states requiring action - these states will select a headline
for inclusion into the global TODO list Org-mode produces.  If one of
the \"keywords\" is the vertical bat \"|\" the remaining keywords
signify that no further action is necessary.  If \"|\" is not found,
the last keyword is treated as the only DONE state of the sequence.

The command \\[org-todo] cycles an entry through these states, and one
additional state where no keyword is present.  For details about this
cycling, see the manual.

TODO keywords and interpretation can also be set on a per-file basis with
the special #+SEQ_TODO and #+TYP_TODO lines.

For backward compatibility, this variable may also be just a list
of keywords - in this case the interptetation (sequence or type) will be
taken from the (otherwise obsolete) variable `org-todo-interpretation'." nil [60424 62148]) ("org-todo-keywords-1" variable nil nil nil nil nil [62150 62182]) ("make-variable-buffer-local" code nil [62183 62232]) ("org-todo-keywords-for-agenda" variable nil nil nil nil nil [62233 62274]) ("org-done-keywords-for-agenda" variable nil nil nil nil nil [62275 62316]) ("org-not-done-keywords" variable nil nil nil nil nil [62317 62351]) ("make-variable-buffer-local" code nil [62352 62403]) ("org-done-keywords" variable nil nil nil nil nil [62404 62434]) ("make-variable-buffer-local" code nil [62435 62482]) ("org-todo-heads" variable nil nil nil nil nil [62483 62510]) ("make-variable-buffer-local" code nil [62511 62555]) ("org-todo-sets" variable nil nil nil nil nil [62556 62582]) ("make-variable-buffer-local" code nil [62583 62626]) ("org-todo-log-states" variable nil nil nil nil nil [62627 62659]) ("make-variable-buffer-local" code nil [62660 62709]) ("org-todo-kwd-alist" variable nil nil nil nil nil [62710 62741]) ("make-variable-buffer-local" code nil [62742 62790]) ("org-todo-key-alist" variable nil nil nil nil nil [62791 62822]) ("make-variable-buffer-local" code nil [62823 62871]) ("org-todo-key-trigger" variable nil nil nil nil nil [62872 62905]) ("make-variable-buffer-local" code nil [62906 62956]) ("org-todo-interpretation" variable nil (quote sequence) nil "Controls how TODO keywords are interpreted.
This variable is in principle obsolete and is only used for
backward compatibility, if the interpretation of todo keywords is
not given already in `org-todo-keywords'.  See that variable for
more information." nil [62958 63367]) ("org-use-fast-todo-selection" variable nil (quote prefix) nil "Non-nil means, use the fast todo selection scheme with C-c C-t.
This variable describes if and under what circumstances the cycling
mechanism for TODO keywords will be replaced by a single-key, direct
selection scheme.

When nil, fast selection is never used.

When the symbol `prefix', it will be used when `org-todo' is called with
a prefix argument,  i.e. `C-u C-c C-t' in an Org-mode buffer, and `C-u t'
in an agenda buffer.

When t, fast selection is used by default.  In this case, the prefix
argument forces cycling instead.

In all cases, the special interface is only used if access keys have actually
been assigned by the user, i.e. if keywords in the configuration are followed
by a letter in parenthesis, like TODO(t)." nil [63369 64315]) ("org-after-todo-state-change-hook" variable nil nil nil "Hook which is run after the state of a TODO item was changed.
The new state (a string with a TODO keyword, or nil) is available in the
Lisp variable `state'." nil [64317 64560]) ("org-log-done" variable nil nil nil "When set, insert a (non-active) time stamp when TODO entry is marked DONE.
When the state of an entry is changed from nothing or a DONE state to
a not-done TODO state, remove a previous closing date.

This can also be a list of symbols indicating under which conditions
the time stamp recording the action should be annotated with a short note.
Valid members of this list are

  done       Offer to record a note when marking entries done
  state      Offer to record a note whenever changing the TODO state
             of an item.  This is only relevant if TODO keywords are
             interpreted as sequence, see variable `org-todo-interpretation'.
             When `state' is set, this includes tracking `done'.
  clock-out  Offer to record a note when clocking out of an item.

A separate window will then pop up and allow you to type a note.
After finishing with C-c C-c, the note will be added directly after the
timestamp, as a plain list item.  See also the variable
`org-log-note-headings'.

Logging can also be configured on a per-file basis by adding one of
the following lines anywhere in the buffer:

   #+STARTUP: logdone
   #+STARTUP: nologging
   #+STARTUP: lognotedone
   #+STARTUP: lognotestate
   #+STARTUP: lognoteclock-out

You can have local logging settings for a subtree by setting the LOGGING
property to one or more of these keywords." nil [64562 66341]) ("org-log-done-with-time" variable nil t nil "Non-nil means, the CLOSED time stamp will contain date and time.
When nil, only the date will be recorded." nil [66343 66530]) ("org-log-note-headings" variable nil (quote ((done . "CLOSING NOTE %t") (state . "State %-12s %t") (clock-out . ""))) nil "Headings for notes added when clocking out or closing TODO items.
The value is an alist, with the car being a symbol indicating the note
context, and the cdr is the heading to be used.  The heading may also be the
empty string.
%t in the heading will be replaced by a time stamp.
%s will be replaced by the new TODO state, in double quotes.
%u will be replaced by the user name.
%U will be replaced by the full user name." nil [66532 67438]) ("org-log-states-order-reversed" variable nil t nil "Non-nil means, the latest state change note will be directly after heading.
When nil, the notes will be orderer according to time." nil [67440 67677]) ("org-log-repeat" variable nil t nil "Non-nil means, prompt for a note when REPEAT is resetting a TODO entry.
When nil, no note will be taken.
This option can also be set with on a per-file-basis with

   #+STARTUP: logrepeat
   #+STARTUP: nologrepeat

You can have local logging settings for a subtree by setting the LOGGING
property to one or more of these keywords." nil [67679 68101]) ("org-clock-into-drawer" variable nil 2 nil "Should clocking info be wrapped into a drawer?
When t, clocking info will always be inserted into a :CLOCK: drawer.
If necessary, the drawer will be created.
When nil, the drawer will not be created, but used when present.
When an integer and the number of clocking entries in an item
reaches or exceeds this number, a drawer will be created." nil [68103 68689]) ("org-clock-out-when-done" variable nil t nil "When t, the clock will be stopped when the relevant entry is marked DONE.
Nil means, clock will keep running until stopped explicitly with
`C-c C-x C-o', or until the clock is started in a different item." nil [68691 68977]) ("defgroup" code nil [68979 69079]) ("org-highest-priority" variable nil 65 nil "The highest priority of TODO items.  A character like ?A, ?B etc.
Must have a smaller ASCII number than `org-lowest-priority'." nil [69081 69291]) ("org-lowest-priority" variable nil 67 nil "The lowest priority of TODO items.  A character like ?A, ?B etc.
Must have a larger ASCII number than `org-highest-priority'." nil [69293 69501]) ("org-default-priority" variable nil 66 nil "The default priority of TODO items.
This is the priority an item get if no explicit priority is given." nil [69503 69689]) ("org-priority-start-cycle-with-default" variable nil t nil "Non-nil means, start with default priority when starting to cycle.
When this is nil, the first step in the cycle will be (depending on the
command used) one higher or lower that the default priority." nil [69691 69988]) ("defgroup" code nil [69990 70107]) ("org-insert-labeled-timestamps-at-point" variable nil nil nil "Non-nil means, SCHEDULED and DEADLINE timestamps are inserted at point.
When nil, these labeled time stamps are forces into the second line of an
entry, just after the headline.  When scheduling from the global TODO list,
the time stamp will always be forced into the second line." nil [70109 70484]) ("org-time-stamp-formats" variable nil (quote ("<%Y-%m-%d %a>" . "<%Y-%m-%d %a %H:%M>")) ((const . t)) "Formats for `format-time-string' which are used for time stamps.
It is not recommended to change this constant." nil [70486 70678]) ("org-time-stamp-rounding-minutes" variable nil 0 nil "Number of minutes to round time stamps to upon insertion.
When zero, insert the time unmodified.  Useful rounding numbers
should be factors of 60, so for example 5, 10, 15.
When this is not zero, you can still force an exact time-stamp by using
a double prefix argument to a time-stamp command like `C-c .' or `C-c !'." nil [70680 71084]) ("org-display-custom-times" variable nil nil nil "Non-nil means, overlay custom formats over all time stamps.
The formats are defined through the variable `org-time-stamp-custom-formats'.
To turn this on on a per-file basis, insert anywhere in the file:
   #+STARTUP: customtime" nil [71086 71412]) ("make-variable-buffer-local" code nil [71413 71467]) ("org-time-stamp-custom-formats" variable nil (quote ("<%m/%d/%y %a>" . "<%m/%d/%y %a %H:%M>")) nil "Custom formats for time stamps.  See `format-time-string' for the syntax.
These are overlayed over the default ISO format if the variable
`org-display-custom-times' is set.  Time like %H:%M should be at the
end of the second format." nil [71469 71836]) ("org-time-stamp-format" function nil ("&optional" "long" "inactive") nil "Get the right format for a time string." nil [71838 72102]) ("org-popup-calendar-for-date-prompt" variable nil t nil "Non-nil means, pop up a calendar when prompting for a date.
In the calendar, the date can be selected with mouse-1.  However, the
minibuffer will also be active, and you can simply enter the date as well.
When nil, only the minibuffer will be available." nil [72104 72446]) ("org-edit-timestamp-down-means-later" variable nil nil nil "Non-nil means, S-down will increase the time in a time stamp.
When nil, S-up will increase." nil [72448 72631]) ("org-calendar-follow-timestamp-change" variable nil t nil "Non-nil means, make the calendar window follow timestamp changes.
When a timestamp is modified and the calendar window is visible, it will be
moved to the new date." nil [72633 72888]) ("defgroup" code nil [72890 72986]) ("org-tag-alist" variable nil nil nil "List of tags allowed in Org-mode files.
When this list is nil, Org-mode will base TAG input on what is already in the
buffer.
The value of this variable is an alist, the car of each entry must be a
keyword as a string, the cdr may be a character that is used to select
that tag through the fast-tag-selection interface.
See the manual for details." nil [72988 73635]) ("org-use-fast-tag-selection" variable nil (quote auto) nil "Non-nil means, use fast tag selection scheme.
This is a special interface to select and deselect tags with single keys.
When nil, fast selection is never used.
When the symbol `auto', fast selection is used if and only if selection
characters for tags have been configured, either through the variable
`org-tag-alist' or through a #+TAGS line in the buffer.
When t, fast selection is always used and selection keys are assigned
automatically if necessary." nil [73637 74319]) ("org-fast-tag-selection-single-key" variable nil nil nil "Non-nil means, fast tag selection exits after first change.
When nil, you have to press RET to exit it.
During fast tag selection, you can toggle this flag with `C-c'.
This variable can also have the value `expert'.  In this case, the window
displaying the tags menu is not even shown, until you press C-c again." nil [74321 74826]) ("org-fast-tag-selection-include-todo" variable nil nil nil "Non-nil means, fast tags selection interface will also offer TODO states.
This is an undocumented feature, you should not rely on it." nil [74828 75014]) ("org-tags-column" variable nil -80 nil "The column to which tags should be indented in a headline.
If this number is positive, it specifies the column.  If it is negative,
it means that the tags should be flushright to that column.  For example,
-80 works well for a normal 80 character screen." nil [75016 75342]) ("org-auto-align-tags" variable nil t nil "Non-nil means, realign tags after pro/demotion of TODO state change.
These operations change the length of a headline and therefore shift
the tags around.  With this options turned on, after each such operation
the tags are again aligned to `org-tags-column'." nil [75344 75677]) ("org-use-tag-inheritance" variable nil t nil "Non-nil means, tags in levels apply also for sublevels.
When nil, only the tags directly given in a specific line apply there.
If you turn off this option, you very likely want to turn on the
companion option `org-tags-match-list-sublevels'." nil [75679 75998]) ("org-tags-match-list-sublevels" variable nil nil nil "Non-nil means list also sublevels of headlines matching tag search.
Because of tag inheritance (see variable `org-use-tag-inheritance'),
the sublevels of a headline matching a tag search often also match
the same search.  Listing all of them can create very long lists.
Setting this variable to nil causes subtrees of a match to be skipped.
This option is off by default, because inheritance in on.  If you turn
inheritance off, you very likely want to turn this option on.

As a special case, if the tag search is restricted to TODO items, the
value of this variable is ignored and sublevels are always checked, to
make sure all corresponding TODO items find their way into the list." nil [76000 76770]) ("org-tags-history" variable nil nil nil "History of minibuffer reads for tags." nil [76772 76843]) ("org-last-tags-completion-table" variable nil nil nil "The last used completion table for tags." nil [76844 76932]) ("org-after-tags-change-hook" variable nil nil nil "Hook that is run after the tags in a line have changed." nil [76933 77032]) ("defgroup" code nil [77034 77148]) ("org-property-format" variable nil "%-10s %s" nil "How property key/value pairs should be formatted by `indent-line'.
When `indent-line' hits a property definition, it will format the line
according to this format, mainly to make sure that the values are
lined-up with respect to each other." nil [77150 77478]) ("org-use-property-inheritance" variable nil nil nil "Non-nil means, properties apply also for sublevels.
This can cause significant overhead when doing a search, so this is turned
off by default.
When nil, only the properties directly given in the current entry count.

However, note that some special properties use inheritance under special
circumstances (not in searches).  Examples are CATEGORY, ARCHIVE, COLUMNS,
and the properties ending in \"_ALL\" when they are used as descriptor
for valid values of a property." nil [77480 78038]) ("org-columns-default-format" variable nil "%25ITEM %TODO %3PRIORITY %TAGS" nil "The default column format, if no other format has been defined.
This variable can be set on the per-file basis by inserting a line

#+COLUMNS: %25ITEM ....." nil [78040 78313]) ("org-global-properties" variable nil nil nil "List of property/value pairs that can be inherited by any entry.
You can set buffer-local values for this by adding lines like

#+PROPERTY: NAME VALUE" nil [78315 78630]) ("org-local-properties" variable nil nil nil "List of property/value pairs that can be inherited by any entry.
Valid for the current buffer.
This variable is populated from #+PROPERTY lines." nil [78632 78814]) ("defgroup" code nil [78816 78924]) ("org-category" variable nil nil nil "Variable used by org files to set a category for agenda display.
Such files should use a file variable to set it, for example

#   -*- mode: org; org-category: \"ELisp\"

or contain a special line

#+CATEGORY: ELisp

If the file does not specify a category, then file's base name
is used instead." nil [78926 79252]) ("make-variable-buffer-local" code nil [79253 79295]) ("org-agenda-files" variable nil nil nil "The files to be used for agenda display.
Entries may be added to this list with \\[org-agenda-file-to-front] and removed with
\\[org-remove-file].  You can also use customize to edit the list.

If an entry is a directory, all files in that directory that are matched by
`org-agenda-file-regexp' will be part of the file list.

If the value of the variable is not a list but a single file name, then
the list of agenda files is actually stored and maintained in that file, one
agenda file per line." nil [79297 80003]) ("org-agenda-file-regexp" variable nil "\\.org\\'" nil "Regular expression to match files for `org-agenda-files'.
If any element in the list in that variable contains a directory instead
of a normal file, all files in that directory that are matched by this
regular expression will be included." nil [80005 80331]) ("org-agenda-skip-unavailable-files" variable nil nil nil "t means to just skip non-reachable files in `org-agenda-files'.
Nil means to remove them, after a query, from the list." nil [80333 80544]) ("org-agenda-multi-occur-extra-files" variable nil nil nil "List of extra files to be searched by `org-occur-in-agenda-files'.
The files in `org-agenda-files' are always searched." nil [80546 80764]) ("org-agenda-confirm-kill" variable nil 1 nil "When set, remote killing from the agenda buffer needs confirmation.
When t, a confirmation is always needed.  When a number N, confirmation is
only needed when the text to be killed contains more than N non-white lines." nil [80766 81184]) ("org-calendar-to-agenda-key" variable nil [99] nil "The key to be installed in `calendar-mode-map' for switching to the agenda.
The command `org-calendar-goto-agenda' will be bound to this key.  The
default is the character `c' because then `c' can be used to switch back and
forth between agenda and calendar." nil [81186 81527]) ("org-agenda-compact-blocks" variable nil nil nil "Non-nil means, make the block agenda more compact.
This is done by leaving out unnecessary lines." nil [81529 81705]) ("defgroup" code nil [81707 81843]) ("org-agenda-with-colors" variable nil t nil "Non-nil means, use colors in agenda views." nil [81845 81973]) ("org-agenda-exporter-settings" variable nil nil nil "Alist of variable/value pairs that should be active during agenda export.
This is a good place to set uptions for ps-print and for htmlize." nil [81975 82279]) ("org-agenda-export-html-style" variable nil "" nil "The style specification for exported HTML Agenda files.
If this variable contains a string, it will replace the default <style>
section as produced by `htmlize'.
Since there are different ways of setting style information, this variable
needs to contain the full HTML structure to provide a style, including the
surrounding HTML tags.  The style specifications should include definitions
the fonts used by the agenda, here is an example:

   <style type=\"text/css\">
       p { font-weight: normal; color: gray; }
       .org-agenda-structure {
          font-size: 110%;
          color: #003399;
          font-weight: 600;
       }
       .org-todo {
          color: #cc6666;Week-agenda:
          font-weight: bold;
       }
       .org-done {
          color: #339933;
       }
       .title { text-align: center; }
       .todo, .deadline { color: red; }
       .done { color: green; }
    </style>

or, if you want to keep the style in a file,

   <link rel=\"stylesheet\" type=\"text/css\" href=\"mystyles.css\">

As the value of this option simply gets inserted into the HTML <head> header,
you can \"misuse\" it to also add other text to the header.  However,
<style>...</style> is required, if not present the variable will be ignored." nil [82281 83647]) ("defgroup" code nil [83649 83793]) ("org-agenda-custom-commands" variable nil nil nil "Custom commands for the agenda.
These commands will be offered on the splash screen displayed by the
agenda dispatcher \\[org-agenda].  Each entry is a list like this:

   (key desc type match options files)

key     The key (one or more characters as a string) to be associated
        with the command.
desc    A description of the commend, when omitted or nil, a default
        description is built using MATCH.
type    The command type, any of the following symbols:
         todo        Entries with a specific TODO keyword, in all agenda files.
         tags        Tags match in all agenda files.
         tags-todo   Tags match in all agenda files, TODO entries only.
         todo-tree   Sparse tree of specific TODO keyword in *current* file.
         tags-tree   Sparse tree with all tags matches in *current* file.
         occur-tree  Occur sparse tree for *current* file.
         ...         A user-defined function.
match   What to search for:
         - a single keyword for TODO keyword searches
         - a tags match expression for tags searches
         - a regular expression for occur searches
options  A list of option settings, similar to that in a let form, so like
         this: ((opt1 val1) (opt2 val2) ...)
files    A list of files file to write the produced agenda buffer to
         with the command `org-store-agenda-views'.
         If a file name ends in \".html\", an HTML version of the buffer
         is written out.  If it ends in \".ps\", a postscript version is
         produced.  Otherwide, only the plain text is written to the file.

You can also define a set of commands, to create a composite agenda buffer.
In this case, an entry looks like this:

  (key desc (cmd1 cmd2 ...) general-options file)

where

desc   A description string to be displayed in the dispatcher menu.
cmd    An agenda command, similar to the above.  However, tree commands
       are no allowed, but instead you can get agenda and global todo list.
       So valid commands for a set are:
       (agenda)
       (alltodo)
       (stuck)
       (todo \"match\" options files)
       (tags \"match\" options files)
       (tags-todo \"match\" options files)

Each command can carry a list of options, and another set of options can be
given for the whole set of commands.  Individual command options take
precedence over the general options.

When using several characters as key to a command, the first characters
are prefix commands.  For the dispatcher to display useful information, you
should provide a description for the prefix, like

 (setq org-agenda-custom-commands
   '((\"h\" . \"HOME + Name tag searches\") ; describe prefix \"h\"
     (\"hl\" tags \"+HOME+Lisa\")
     (\"hp\" tags \"+HOME+Peter\")
     (\"hk\" tags \"+HOME+Kim\")))" nil [83795 89867]) ("org-stuck-projects" variable nil (quote ("+LEVEL=2/-DONE" ("TODO" "NEXT" "NEXTACTION") nil "")) nil "How to identify stuck projects.
This is a list of four items:
1. A tags/todo matcher string that is used to identify a project.
   The entire tree below a headline matched by this is considered one project.
2. A list of TODO keywords identifying non-stuck projects.
   If the project subtree contains any headline with one of these todo
   keywords, the project is considered to be not stuck.  If you specify
   \"*\" as a keyword, any TODO keyword will mark the project unstuck.
3. A list of tags identifying non-stuck projects.
   If the project subtree contains any headline with one of these tags,
   the project is considered to be not stuck.  If you specify \"*\" as
   a tag, any tag will mark the project unstuck.
4. An arbitrary regular expression matching non-stuck projects.

After defining this variable, you may use \\[org-agenda-list-stuck-projects]
or `C-c a #' to produce the list." nil [89869 91281]) ("defgroup" code nil [91284 91412]) ("org-agenda-todo-list-sublevels" variable nil t nil "Non-nil means, check also the sublevels of a TODO entry for TODO entries.
When nil, the sublevels of a TODO entry are not checked, resulting in
potentially much shorter TODO lists." nil [91414 91705]) ("org-agenda-todo-ignore-with-date" variable nil nil nil "Non-nil means, don't show entries with a date in the global todo list.
You can use this if you prefer to mark mere appointments with a TODO keyword,
but don't want them to show up in the TODO list.
When this is set, it also covers deadlines and scheduled items, the settings
of `org-agenda-todo-ignore-scheduled' and `org-agenda-todo-ignore-deadlines'
will be ignored." nil [91707 92190]) ("org-agenda-todo-ignore-scheduled" variable nil nil nil "Non-nil means, don't show scheduled entries in the global todo list.
The idea behind this is that by scheduling it, you have already taken care
of this item.
See also `org-agenda-todo-ignore-with-date'." nil [92192 92509]) ("org-agenda-todo-ignore-deadlines" variable nil nil nil "Non-nil means, don't show near deadline entries in the global todo list.
Near means closer than `org-deadline-warning-days' days.
The idea behind this is that such items will appear in the agenda anyway.
See also `org-agenda-todo-ignore-with-date'." nil [92511 92874]) ("org-agenda-skip-scheduled-if-done" variable nil nil nil "Non-nil means don't show scheduled items in agenda when they are done.
This is relevant for the daily/weekly agenda, not for the TODO list.  And
it applies only to the actual date of the scheduling.  Warnings about
an item with a past scheduling dates are always turned off when the item
is DONE." nil [92876 93269]) ("org-agenda-skip-deadline-if-done" variable nil nil nil "Non-nil means don't show deadines when the corresponding item is done.
When nil, the deadline is still shown and should give you a happy feeling.
This is relevant for the daily/weekly agenda.  And it applied only to the
actualy date of the deadline.  Warnings about approching and past-due
deadlines are always turned off when the item is DONE." nil [93271 93711]) ("org-timeline-show-empty-dates" variable nil 3 nil "Non-nil means, `org-timeline' also shows dates without an entry.
When nil, only the days which actually have entries are shown.
When t, all days between the first and the last date are shown.
When an integer, show also empty dates, but if there is a gap of more than
N days, just insert a special line indicating the size of the gap." nil [93713 94237]) ("defgroup" code nil [94240 94389]) ("org-finalize-agenda-hook" variable nil nil nil "Hook run just before displaying an agenda buffer." nil [94391 94528]) ("org-agenda-mouse-1-follows-link" variable nil nil nil "Non-nil means, mouse-1 on a link will follow the link in the agenda.
A longer mouse click will still set point.  Does not wortk on XEmacs.
Needs to be set before org.el is loaded." nil [94530 94807]) ("org-agenda-start-with-follow-mode" variable nil nil nil "The initial value of follow-mode in a newly created agenda window." nil [94809 94975]) ("defgroup" code nil [94977 95126]) ("org-agenda-window-setup" variable nil (quote reorganize-frame) nil "How the agenda buffer should be displayed.
Possible values for this option are:

current-window    Show agenda in the current window, keeping all other windows.
other-frame       Use `switch-to-buffer-other-frame' to display agenda.
other-window      Use `switch-to-buffer-other-window' to display agenda.
reorganize-frame  Show only two windows on the current frame, the current
                  window and the agenda.
See also the variable `org-agenda-restore-windows-after-quit'." nil [95128 95845]) ("org-agenda-window-frame-fractions" variable nil (quote (0.5 . 0.75)) nil "The min and max height of the agenda window as a fraction of frame height.
The value of the variable is a cons cell with two numbers between 0 and 1.
It only matters if `org-agenda-window-setup' is `reorganize-frame'." nil [95847 96221]) ("org-agenda-restore-windows-after-quit" variable nil nil nil "Non-nil means, restore window configuration open exiting agenda.
Before the window configuration is changed for displaying the agenda,
the current status is recorded.  When the agenda is exited with
`q' or `x' and this option is set, the old state is restored.  If
`org-agenda-window-setup' is `other-frame', the value of this
option will be ignored.." nil [96223 96678]) ("org-indirect-buffer-display" variable nil (quote other-window) nil "How should indirect tree buffers be displayed?
This applies to indirect buffers created with the commands
\\[org-tree-to-indirect-buffer] and \\[org-agenda-tree-to-indirect-buffer].
Valid values are:
current-window   Display in the current window
other-window     Just display in another window.
dedicated-frame  Create one new frame, and re-use it each time.
new-frame        Make a new frame each time." nil [96680 97458]) ("defgroup" code nil [97460 97600]) ("org-agenda-ndays" variable nil 7 nil "Number of days to include in overview display.
Should be 1 or 7." nil [97602 97751]) ("org-agenda-start-on-weekday" variable nil 1 nil "Non-nil means, start the overview always on the specified weekday.
0 denotes Sunday, 1 denotes Monday etc.
When nil, always start on the current day." nil [97753 98070]) ("org-agenda-show-all-dates" variable nil t nil "Non-nil means, `org-agenda' shows every day in the selected range.
When nil, only the days which actually have entries are shown." nil [98072 98296]) ("org-agenda-format-date" variable nil (quote org-agenda-format-date-aligned) nil "Format string for displaying dates in the agenda.
Used by the daily/weekly agenda and by the timeline.  This should be
a format string understood by `format-time-string', or a function returning
the formatted date as a string.  The function must take a single argument,
a calendar-style date list like (month day year)." nil [98298 98817]) ("org-agenda-format-date-aligned" function nil ("date") nil "Format a date string for display in the daily/weekly agenda, or timeline.
This function makes sure that dates are aligned for easy reading." nil [98819 99211]) ("org-agenda-include-diary" variable nil nil nil "If non-nil, include in the agenda entries from the Emacs Calendar's diary." nil [99213 99383]) ("org-agenda-include-all-todo" variable nil nil nil "Set  means weekly/daily agenda will always contain all TODO entries.
The TODO entries will be listed at the top of the agenda, before
the entries for specific days." nil [99385 99648]) ("org-agenda-repeating-timestamp-show-all" variable nil t nil "Non-nil means, show all occurences of a repeating stamp in the agenda.
When nil, only one occurence is shown, either today or the
nearest into the future." nil [99650 99913]) ("org-deadline-warning-days" variable nil 14 nil "No. of days before expiration during which a deadline becomes active.
This variable governs the display in sparse trees and in the agenda.
When negative, it means use this number (the absolute value of it)
even if a deadline has a different individual lead time specified." nil [99915 100301]) ("org-scheduled-past-days" variable nil 10000 nil "No. of days to continue listing scheduled items that are not marked DONE.
When an item is scheduled on a date, it shows up in the agenda on this
day and will be listed until it is marked done for the number of days
given here." nil [100303 100625]) ("defgroup" code nil [100627 100774]) ("org-agenda-use-time-grid" variable nil t nil "Non-nil means, show a time grid in the agenda schedule.
A time grid is a set of lines for specific times (like every two hours between
8:00 and 20:00).  The items scheduled for a day at specific times are
sorted in between these lines.
For details about when the grid will be shown, and what it will look like, see
the variable `org-agenda-time-grid'." nil [100776 101218]) ("org-agenda-time-grid" variable nil (quote ((daily today require-timed) "----------------" (800 1000 1200 1400 1600 1800 2000))) nil "The settings for time grid for agenda display.
This is a list of three items.  The first item is again a list.  It contains
symbols specifying conditions when the grid should be displayed:

 daily         if the agenda shows a single day
 weekly        if the agenda shows an entire week
 today         show grid on current date, independent of daily/weekly display
 require-timed show grid only if at least one item has a time specification

The second item is a string which will be places behing the grid time.

The third item is a list of integers, indicating the times that should have
a grid line." nil [101220 102530]) ("defgroup" code nil [102532 102669]) ("let" code nil [102671 105094]) ("org-sort-agenda-notime-is-late" variable nil t nil "Non-nil means, items without time are considered late.
This is only relevant for sorting.  When t, items which have no explicit
time like 15:30 will be considered as 99:01, i.e. later than any items which
do have a time.  When nil, the default time is before 0:00.  You can use this
option to decide if the schedule for today should come before or after timeless
agenda entries." nil [105096 105569]) ("defgroup" code nil [105571 105733]) ("org-agenda-prefix-format" variable nil (quote ((agenda . "  %-12:c%?-12t% s") (timeline . "  % s") (todo . "  %-12:c") (tags . "  %-12:c"))) nil "Format specifications for the prefix of items in the agenda views.
An alist with four entries, for the different agenda types.  The keys to the
sublists are `agenda', `timeline', `todo', and `tags'.  The values
are format strings.
This format works similar to a printf format, with the following meaning:

  %c   the category of the item, \"Diary\" for entries from the diary, or
       as given by the CATEGORY keyword or derived from the file name.
  %T   the *last* tag of the item.  Last because inherited tags come
       first in the list.
  %t   the time-of-day specification if one applies to the entry, in the
       format HH:MM
  %s   Scheduling/Deadline information, a short string

All specifiers work basically like the standard `%s' of printf, but may
contain two additional characters:  A question mark just after the `%' and
a whitespace/punctuation character just before the final letter.

If the first character after `%' is a question mark, the entire field
will only be included if the corresponding value applies to the
current entry.  This is useful for fields which should have fixed
width when present, but zero width when absent.  For example,
\"%?-12t\" will result in a 12 character time field if a time of the
day is specified, but will completely disappear in entries which do
not contain a time.

If there is punctuation or whitespace character just before the final
format letter, this character will be appended to the field value if
the value is not empty.  For example, the format \"%-12:c\" leads to
\"Diary: \" if the category is \"Diary\".  If the category were be
empty, no additional colon would be interted.

The default value of this option is \"  %-12:c%?-12t% s\", meaning:
- Indent the line with two space characters
- Give the category in a 12 chars wide field, padded with whitespace on
  the right (because of `-').  Append a colon if there is a category
  (because of `:').
- If there is a time-of-day, put it into a 12 chars wide field.  If no
  time, don't put in an empty field, just skip it (because of '?').
- Finally, put the scheduling information and append a whitespace.

As another example, if you don't want the time-of-day of entries in
the prefix, you could use:

  (setq org-agenda-prefix-format \"  %-11:c% s\")

See also the variables `org-agenda-remove-times-when-in-prefix' and
`org-agenda-remove-tags'." nil [105735 108646]) ("org-prefix-format-compiled" variable nil nil nil "The compiled version of the most recently used prefix format.
See the variable `org-agenda-prefix-format'." nil [108648 108798]) ("org-agenda-scheduled-leaders" variable nil (quote ("Scheduled: " "Sched.%2dx: ")) nil "Text preceeding scheduled items in the agenda view.
THis is a list with two strings.  The first applies when the item is
scheduled on the current day.  The second applies when it has been scheduled
previously, it may contain a %d to capture how many days ago the item was
scheduled." nil [108800 109302]) ("org-agenda-deadline-leaders" variable nil (quote ("Deadline:  " "In %3d d.: ")) nil "Text preceeding deadline items in the agenda view.
This is a list with two strings.  The first applies when the item has its
deadline on the current day.  The second applies when it is in the past or
in the future, it may contain %d to capture how many days away the deadline
is (was)." nil [109304 109801]) ("org-agenda-remove-times-when-in-prefix" variable nil t nil "Non-nil means, remove duplicate time specifications in agenda items.
When the format `org-agenda-prefix-format' contains a `%t' specifier, a
time-of-day specification in a headline or diary entry is extracted and
placed into the prefix.  If this option is non-nil, the original specification
(a timestamp or -range, or just a plain time(range) specification like
11:30-4pm) will be removed for agenda display.  This makes the agenda less
cluttered.
The option can be t or nil.  It may also be the symbol `beg', indicating
that the time should only be removed what it is located at the beginning of
the headline/diary entry." nil [109803 110660]) ("org-agenda-default-appointment-duration" variable nil nil nil "Default duration for appointments that only have a starting time.
When nil, no duration is specified in such cases.
When non-nil, this must be the number of minutes, e.g. 60 for one hour." nil [110663 111041]) ("org-agenda-remove-tags" variable nil nil nil "Non-nil means, remove the tags from the headline copy in the agenda.
When this is the symbol `prefix', only remove tags when
`org-agenda-prefix-format' contains a `%T' specifier." nil [111044 111448]) ("if" code nil [111450 111564]) ("org-agenda-tags-column" variable nil -80 nil "Shift tags in agenda items to this column.
If this number is positive, it specifies the column.  If it is negative,
it means that the tags should be flushright to that column.  For example,
-80 works well for a normal 80 character screen." nil [111566 111897]) ("if" code nil [111899 112001]) ("org-agenda-fontify-priorities" variable nil t nil "Non-nil means, highlight low and high priorities in agenda.
When t, the highest priority entries are bold, lowest priority italic.
This may also be an association list of priority faces.  The face may be
a names face, or a list like `(:background \"Red\")'." nil [112003 112570]) ("defgroup" code nil [112572 112680]) ("org-format-latex-options" variable nil (quote (:foreground default :background default :scale 1.0 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers ("begin" "$" "$$" "\\(" "\\["))) nil "Options for creating images from LaTeX fragments.
This is a property list with the following properties:
:foreground  the foreground color for images embedded in emacs, e.g. \"Black\".
             `default' means use the forground of the default face.
:background  the background color, or \"Transparent\".
             `default' means use the background of the default face.
:scale       a scaling factor for the size of the images
:html-foreground, :html-background, :html-scale
             The same numbers for HTML export.
:matchers    a list indicating which matchers should be used to
             find LaTeX fragments.  Valid members of this list are:
             \"begin\"  find environments
             \"$\"      find math expressions surrounded by $...$
             \"$$\"     find math expressions surrounded by $$....$$
             \"\\(\"     find math expressions surrounded by \\(...\\)
             \"\\ [\"    find math expressions surrounded by \\ [...\\]" nil [112682 113915]) ("org-format-latex-header" variable nil "\\documentclass{article}
\\usepackage{fullpage}         % do not remove
\\usepackage{amssymb}
\\usepackage[usenames]{color}
\\usepackage{amsmath}
\\usepackage{latexsym}
\\usepackage[mathscr]{eucal}
\\pagestyle{empty}             % do not remove" nil "The document header used for processing LaTeX fragments." nil [113917 114296]) ("defgroup" code nil [114298 114397]) ("defgroup" code nil [114399 114531]) ("org-export-publishing-directory" variable nil "." nil "Path to the location where exported files should be located.
This path may be relative to the directory where the Org-mode file lives.
The default is to put them into the same directory as the Org-mode file.
The variable may also be an alist with export types `:html', `:ascii',
`:ical', `:LaTeX', or `:xoxo' and the corresponding directories.
If a directory path is relative, it is interpreted relative to the
directory where the exported Org-mode files lives." nil [114533 115321]) ("org-export-language-setup" variable nil (quote (("en" "Author" "Date" "Table of Contents") ("cs" "Autor" "Datum" "Obsah") ("da" "Ophavsmand" "Dato" "Indhold") ("de" "Autor" "Datum" "Inhaltsverzeichnis") ("es" "Autor" "Fecha" "\315ndice") ("fr" "Auteur" "Date" "Table des mati\350res") ("it" "Autore" "Data" "Indice") ("nl" "Auteur" "Datum" "Inhoudsopgave") ("nn" "Forfattar" "Dato" "Innhold") ("sv" "F\366rfattarens" "Datum" "Inneh\345ll"))) nil "Terms used in export text, translated to different languages.
Use the variable `org-export-default-language' to set the language,
or use the +OPTION lines for a per-file setting." nil [115323 116313]) ("org-export-default-language" variable nil "en" nil "The default language of HTML export, as a string.
This should have an association in `org-export-language-setup'." nil [116315 116522]) ("org-export-skip-text-before-1st-heading" variable nil t nil "Non-nil means, skip all text before the first headline when exporting.
When nil, that text is exported as well." nil [116524 116739]) ("org-export-headline-levels" variable nil 3 nil "The last level which is still exported as a headline.
Inferior levels will produce itemize lists when exported.
Note that a numeric prefix argument to an exporter function overrides
this setting.

This option can also be set with the +OPTIONS line, e.g. \"H:2\"." nil [116741 117093]) ("org-export-with-section-numbers" variable nil t nil "Non-nil means, add section numbers to headlines when exporting.

This option can also be set with the +OPTIONS line, e.g. \"num:t\"." nil [117095 117323]) ("org-export-with-toc" variable nil t nil "Non-nil means, create a table of contents in exported files.
The TOC contains headlines with levels up to`org-export-headline-levels'.
When an integer, include levels up to N in the toc, this may then be
different from `org-export-headline-levels', but it will not be allowed
to be larger than the number of headline levels.
When nil, no table of contents is made.

Headlines which contain any TODO items will be marked with \"(*)\" in
ASCII export, and with red color in HTML output, if the option
`org-export-mark-todo-in-toc' is set.

In HTML output, the TOC will be clickable.

This option can also be set with the +OPTIONS line, e.g. \"toc:nil\"
or \"toc:3\"." nil [117325 118214]) ("org-export-mark-todo-in-toc" variable nil nil nil "Non-nil means, mark TOC lines that contain any open TODO items." nil [118216 118373]) ("org-export-preserve-breaks" variable nil nil nil "Non-nil means, preserve all line breaks when exporting.
Normally, in HTML output paragraphs will be reformatted.  In ASCII
export, line breaks will always be preserved, regardless of this variable.

This option can also be set with the +OPTIONS line, e.g. \"\\n:t\"." nil [118375 118734]) ("org-export-with-archived-trees" variable nil (quote headline) nil "Whether subtrees with the ARCHIVE tag should be exported.
This can have three different values
nil       Do not export, pretend this tree is not present
t         Do export the entire tree
headline  Only export the headline, but skip the tree below it." nil [118736 119239]) ("org-export-author-info" variable nil t nil "Non-nil means, insert author name and email into the exported file.

This option can also be set with the +OPTIONS line,
e.g. \"author-info:nil\"." nil [119241 119474]) ("org-export-time-stamp-file" variable nil t nil "Non-nil means, insert a time stamp into the exported file.
The time stamp shows when the file was created.

This option can also be set with the +OPTIONS line,
e.g. \"timestamp:nil\"." nil [119476 119750]) ("org-export-with-timestamps" variable nil t nil "If nil, do not export time stamps and associated keywords." nil [119752 119901]) ("org-export-remove-timestamps-from-toc" variable nil t nil "If nil, remove timestamps from the table of contents entries." nil [119903 120066]) ("org-export-with-tags" variable nil (quote not-in-toc) nil "If nil, do not export tags, just remove them from headlines.
If this is the symbol `not-in-toc', tags will be removed from table of
contents entries, but still be shown in the headlines of the document.

This option can also be set with the +OPTIONS line, e.g. \"tags:nil\"." nil [120068 120548]) ("org-export-with-drawers" variable nil nil nil "Non-nil means, export with drawers like the property drawer.
When t, all drawers are exported.  This may also be a list of
drawer names to export." nil [120550 120949]) ("defgroup" code nil [120951 121118]) ("org-export-with-emphasize" variable nil t nil "Non-nil means, interpret *word*, /word/, and _word_ as emphasized text.
If the export target supports emphasizing text, the word will be
typeset in bold, italic, or underlined, respectively.  Works only for
single words, but you can say: I *really* *mean* *this*.
Not all export backends support this.

This option can also be set with the +OPTIONS line, e.g. \"*:nil\"." nil [121120 121584]) ("org-export-with-footnotes" variable nil t nil "If nil, export [1] as a footnote marker.
Lines starting with [1] will be formatted as footnotes.

This option can also be set with the +OPTIONS line, e.g. \"f:nil\"." nil [121586 121845]) ("org-export-with-sub-superscripts" variable nil t nil "Non-nil means, interpret \"_\" and \"^\" for export.
When this option is turned on, you can use TeX-like syntax for sub- and
superscripts.  Several characters after \"_\" or \"^\" will be
considered as a single item - so grouping with {} is normally not
needed.  For example, the following things will be parsed as single
sub- or superscripts.

 10^24   or   10^tau     several digits will be considered 1 item.
 10^-12  or   10^-tau    a leading sign with digits or a word
 x^2-y^3                 will be read as x^2 - y^3, because items are
                         terminated by almost any nonword/nondigit char.
 x_{i^2} or   x^(2-i)    braces or parenthesis do grouping.

Still, ambiguity is possible - so when in doubt use {} to enclose the
sub/superscript.  If you set this variable to the symbol `{}',
the braces are *required* in order to trigger interpretations as
sub/superscript.  This can be helpful in documents that need \"_\"
frequently in plain text.

Not all export backends support this, but HTML does.

This option can also be set with the +OPTIONS line, e.g. \"^:nil\"." nil [121847 123174]) ("org-export-with-TeX-macros" variable nil t nil "Non-nil means, interpret simple TeX-like macros when exporting.
For example, HTML export converts \\alpha to &alpha; and \\AA to &Aring;.
No only real TeX macros will work here, but the standard HTML entities
for math can be used as macro names as well.  For a list of supported
names in HTML export, see the constant `org-html-entities'.
Not all export backends support this.

This option can also be set with the +OPTIONS line, e.g. \"TeX:nil\"." nil [123176 123745]) ("org-export-with-LaTeX-fragments" variable nil nil nil "Non-nil means, convert LaTeX fragments to images when exporting to HTML.
When set, the exporter will find LaTeX environments if the \\begin line is
the first non-white thing on a line.  It will also find the math delimiters
like $a=b$ and \\( a=b \\) for inline math,  $$a=b$$ and \\[ a=b \\] for
display math.

This option can also be set with the +OPTIONS line, e.g. \"LaTeX:t\"." nil [123747 124257]) ("org-export-with-fixed-width" variable nil t nil "Non-nil means, lines starting with \":\" will be in fixed width font.
This can be used to have pre-formatted text, fragments of code etc.  For
example:
  : ;; Some Lisp examples
  : (while (defc cnt)
  :   (ding))
will be looking just like this in also HTML.  See also the QUOTE keyword.
Not all export backends support this.

This option can also be set with the +OPTIONS line, e.g. \"::nil\"." nil [124259 124749]) ("org-match-sexp-depth" variable nil 3 nil "Number of stacked braces for sub/superscript matching.
This has to be set before loading org.el to be effective." nil [124751 124952]) ("defgroup" code nil [124954 125080]) ("org-export-with-tables" variable nil t nil "If non-nil, lines starting with \"|\" define a table.
For example:

  | Name        | Address  | Birthday  |
  |-------------+----------+-----------|
  | Arthur Dent | England  | 29.2.2100 |

Not all export backends support this.

This option can also be set with the +OPTIONS line, e.g. \"|:nil\"." nil [125082 125466]) ("org-export-highlight-first-table-line" variable nil t nil "Non-nil means, highlight the first table line.
In HTML export, this means use <th> instead of <td>.
In tables created with table.el, this applies to the first table line.
In Org-mode tables, all lines before the first horizontal separator
line will be formatted with <th> tags." nil [125468 125846]) ("org-export-table-remove-special-lines" variable nil t nil "Remove special lines and marking characters in calculating tables.
This removes the special marking character column from tables that are set
up for spreadsheet calculations.  It also removes the entire lines
marked with `!', `_', or `^'.  The lines with `$' are kept, because
the values of constants may be useful to have." nil [125848 126272]) ("org-export-prefer-native-exporter-for-tables" variable nil nil nil "Non-nil means, always export tables created with table.el natively.
Natively means, use the HTML code generator in table.el.
When nil, Org-mode's own HTML generator is used when possible (i.e. if
the table does not use row- or column-spanning).  This has the
advantage, that the automatic HTML conversions for math symbols and
sub/superscripts can be applied.  Org-mode's HTML generator is also
much faster." nil [126274 126791]) ("defgroup" code nil [126793 126928]) ("org-export-ascii-underline" variable nil (quote (36 35 94 126 61 45)) nil "Characters for underlining headings in ASCII export.
In the given sequence, these characters will be used for level 1, 2, ..." nil [126930 127179]) ("org-export-ascii-bullets" variable nil (quote (42 43 45)) nil "Bullet characters for headlines converted to lists in ASCII export.
The first character is is used for the first lest level generated in this
way, and so on.  If there are more levels than characters given here,
the list will be repeated.
Note that plain lists will keep the same bullets as the have in the
Org-mode file." nil [127181 127610]) ("defgroup" code nil [127612 127741]) ("defgroup" code nil [127743 127875]) ("org-export-html-coding-system" variable nil nil nil "" nil [127877 127976]) ("org-export-html-extension" variable nil "html" nil "The extension for exported HTML files." nil [127978 128107]) ("org-export-html-style" variable nil "<style type=\"text/css\">
  html {
        font-family: Times, serif;
        font-size: 12pt;
  }
  .title { text-align: center; }
  .todo  { color: red; }
  .done { color: green; }
  .timestamp { color: grey }
  .timestamp-kwd { color: CadetBlue }
  .tag { background-color:lightblue; font-weight:normal }
  .target { background-color: lavender; }
  pre {
        border: 1pt solid #AEBDCC;
        background-color: #F3F5F7;
        padding: 5pt;
        font-family: courier, monospace;
  }
  table { border-collapse: collapse; }
  td, th {
        vertical-align: top;
        <!--border: 1pt solid #ADB9CC;-->
  }
</style>" nil "The default style specification for exported HTML files.
Since there are different ways of setting style information, this variable
needs to contain the full HTML structure to provide a style, including the
surrounding HTML tags.  The style specifications should include definitions
for new classes todo, done, title, and deadline.  For example, legal values
would be:

   <style type=\"text/css\">
       p { font-weight: normal; color: gray; }
       h1 { color: black; }
      .title { text-align: center; }
      .todo, .deadline { color: red; }
      .done { color: green; }
   </style>

or, if you want to keep the style in a file,

   <link rel=\"stylesheet\" type=\"text/css\" href=\"mystyles.css\">

As the value of this option simply gets inserted into the HTML <head> header,
you can \"misuse\" it to add arbitrary text to the header." nil [128109 129665]) ("org-export-html-title-format" variable nil "<h1 class=\"title\">%s</h1>
" nil "Format for typesetting the document title in HTML export." nil [129668 129844]) ("org-export-html-toplevel-hlevel" variable nil 2 nil "The <H> level for level 1 headings in HTML export." nil [129846 129988]) ("org-export-html-link-org-files-as-html" variable nil t nil "Non-nil means, make file links to `file.org' point to `file.html'.
When org-mode is exporting an org-mode file to HTML, links to
non-html files are directly put into a href tag in HTML.
However, links to other Org-mode files (recognized by the
extension `.org.) should become links to the corresponding html
file, assuming that the linked org-mode file will also be
converted to HTML.
When nil, the links still point to the plain `.org' file." nil [129990 130532]) ("org-export-html-inline-images" variable nil (quote maybe) nil "Non-nil means, inline images into exported HTML pages.
This is done using an <img> tag.  When nil, an anchor with href is used to
link to the image.  If this option is `maybe', then images in links with
an empty description will be inlined, while images with a description will
be linked only." nil [130534 131057]) ("org-export-html-expand" variable nil t nil "Non-nil means, for HTML export, treat @<...> as HTML tag.
When nil, these tags will be exported as plain text and therefore
not be interpreted by a browser.

This option can also be set with the +OPTIONS line, e.g. \"@:nil\"." nil [131076 131385]) ("org-export-html-table-tag" variable nil "<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">" nil "The HTML tag that is used to start a table.
This must be a <table> tag, but you may change the options like
borders and spacing." nil [131387 131694]) ("org-export-table-header-tags" variable nil (quote ("<th>" . "</th>")) nil "The opening tag for table header fields.
This is customizable so that alignment options can be specified." nil [131696 131966]) ("org-export-table-data-tags" variable nil (quote ("<td>" . "</td>")) nil "The opening tag for table data fields.
This is customizable so that alignment options can be specified." nil [131968 132234]) ("org-export-html-with-timestamp" variable nil nil nil "If non-nil, write `org-export-html-html-helper-timestamp'
into the exported HTML text.  Otherwise, the buffer will just be saved
to a file." nil [132236 132469]) ("org-export-html-html-helper-timestamp" variable nil "<br/><br/><hr><p><!-- hhmts start --> <!-- hhmts end --></p>
" nil "The HTML tag used as timestamp delimiter for HTML-helper-mode." nil [132471 132696]) ("defgroup" code nil [132698 132845]) ("org-combined-agenda-icalendar-file" variable nil "~/org.ics" nil "The file name for the iCalendar file covering all agenda files.
This file is created with the command \\[org-export-icalendar-all-agenda-files].
The file name should be absolute, the file will be overwritten without warning." nil [132847 133179]) ("org-icalendar-include-todo" variable nil nil nil "Non-nil means, export to iCalendar files should also cover TODO items." nil [133181 133452]) ("org-icalendar-include-sexps" variable nil t nil "Non-nil means, export to iCalendar files should also cover sexp entries.
These are entries like in the diary, but directly in an Org-mode file." nil [133454 133691]) ("org-icalendar-include-body" variable nil 100 nil "Amount of text below headline to be included in iCalendar export.
This is a number of characters that should maximally be included.
Properties, scheduling and clocking lines will always be removed.
The text will be inserted into the DESCRIPTION field." nil [133693 134157]) ("org-icalendar-combined-name" variable nil "OrgMode" nil "Calendar name for the combined iCalendar representing all agenda files." nil [134159 134331]) ("defgroup" code nil [134333 134451]) ("org-level-color-stars-only" variable nil nil nil "Non-nil means fontify only the stars in each headline.
When nil, the entire headline is fontified.
Changing it requires restart of `font-lock-mode' to become effective
also in regions already fontified." nil [134453 134743]) ("org-hide-leading-stars" variable nil nil nil "Non-nil means, hide the first N-1 stars in a headline.
This works by using the face `org-hide' for these stars.  This
face is white for a light background, and black for a dark
background.  You may have to customize the face `org-hide' to
make this work.
Changing it requires restart of `font-lock-mode' to become effective
also in regions already fontified.
You may also set this on a per-file basis by adding one of the following
lines to the buffer:

   #+STARTUP: hidestars
   #+STARTUP: showstars" nil [134745 135330]) ("org-fontify-done-headline" variable nil nil nil "Non-nil means, change the face of a headline if it is marked DONE.
Normally, only the TODO/DONE keyword indicates the state of a headline.
When this is non-nil, the headline after the keyword is set to the
`org-headline-done' as an additional indication." nil [135332 135673]) ("org-fontify-emphasized-text" variable nil t nil "Non-nil means fontify *bold*, /italic/ and _underlined_ text.
Changing this variable requires a restart of Emacs to take effect." nil [135675 135890]) ("org-emph-re" variable nil nil nil "Regular expression for matching emphasis." nil [135892 135962]) ("org-emphasis-regexp-components" variable nil nil nil nil nil [135963 136002]) ("org-emphasis-alist" variable nil nil nil nil nil [136024 136051]) ("org-set-emph-re" function nil ("var" "val") nil "Set variable and compute the emphasis regular expression." nil [136073 137583]) ("org-emphasis-regexp-components" variable nil (quote (" 	('\"" "- 	.,:?;'\")" " 	
,\"'" "." 1 nil)) nil "Components used to build the reqular expression for emphasis.
This is a list with 6 entries.  Terminology:  In an emphasis string
like \" *strong word* \", we call the initial space PREMATCH, the final
space POSTMATCH, the stars MARKERS, \"s\" and \"d\" are BORDER characters
and \"trong wor\" is the body.  The different components in this variable
specify what is allowed/forbidden in each part:

pre          Chars allowed as prematch.  Beginning of line will be allowed too.
post         Chars allowed as postmatch.  End of line will be allowed too.
border       The chars *forbidden* as border characters.
body-regexp  A regexp like \".\" to match a body character.  Don't use
             non-shy groups here, and don't allow newline here.
newline      The maximum number of newlines allowed in an emphasis exp.
stacked      Non-nil means, allow stacked styles.  This works only in HTML
             export.  When this is set, all marker characters (as given in
             `org-emphasis-alist') will be allowed as pre/post, aiding
             inside-out matching.
Use customize to modify this, or restart Emacs after changing it." nil [137585 139213]) ("org-emphasis-alist" variable nil (quote (("*" bold "<b>" "</b>") ("/" italic "<i>" "</i>") ("_" underline "<u>" "</u>") ("=" org-code "<code>" "</code>") ("+" (:strike-through t) "<del>" "</del>"))) nil "Special syntax for emphasized text.
Text starting and ending with a special character will be emphasized, for
example *bold*, _underlined_ and /italic/.  This variable sets the marker
characters, the face to be used by font-lock for highlighting in Org-mode
Emacs buffers, and the HTML tags to be used for this.
Use customize to modify this, or restart Emacs after changing it." nil [139215 140123]) ("defgroup" code nil [140140 140230]) ("org-compatible-face" function nil ("inherits" "specs") nil "Make a compatible face specification.
If INHERITS is an existing face and if the Emacs version supports it,
just inherit the face.  If not, use SPECS to define the face.
XEmacs and Emacs 21 do not know about the `min-colors' attribute.
For them we convert a (min-colors 8) entry to a `tty' entry and move it
to the top of the list.  The `min-colors' attribute will be removed from
any other entries, and any resulting duplicates will be removed entirely." nil [140232 141693]) ("org-hide" variable nil (quote ((((background light)) (:foreground "white")) (((background dark)) (:foreground "black")))) nil "Face used to hide leading stars in headlines.
The forground color of this face should be equal to the background
color of the frame." nil [141695 141968]) ("org-level-1" variable nil (org-compatible-face (quote outline-1) (quote ((((class color) (min-colors 88) (background light)) (:foreground "Blue1")) (((class color) (min-colors 88) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 16) (background light)) (:foreground "Blue")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 8)) (:foreground "blue" :bold t)) (t (:bold t))))) nil "Face used for level 1 headlines." nil [141970 142536]) ("org-level-2" variable nil (org-compatible-face (quote outline-2) (quote ((((class color) (min-colors 16) (background light)) (:foreground "DarkGoldenrod")) (((class color) (min-colors 16) (background dark)) (:foreground "LightGoldenrod")) (((class color) (min-colors 8) (background light)) (:foreground "yellow")) (((class color) (min-colors 8) (background dark)) (:foreground "yellow" :bold t)) (t (:bold t))))) nil "Face used for level 2 headlines." nil [142538 143053]) ("org-level-3" variable nil (org-compatible-face (quote outline-3) (quote ((((class color) (min-colors 88) (background light)) (:foreground "Purple")) (((class color) (min-colors 88) (background dark)) (:foreground "Cyan1")) (((class color) (min-colors 16) (background light)) (:foreground "Purple")) (((class color) (min-colors 16) (background dark)) (:foreground "Cyan")) (((class color) (min-colors 8) (background light)) (:foreground "purple" :bold t)) (((class color) (min-colors 8) (background dark)) (:foreground "cyan" :bold t)) (t (:bold t))))) nil "Face used for level 3 headlines." nil [143055 143714]) ("org-level-4" variable nil (org-compatible-face (quote outline-4) (quote ((((class color) (min-colors 88) (background light)) (:foreground "Firebrick")) (((class color) (min-colors 88) (background dark)) (:foreground "chocolate1")) (((class color) (min-colors 16) (background light)) (:foreground "red")) (((class color) (min-colors 16) (background dark)) (:foreground "red1")) (((class color) (min-colors 8) (background light)) (:foreground "red" :bold t)) (((class color) (min-colors 8) (background dark)) (:foreground "red" :bold t)) (t (:bold t))))) nil "Face used for level 4 headlines." nil [143716 144378]) ("org-level-5" variable nil (org-compatible-face (quote outline-5) (quote ((((class color) (min-colors 16) (background light)) (:foreground "ForestGreen")) (((class color) (min-colors 16) (background dark)) (:foreground "PaleGreen")) (((class color) (min-colors 8)) (:foreground "green"))))) nil "Face used for level 5 headlines." nil [144380 144749]) ("org-level-6" variable nil (org-compatible-face (quote outline-6) (quote ((((class color) (min-colors 16) (background light)) (:foreground "CadetBlue")) (((class color) (min-colors 16) (background dark)) (:foreground "Aquamarine")) (((class color) (min-colors 8)) (:foreground "magenta"))))) nil "Face used for level 6 headlines." nil [144751 145125]) ("org-level-7" variable nil (org-compatible-face (quote outline-7) (quote ((((class color) (min-colors 16) (background light)) (:foreground "Orchid")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSteelBlue")) (((class color) (min-colors 8)) (:foreground "blue"))))) nil "Face used for level 7 headlines." nil [145127 145498]) ("org-level-8" variable nil (org-compatible-face (quote outline-8) (quote ((((class color) (min-colors 16) (background light)) (:foreground "RosyBrown")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon")) (((class color) (min-colors 8)) (:foreground "green"))))) nil "Face used for level 8 headlines." nil [145500 145871]) ("org-special-keyword" variable nil (org-compatible-face nil (quote ((((class color) (min-colors 16) (background light)) (:foreground "RosyBrown")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon")) (t (:italic t))))) nil "Face used for special keywords." nil [145873 146205]) ("org-drawer" variable nil (org-compatible-face nil (quote ((((class color) (min-colors 88) (background light)) (:foreground "Blue1")) (((class color) (min-colors 88) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 16) (background light)) (:foreground "Blue")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 8)) (:foreground "blue" :bold t)) (t (:bold t))))) nil "Face used for drawers." nil [146207 146755]) ("org-property-value" variable nil nil nil "Face used for the value of a property." nil [146757 146852]) ("org-column" variable nil (org-compatible-face nil (quote ((((class color) (min-colors 16) (background light)) (:background "grey90")) (((class color) (min-colors 16) (background dark)) (:background "grey30")) (((class color) (min-colors 8)) (:background "cyan" :foreground "black")) (t (:inverse-video t))))) nil "Face for column display of entry properties." nil [146854 147261]) ("when" code nil [147263 147542]) ("org-warning" variable nil (org-compatible-face (quote font-lock-warning-face) (quote ((((class color) (min-colors 16) (background light)) (:foreground "Red1" :bold t)) (((class color) (min-colors 16) (background dark)) (:foreground "Pink" :bold t)) (((class color) (min-colors 8) (background light)) (:foreground "red" :bold t)) (((class color) (min-colors 8) (background dark)) (:foreground "red" :bold t)) (t (:bold t))))) nil "Face for deadlines and TODO keywords." nil [147544 148046]) ("org-archived" variable nil (org-compatible-face (quote shadow) (quote ((((class color grayscale) (min-colors 88) (background light)) (:foreground "grey50")) (((class color grayscale) (min-colors 88) (background dark)) (:foreground "grey70")) (((class color) (min-colors 8) (background light)) (:foreground "green")) (((class color) (min-colors 8) (background dark)) (:foreground "yellow"))))) nil "Face for headline with the ARCHIVE tag." nil [148048 148558]) ("org-link" variable nil (quote ((((class color) (background light)) (:foreground "Purple" :underline t)) (((class color) (background dark)) (:foreground "Cyan" :underline t)) (t (:underline t)))) nil "Face for links." nil [148560 148793]) ("org-ellipsis" variable nil (quote ((((class color) (background light)) (:foreground "DarkGoldenrod" :strike-through t)) (((class color) (background dark)) (:foreground "LightGoldenrod" :strike-through t)) (t (:strike-through t)))) nil "Face for the ellipsis in folded text." nil [148795 149086]) ("org-target" variable nil (quote ((((class color) (background light)) (:underline t)) (((class color) (background dark)) (:underline t)) (t (:underline t)))) nil "Face for links." nil [149088 149283]) ("org-date" variable nil (quote ((((class color) (background light)) (:foreground "Purple" :underline t)) (((class color) (background dark)) (:foreground "Cyan" :underline t)) (t (:underline t)))) nil "Face for links." nil [149285 149518]) ("org-sexp-date" variable nil (quote ((((class color) (background light)) (:foreground "Purple")) (((class color) (background dark)) (:foreground "Cyan")) (t (:underline t)))) nil "Face for links." nil [149520 149732]) ("org-tag" variable nil (quote ((t (:bold t)))) nil "Face for tags." nil [149734 149809]) ("org-todo" variable nil (org-compatible-face nil (quote ((((class color) (min-colors 16) (background light)) (:foreground "Red1" :bold t)) (((class color) (min-colors 16) (background dark)) (:foreground "Pink" :bold t)) (((class color) (min-colors 8) (background light)) (:foreground "red" :bold t)) (((class color) (min-colors 8) (background dark)) (:foreground "red" :bold t)) (t (:inverse-video t :bold t))))) nil "Face for TODO keywords." nil [149811 150318]) ("org-done" variable nil (org-compatible-face nil (quote ((((class color) (min-colors 16) (background light)) (:foreground "ForestGreen" :bold t)) (((class color) (min-colors 16) (background dark)) (:foreground "PaleGreen" :bold t)) (((class color) (min-colors 8)) (:foreground "green")) (t (:bold t))))) nil "Face used for todo keywords that indicate DONE items." nil [150320 150735]) ("org-headline-done" variable nil (org-compatible-face nil (quote ((((class color) (min-colors 16) (background light)) (:foreground "RosyBrown")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon")) (((class color) (min-colors 8) (background light)) (:bold nil))))) nil "Face used to indicate that a headline is DONE.
This face is only used if `org-fontify-done-headline' is set.  If applies
to the part of the headline after the DONE keyword." nil [150737 151257]) ("org-todo-keyword-faces" variable nil nil nil "Faces for specific TODO keywords.
This is a list of cons cells, with TODO keywords in the car
and faces in the cdr.  The face can be a symbol, or a property
list of attributes, like (:foreground \"blue\" :weight bold :underline t)." nil [151259 151672]) ("org-table" variable nil (org-compatible-face nil (quote ((((class color) (min-colors 88) (background light)) (:foreground "Blue1")) (((class color) (min-colors 88) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 16) (background light)) (:foreground "Blue")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 8) (background light)) (:foreground "blue")) (((class color) (min-colors 8) (background dark)))))) nil "Face used for tables." nil [151674 152270]) ("org-formula" variable nil (org-compatible-face nil (quote ((((class color) (min-colors 88) (background light)) (:foreground "Firebrick")) (((class color) (min-colors 88) (background dark)) (:foreground "chocolate1")) (((class color) (min-colors 8) (background light)) (:foreground "red")) (((class color) (min-colors 8) (background dark)) (:foreground "red")) (t (:bold t :italic t))))) nil "Face for formulas." nil [152272 152720]) ("org-code" variable nil (org-compatible-face nil (quote ((((class color grayscale) (min-colors 88) (background light)) (:foreground "grey50")) (((class color grayscale) (min-colors 88) (background dark)) (:foreground "grey70")) (((class color) (min-colors 8) (background light)) (:foreground "green")) (((class color) (min-colors 8) (background dark)) (:foreground "yellow"))))) nil "Face for fixed-with text like code snippets." nil [152722 153225]) ("org-agenda-structure" variable nil (org-compatible-face nil (quote ((((class color) (min-colors 88) (background light)) (:foreground "Blue1")) (((class color) (min-colors 88) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 16) (background light)) (:foreground "Blue")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 8)) (:foreground "blue" :bold t)) (t (:bold t))))) nil "Face used in agenda for captions and dates." nil [153227 153806]) ("org-scheduled-today" variable nil (org-compatible-face nil (quote ((((class color) (min-colors 88) (background light)) (:foreground "DarkGreen")) (((class color) (min-colors 88) (background dark)) (:foreground "PaleGreen")) (((class color) (min-colors 8)) (:foreground "green")) (t (:bold t :italic t))))) nil "Face for items scheduled for a certain day." nil [153808 154193]) ("org-scheduled-previously" variable nil (org-compatible-face nil (quote ((((class color) (min-colors 88) (background light)) (:foreground "Firebrick")) (((class color) (min-colors 88) (background dark)) (:foreground "chocolate1")) (((class color) (min-colors 8) (background light)) (:foreground "red")) (((class color) (min-colors 8) (background dark)) (:foreground "red" :bold t)) (t (:bold t))))) nil "Face for items scheduled previously, and not yet done." nil [154195 154690]) ("org-upcoming-deadline" variable nil (org-compatible-face nil (quote ((((class color) (min-colors 88) (background light)) (:foreground "Firebrick")) (((class color) (min-colors 88) (background dark)) (:foreground "chocolate1")) (((class color) (min-colors 8) (background light)) (:foreground "red")) (((class color) (min-colors 8) (background dark)) (:foreground "red" :bold t)) (t (:bold t))))) nil "Face for items scheduled previously, and not yet done." nil [154692 155184]) ("org-agenda-deadline-faces" variable nil (quote ((1.0 . org-warning) (0.5 . org-upcoming-deadline) (0.0 . default))) nil "Faces for showing deadlines in the agenda.
This is a list of cons cells.  The cdr of each cess is a face to be used,
and it can also just be a like like '(:foreground \"yellow\").
Each car is a fraction of the head-warning time that must have passed for
this the face in the cdr to be used for display.  The numbers must be
given in descending order.  The head-warning time is normally taken
from `org-deadline-warning-days', but can also be specified in the deadline
timestamp itself, like this:

   DEADLINE: <2007-08-13 Mon -8d>

You may use d for days, w for weeks, m for months and y for years.  Months
and years will only be treated in an approximate fashion (30.4 days for a
month and 365.24 days for a year)." nil [155186 156206]) ("org-time-grid" variable nil (org-compatible-face nil (quote ((((class color) (min-colors 16) (background light)) (:foreground "DarkGoldenrod")) (((class color) (min-colors 16) (background dark)) (:foreground "LightGoldenrod")) (((class color) (min-colors 8)) (:foreground "yellow" :weight light))))) nil "Face used for time grids." nil [156208 156596]) ("org-level-faces" variable nil (quote (org-level-1 org-level-2 org-level-3 org-level-4 org-level-5 org-level-6 org-level-7 org-level-8)) ((const . t)) nil nil [156598 156734]) ("org-n-level-faces" variable nil (length org-level-faces) nil "The number different faces to be used for headlines.
Org-mode defines 8 different headline faces, so this can be at most 8.
If it is less than 8, the level-1 face gets re-used for level N+1 etc." nil [156736 157025]) ("org-drawer-regexp" variable nil nil nil "Matches first line of a hidden block." nil [157097 157169]) ("make-variable-buffer-local" code nil [157170 157217]) ("org-todo-regexp" variable nil nil nil "Matches any of the TODO state keywords." nil [157218 157290]) ("make-variable-buffer-local" code nil [157291 157336]) ("org-not-done-regexp" variable nil nil nil "Matches any of the TODO state keywords except the last one." nil [157337 157433]) ("make-variable-buffer-local" code nil [157434 157483]) ("org-todo-line-regexp" variable nil nil nil "Matches a headline and puts TODO state into group 2 if present." nil [157484 157585]) ("make-variable-buffer-local" code nil [157586 157636]) ("org-complex-heading-regexp" variable nil nil nil "Matches a headline and puts everything into groups:
group 1: the stars
group 2: The todo keyword, maybe
group 3: Priority cookie
group 4: True headline
group 5: Tags" nil [157637 157846]) ("make-variable-buffer-local" code nil [157847 157903]) ("org-todo-line-tags-regexp" variable nil nil nil "Matches a headline and puts TODO state into group 2 if present.
Also put tags into group 4 if tags are present." nil [157904 158058]) ("make-variable-buffer-local" code nil [158059 158114]) ("org-nl-done-regexp" variable nil nil nil "Matches newline followed by a headline with the DONE keyword." nil [158115 158212]) ("make-variable-buffer-local" code nil [158213 158261]) ("org-looking-at-done-regexp" variable nil nil nil "Matches the DONE keyword a point." nil [158262 158339]) ("make-variable-buffer-local" code nil [158340 158396]) ("org-ds-keyword-length" variable nil 12 nil "Maximum length of the Deadline and SCHEDULED keywords." nil [158397 158489]) ("make-variable-buffer-local" code nil [158490 158541]) ("org-deadline-regexp" variable nil nil nil "Matches the DEADLINE keyword." nil [158542 158608]) ("make-variable-buffer-local" code nil [158609 158658]) ("org-deadline-time-regexp" variable nil nil nil "Matches the DEADLINE keyword together with a time stamp." nil [158659 158757]) ("make-variable-buffer-local" code nil [158758 158812]) ("org-deadline-line-regexp" variable nil nil nil "Matches the DEADLINE keyword and the rest of the line." nil [158813 158909]) ("make-variable-buffer-local" code nil [158910 158964]) ("org-scheduled-regexp" variable nil nil nil "Matches the SCHEDULED keyword." nil [158965 159033]) ("make-variable-buffer-local" code nil [159034 159084]) ("org-scheduled-time-regexp" variable nil nil nil "Matches the SCHEDULED keyword together with a time stamp." nil [159085 159185]) ("make-variable-buffer-local" code nil [159186 159241]) ("org-closed-time-regexp" variable nil nil nil "Matches the CLOSED keyword together with a time stamp." nil [159242 159336]) ("make-variable-buffer-local" code nil [159337 159389]) ("org-keyword-time-regexp" variable nil nil nil "Matches any of the 4 keywords, together with the time stamp." nil [159391 159492]) ("make-variable-buffer-local" code nil [159493 159546]) ("org-keyword-time-not-clock-regexp" variable nil nil nil "Matches any of the 3 keywords, together with the time stamp." nil [159547 159658]) ("make-variable-buffer-local" code nil [159659 159722]) ("org-maybe-keyword-time-regexp" variable nil nil nil "Matches a timestamp, possibly preceeded by a keyword." nil [159723 159823]) ("make-variable-buffer-local" code nil [159824 159883]) ("org-planning-or-clock-line-re" variable nil nil nil "Matches a line with planning or clock info." nil [159884 159974]) ("make-variable-buffer-local" code nil [159975 160034]) ("org-rm-props" variable nil (quote (invisible t face t keymap t intangible t mouse-face t rear-nonsticky t mouse-map t fontified t)) ((const . t)) "Properties to remove when a string without properties is wanted." nil [160036 160261]) ("org-match-string-no-properties" function nil ("num" "&optional" "string") nil (if (featurep (quote xemacs)) (let ((s (match-string num string))) (remove-text-properties 0 (length s) org-rm-props s) s) (match-string-no-properties num string)) nil [160263 160512]) ("org-no-properties" function nil ("s") nil (if (fboundp (quote set-text-properties)) (set-text-properties 0 (length s) nil s) (remove-text-properties 0 (length s) org-rm-props s)) nil [160514 160692]) ("org-get-alist-option" function nil ("option" "key") nil (cond ((eq key t) t) ((eq option t) t) ((assoc key option) (cdr (assoc key option))) (t (cdr (assq (quote default) option)))) nil [160694 160883]) ("org-inhibit-invisibility" function nil nil nil "Modified `buffer-invisibility-spec' for Emacs 21.
Some ops with invisible text do not work correctly on Emacs 21.  For these
we turn off invisibility temporarily.  Use this in a `let' form." nil [160885 161180]) ("org-set-local" function nil ("var" "value") nil "Make VAR local in current buffer and set it to VALUE." nil [161182 161323]) ("org-mode-p" function nil nil nil "Check if the current buffer is in Org-mode." nil [161325 161425]) ("org-last" function nil ("list") nil "Return the last element of LIST." nil [161427 161510]) ("org-let" function nil ("list" "&rest" "body") nil (eval (cons (quote let) (cons list body))) nil [161512 161583]) ("put" code nil [161584 161622]) ("org-let2" function nil ("list1" "list2" "&rest" "body") nil (eval (cons (quote let) (cons list1 (list (cons (quote let) (cons list2 body)))))) nil [161624 161736]) ("put" code nil [161737 161776]) ("org-startup-options" variable nil (quote (("fold" org-startup-folded t) ("overview" org-startup-folded t) ("nofold" org-startup-folded nil) ("showall" org-startup-folded nil) ("content" org-startup-folded content) ("hidestars" org-hide-leading-stars t) ("showstars" org-hide-leading-stars nil) ("odd" org-odd-levels-only t) ("oddeven" org-odd-levels-only nil) ("align" org-startup-align-all-tables t) ("noalign" org-startup-align-all-tables nil) ("customtime" org-display-custom-times t) ("logging" org-log-done t) ("logdone" org-log-done t) ("nologging" org-log-done nil) ("lognotedone" org-log-done done push) ("lognotestate" org-log-done state push) ("lognoteclock-out" org-log-done clock-out push) ("logrepeat" org-log-repeat t) ("nologrepeat" org-log-repeat nil) ("constcgs" constants-unit-system cgs) ("constSI" constants-unit-system SI))) ((const . t)) "Variable associated with STARTUP options for org-mode.
Each element is a list of three items: The startup options as written
in the #+STARTUP line, the corresponding variable, and the value to
set this variable to if the option is found.  An optional forth element PUSH
means to push this value onto the list in the variable." nil [161777 163028]) ("org-set-regexps-and-options" function nil nil nil "Precompute regular expressions for current buffer." nil [163030 174052]) ("org-remove-keyword-keys" function nil ("list") nil (mapcar (lambda (x) (if (string-match "(..?)$" x) (substring x 0 (match-beginning 0)) x)) list) nil [174054 174242]) ("org-window-configuration" variable nil nil nil "Used in various places to store a window configuration." nil [174288 174385]) ("org-finish-function" variable nil nil nil "Function to be called when `C-c C-c' is used.
This is for getting out of special buffers like remember." nil [174386 174526]) ("outline-mode-menu-heading" variable nil nil nil nil nil [174590 174624]) ("outline-mode-menu-show" variable nil nil nil nil nil [174625 174656]) ("outline-mode-menu-hide" variable nil nil nil nil nil [174657 174688]) ("zmacs-regions" variable nil nil nil nil nil [174689 174711]) ("mark-active" variable nil nil nil nil nil [174743 174763]) ("calc-embedded-close-formula" variable nil nil nil nil nil [174806 174842]) ("calc-embedded-open-formula" variable nil nil nil nil nil [174843 174878]) ("font-lock-unfontify-region-function" variable nil nil nil nil nil [174879 174923]) ("org-goto-start-pos" variable nil nil nil nil nil [174924 174951]) ("vm-message-pointer" variable nil nil nil nil nil [174952 174979]) ("vm-folder-directory" variable nil nil nil nil nil [174980 175008]) ("wl-summary-buffer-elmo-folder" variable nil nil nil nil nil [175009 175047]) ("wl-summary-buffer-folder-name" variable nil nil nil nil nil [175048 175086]) ("gnus-other-frame-object" variable nil nil nil nil nil [175087 175119]) ("gnus-group-name" variable nil nil nil nil nil [175120 175144]) ("gnus-article-current" variable nil nil nil nil nil [175145 175174]) ("w3m-current-url" variable nil nil nil nil nil [175175 175199]) ("w3m-current-title" variable nil nil nil nil nil [175200 175226]) ("mh-progs" variable nil nil nil nil nil [175227 175244]) ("mh-current-folder" variable nil nil nil nil nil [175245 175271]) ("mh-show-folder-buffer" variable nil nil nil nil nil [175272 175302]) ("mh-index-folder" variable nil nil nil nil nil [175303 175327]) ("mh-searcher" variable nil nil nil nil nil [175328 175348]) ("calendar-mode-map" variable nil nil nil nil nil [175349 175375]) ("Info-current-file" variable nil nil nil nil nil [175376 175402]) ("Info-current-node" variable nil nil nil nil nil [175403 175429]) ("texmathp-why" variable nil nil nil nil nil [175430 175451]) ("remember-save-after-remembering" variable nil nil nil nil nil [175452 175492]) ("remember-data-file" variable nil nil nil nil nil [175493 175520]) ("remember-register" variable nil nil nil nil nil [175521 175547]) ("remember-buffer" variable nil nil nil nil nil [175548 175572]) ("annotation" variable nil nil nil nil nil [175573 175592]) ("initial" variable nil nil nil nil nil [175651 175667]) ("org-latex-regexps" variable nil nil nil nil nil [175729 175755]) ("constants-unit-system" variable nil nil nil nil nil [175756 175786]) ("original-date" variable nil nil nil nil nil [175788 175810]) ("entry" variable nil nil nil nil nil [175997 176011]) ("state" variable nil nil nil nil nil [176012 176026]) ("last-state" variable nil nil nil nil nil [176027 176046]) ("date" variable nil nil nil nil nil [176047 176060]) ("description" variable nil nil nil nil nil [176061 176081]) ("orgtbl-mode-menu" variable nil nil nil nil nil [176147 176172]) ("org-agenda-buffer-name" variable nil nil nil nil nil [176216 176247]) ("org-agenda-undo-list" variable nil nil nil nil nil [176248 176277]) ("org-agenda-pending-undo-list" variable nil nil nil nil nil [176278 176315]) ("org-agenda-overriding-header" variable nil nil nil nil nil [176316 176353]) ("orgtbl-mode" variable nil nil nil nil nil [176354 176374]) ("org-html-entities" variable nil nil nil nil nil [176375 176401]) ("org-struct-menu" variable nil nil nil nil nil [176402 176426]) ("org-org-menu" variable nil nil nil nil nil [176427 176448]) ("org-tbl-menu" variable nil nil nil nil nil [176449 176470]) ("org-agenda-keymap" variable nil nil nil nil nil [176471 176497]) ("org-make-overlay" function nil ("beg" "end" "&optional" "buffer") nil (if (featurep (quote xemacs)) (make-extent beg end buffer) (make-overlay beg end buffer)) nil [176567 176713]) ("org-delete-overlay" function nil ("ovl") nil (if (featurep (quote xemacs)) (delete-extent ovl) (delete-overlay ovl)) nil [176714 176813]) ("org-detach-overlay" function nil ("ovl") nil (if (featurep (quote xemacs)) (detach-extent ovl) (delete-overlay ovl)) nil [176814 176913]) ("org-move-overlay" function nil ("ovl" "beg" "end" "&optional" "buffer") nil (if (featurep (quote xemacs)) (set-extent-endpoints ovl beg end (or buffer (current-buffer))) (move-overlay ovl beg end buffer)) nil [176914 177103]) ("org-overlay-put" function nil ("ovl" "prop" "value") nil (if (featurep (quote xemacs)) (set-extent-property ovl prop value) (overlay-put ovl prop value)) nil [177104 177246]) ("org-overlay-display" function nil ("ovl" "text" "&optional" "face" "evap") nil "Make overlay OVL display TEXT with face FACE." nil [177247 177681]) ("org-overlay-before-string" function nil ("ovl" "text" "&optional" "face" "evap") nil "Make overlay OVL display TEXT with face FACE." nil [177682 178090]) ("org-overlay-get" function nil ("ovl" "prop") nil (if (featurep (quote xemacs)) (extent-property ovl prop) (overlay-get ovl prop)) nil [178091 178211]) ("org-overlays-at" function nil ("pos") nil (if (featurep (quote xemacs)) (extents-at pos) (overlays-at pos)) nil [178212 178302]) ("org-overlays-in" function nil ("&optional" "start" "end") nil (if (featurep (quote xemacs)) (extent-list nil start end) (overlays-in start end)) nil [178303 178436]) ("org-overlay-start" function nil ("o") nil (if (featurep (quote xemacs)) (extent-start-position o) (overlay-start o)) nil [178437 178536]) ("org-overlay-end" function nil ("o") nil (if (featurep (quote xemacs)) (extent-end-position o) (overlay-end o)) nil [178537 178630]) ("org-find-overlays" function nil ("prop" "&optional" "pos" "delete") nil "Find all overlays specifying PROP at POS or point.
If DELETE is non-nil, delete all those overlays." nil [178631 179007]) ("org-add-hook" function nil ("hook" "function" "&optional" "append" "local") nil "Add-hook, compatible with both Emacsen." nil [179034 179261]) ("org-ignore-region" variable nil nil nil "To temporarily disable the active region." nil [179263 179339]) ("org-region-active-p" function nil nil nil "Is `transient-mark-mode' on and the region active?
Works on both Emacs and XEmacs." nil [179341 179611]) ("org-add-to-invisibility-spec" function nil ("arg") nil "Add elements to `buffer-invisibility-spec'.
See documentation for `buffer-invisibility-spec' for the kind of elements
that can be added." nil [179644 180126]) ("org-remove-from-invisibility-spec" function nil ("arg") nil "Remove elements from `buffer-invisibility-spec'." nil [180128 180452]) ("org-in-invisibility-spec-p" function nil ("arg") nil "Is ARG a member of `buffer-invisibility-spec'?" nil [180454 180637]) ("if" code nil [180665 180882]) ("org-table-may-need-update" variable nil t nil "Indicates that a table might need an update.
This variable is set by `org-before-change-function'.
`org-table-align' sets it back to nil." nil [180965 181143]) ("org-mode-map" variable nil nil nil nil nil [181144 181165]) ("org-mode-hook" variable nil nil nil nil nil [181166 181192]) ("org-inhibit-startup" variable nil nil nil nil nil [181193 181225]) ("org-agenda-keep-modes" variable nil nil nil nil nil [181261 181295]) ("org-table-buffer-is-an" variable nil nil nil nil nil [181329 181364]) ("org-outline-regexp" variable nil "\\*+ " ((const . t)) nil nil [181365 181402]) ("define-derived-mode" code nil [181419 185988]) ("put" code nil [185990 186056]) ("org-call-with-arg" function nil ("command" "arg") nil "Call COMMAND interactively, but pretend prefix are was ARG." nil [186058 186228]) ("org-current-line" function nil ("&optional" "pos") nil (save-excursion (and pos (goto-char pos)) (+ (if (bolp) 1 0) (count-lines 1 (point)))) nil [186230 186445]) ("org-current-time" function nil nil nil "Current time, possibly rounded to `org-time-stamp-rounding-minutes'." nil [186447 186843]) ("org-add-props" function nil ("string" "plist" "&rest" "props") nil "Add text properties to entire string, from beginning to end.
PLIST may be a list of properties, PROPS are individual properties and values
that will be added to PLIST.  Returns the string that was modified." nil [186845 187203]) ("put" code nil [187204 187248]) ("org-mouse-map" variable nil (make-sparse-keymap) nil nil nil [187299 187342]) ("org-defkey" code nil [187343 187434]) ("org-defkey" code nil [187435 187531]) ("when" code nil [187532 187618]) ("when" code nil [187619 187757]) ("when" code nil [187758 187902]) ("font-lock" include nil nil nil [187904 187924]) ("org-non-link-chars" variable nil "]	
<>" ((const . t)) nil nil [187926 187967]) ("org-link-types" variable nil (quote ("http" "https" "ftp" "mailto" "file" "news" "bbdb" "vm" "wl" "mhe" "rmail" "gnus" "shell" "info" "elisp")) nil nil nil [187968 188126]) ("org-link-re-with-space" variable nil nil nil "Matches a link with spaces, optional angular brackets around it." nil [188127 188232]) ("org-link-re-with-space2" variable nil nil nil "Matches a link with spaces, optional angular brackets around it." nil [188233 188339]) ("org-angle-link-re" variable nil nil nil "Matches link with angular brackets, spaces are allowed." nil [188340 188431]) ("org-plain-link-re" variable nil nil nil "Matches plain link, without spaces." nil [188432 188503]) ("org-bracket-link-regexp" variable nil nil nil "Matches a link in double brackets." nil [188504 188579]) ("org-bracket-link-analytic-regexp" variable nil nil nil "Regular expression used to analyze links.
Here is what the match groups contain after a match:
1: http:
2: http
3: path
4: [desc]
5: desc" nil [188580 188767]) ("org-any-link-re" variable nil nil nil "Regular expression matching any link." nil [188768 188838]) ("org-make-link-regexps" function nil nil nil "Update the link regular expressions.
This should be called after the variable `org-link-types' has changed." nil [188840 190297]) ("org-make-link-regexps" code nil [190299 190322]) ("org-ts-regexp" variable nil "<\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} [^
>]*?\\)>" ((const . t)) "Regular expression for fast time stamp matching." nil [190324 190461]) ("org-ts-regexp-both" variable nil "[[<]\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} [^
>]*?\\)[]>]" ((const . t)) "Regular expression for fast time stamp matching." nil [190462 190610]) ("org-ts-regexp0" variable nil "\\(\\([0-9]\\{4\\}\\)-\\([0-9]\\{2\\}\\)-\\([0-9]\\{2\\}\\)\\([^]0-9>
]*\\)\\(\\([0-9]\\{2\\}\\):\\([0-9]\\{2\\}\\)\\)?\\)" ((const . t)) "Regular expression matching time strings for analysis.
This one does not require the space after the date." nil [190611 190875]) ("org-ts-regexp1" variable nil "\\(\\([0-9]\\{4\\}\\)-\\([0-9]\\{2\\}\\)-\\([0-9]\\{2\\}\\) \\([^]0-9>
]*\\)\\(\\([0-9]\\{2\\}\\):\\([0-9]\\{2\\}\\)\\)?\\)" ((const . t)) "Regular expression matching time strings for analysis." nil [190876 191089]) ("org-ts-regexp2" variable nil (concat "<" org-ts-regexp1 "[^>
]\\{0,16\\}>") ((const . t)) "Regular expression matching time stamps, with groups." nil [191090 191221]) ("org-ts-regexp3" variable nil (concat "[[<]" org-ts-regexp1 "[^]>
]\\{0,16\\}[]>]") ((const . t)) "Regular expression matching time stamps (also [..]), with groups." nil [191222 191372]) ("org-tr-regexp" variable nil (concat org-ts-regexp "--?-?" org-ts-regexp) ((const . t)) "Regular expression matching a time stamp range." nil [191373 191494]) ("org-tr-regexp-both" variable nil (concat org-ts-regexp-both "--?-?" org-ts-regexp-both) ((const . t)) "Regular expression matching a time stamp range." nil [191495 191633]) ("org-tsr-regexp" variable nil (concat org-ts-regexp "\\(--?-?" org-ts-regexp "\\)?") ((const . t)) "Regular expression matching a time stamp or time stamp range." nil [191634 191813]) ("org-tsr-regexp-both" variable nil (concat org-ts-regexp-both "\\(--?-?" org-ts-regexp-both "\\)?") ((const . t)) "Regular expression matching a time stamp or time stamp range.
The time stamps may be either active or inactive." nil [191814 192063]) ("org-emph-face" variable nil nil nil nil nil [192065 192091]) ("org-do-emphasis-faces" function nil ("limit") nil "Run through the buffer and add overlays to links." nil [192093 192865]) ("org-emphasize" function nil ("&optional" "char") ((user-visible . t)) "Insert or change an emphasis, i.e. a font like bold or italic.
If there is an active region, change that region to a new emphasis.
If there is no region, just insert the marker characters and position
the cursor between them.
CHAR should be either the marker character, or the first character of the
HTML tag associated with that emphasis.  If CHAR is a space, the means
to remove the emphasis of the selected region.
If char is not given (for example in an interactive call) it
will be prompted for." nil [192867 195089]) ("org-nonsticky-props" variable nil (quote (mouse-face highlight keymap invisible intangible help-echo org-linked-text)) ((const . t)) nil nil [195091 195201]) ("org-activate-plain-links" function nil ("limit") nil "Run through the buffer and add overlays to links." nil [195204 195874]) ("org-activate-code" function nil ("limit") nil (if (re-search-forward "^[ 	]*\\(:.*\\)" limit t) (unless (get-text-property (match-beginning 1) (quote face)) (remove-text-properties (match-beginning 0) (match-end 0) (quote (display t invisible t intangible t))) t)) nil [195876 196171]) ("org-activate-angle-links" function nil ("limit") nil "Run through the buffer and add overlays to links." nil [196173 196631]) ("org-maybe-intangible" function nil ("props") nil "Add '(intangigble t) to PROPS if Emacs version is earlier than Emacs 22.
In emacs 21, invisible text is not avoided by the command loop, so the
intangible property is needed to make sure point skips this text.
In Emacs 22, this is not necessary.  The intangible text property has
led to problems with flyspell.  These problems are fixed in flyspell.el,
but we still avoid setting the property in Emacs 22 and later.
We use a macro so that the test can happen at compilation time." nil [196633 197239]) ("org-activate-bracket-links" function nil ("limit") nil "Run through the buffer and add overlays to bracketed links." nil [197241 198811]) ("org-activate-dates" function nil ("limit") nil "Run through the buffer and add overlays to dates." nil [198813 199444]) ("org-target-link-regexp" variable nil nil nil "Regular expression matching radio targets in plain text." nil [199446 199542]) ("org-target-regexp" variable nil "<<\\([^<>
]+\\)>>" nil "Regular expression matching a link target." nil [199543 199639]) ("org-radio-target-regexp" variable nil "<<<\\([^<>
]+\\)>>>" nil "Regular expression matching a radio target." nil [199640 199745]) ("org-any-target-regexp" variable nil "<<<?\\([^<>
]+\\)>>>?" nil "Regular expression matching any target." nil [199746 199908]) ("org-activate-target-links" function nil ("limit") nil "Run through the buffer and add overlays to target matches." nil [199910 200568]) ("org-update-radio-target-regexp" function nil nil ((user-visible . t)) "Find all radio targets in this file and update the regular expression." nil [200570 200871]) ("org-hide-wide-columns" function nil ("limit") nil (let (s e) (setq s (text-property-any (point) (or limit (point-max)) (quote org-cwidth) t)) (when s (setq e (next-single-property-change s (quote org-cwidth))) (add-text-properties s e (org-maybe-intangible (quote (invisible org-cwidth)))) (goto-char e) t)) nil [200873 201212]) ("org-restart-font-lock" function nil nil nil "Restart font-lock-mode, to force refontification." nil [201214 201402]) ("org-all-targets" function nil ("&optional" "radio") nil "Return a list of all targets in this file.
With optional argument RADIO, only find radio targets." nil [201404 201804]) ("org-make-target-link-regexp" function nil ("targets") nil "Make regular expression matching all strings in TARGETS.
The regular expression finds the targets also if there is a line break
between words." nil [201806 202244]) ("org-activate-tags" function nil ("limit") nil (if (re-search-forward (org-re "^\\*+.*[ 	]\\(:[[:alnum:]_@:]+:\\)[ 
]") limit t) (progn (add-text-properties (match-beginning 1) (match-end 1) (list (quote mouse-face) (quote highlight) (quote rear-nonsticky) org-nonsticky-props (quote keymap) org-mouse-map)) t)) nil [202246 202643]) ("org-outline-level" function nil nil nil (save-excursion (looking-at outline-regexp) (if (match-beginning 1) (+ (org-get-string-indentation (match-string 1)) 1000) (1- (- (match-end 0) (match-beginning 0))))) nil [202645 202865]) ("org-font-lock-keywords" variable nil nil nil nil nil [202867 202902]) ("org-property-re" variable nil (org-re "^[ 	]*\\(:\\([[:alnum:]_]+\\):\\)[ 	]*\\(\\S-.*\\)") ((const . t)) "Regular expression matching a property line." nil [202904 203043]) ("org-set-font-lock-defaults" function nil nil nil (let* ((em org-fontify-emphasized-text) (lk org-activate-links) (org-font-lock-extra-keywords (list (quote ("^\\(\\**\\)\\(\\* \\)\\(.*\\)" (1 (org-get-level-face 1)) (2 (org-get-level-face 2)) (3 (org-get-level-face 3)))) (quote ("^[ 	]*\\(\\(|\\|\\+-[-+]\\).*\\S-\\)" (1 (quote org-table) t))) (quote ("| *\\(:?=[^|
]*\\)" (1 (quote org-formula) t))) (quote ("^[ 	]*| *\\([#*]\\) *|" (1 (quote org-formula) t))) (quote ("^[ 	]*|\\( *\\([$!_^/]\\) *|.*\\)|" (1 (quote org-formula) t))) (list org-drawer-regexp (quote (0 (quote org-special-keyword) t))) (list "^[ 	]*:END:" (quote (0 (quote org-special-keyword) t))) (list org-property-re (quote (1 (quote org-special-keyword) t)) (quote (3 (quote org-property-value) t))) (if org-format-transports-properties-p (quote ("| *\\(<[0-9]+>\\) *" (1 (quote org-formula) t)))) (if (memq (quote tag) lk) (quote (org-activate-tags (1 (quote org-tag) prepend)))) (if (memq (quote angle) lk) (quote (org-activate-angle-links (0 (quote org-link) t)))) (if (memq (quote plain) lk) (quote (org-activate-plain-links (0 (quote org-link) t)))) (if (memq (quote bracket) lk) (quote (org-activate-bracket-links (0 (quote org-link) t)))) (if (memq (quote radio) lk) (quote (org-activate-target-links (0 (quote org-link) t)))) (if (memq (quote date) lk) (quote (org-activate-dates (0 (quote org-date) t)))) (quote ("^&?%%(.*\\|<%%([^>
]*?>" (0 (quote org-sexp-date) t))) (quote (org-hide-wide-columns (0 nil append))) (list (concat "^\\*+[ 	]+" org-todo-regexp) (quote (1 (org-get-todo-face 1) t))) (if org-fontify-done-headline (list (concat "^[*]+ +\\<\\(" (mapconcat (quote regexp-quote) org-done-keywords "\\|") "\\)\\(.*\\)") (quote (2 (quote org-headline-done) t))) nil) (list (concat "\\[#[A-Z0-9]\\]") (quote (0 (quote org-special-keyword) t))) (list (concat "\\<" org-deadline-string) (quote (0 (quote org-special-keyword) t))) (list (concat "\\<" org-scheduled-string) (quote (0 (quote org-special-keyword) t))) (list (concat "\\<" org-closed-string) (quote (0 (quote org-special-keyword) t))) (list (concat "\\<" org-clock-string) (quote (0 (quote org-special-keyword) t))) (if em (if (featurep (quote xemacs)) (quote (org-do-emphasis-faces (0 nil append))) (quote (org-do-emphasis-faces)))) (quote ("^[ 	]*\\([-+*]\\|[0-9]+[.)]\\) +\\(\\[[- X]\\]\\)" 2 (quote bold) prepend)) (if org-provide-checkbox-statistics (quote ("\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]" (0 (org-get-checkbox-statistics-face) t)))) (list (concat "^\\*+[ 	]+\\<\\(" org-comment-string "\\|" org-quote-string "\\)\\>") (quote (1 (quote org-special-keyword) t))) (quote ("^#.*" (0 (quote font-lock-comment-face) t))) (quote ("^\\*+ \\(.*:ARCHIVE:.*\\)" (1 (quote org-archived) prepend))) (quote (org-activate-code (1 (quote org-code) t)))))) (setq org-font-lock-extra-keywords (delq nil org-font-lock-extra-keywords)) (org-set-local (quote org-font-lock-keywords) org-font-lock-extra-keywords) (org-set-local (quote font-lock-defaults) (quote (org-font-lock-keywords t nil nil backward-paragraph))) (kill-local-variable (quote font-lock-keywords)) nil) nil [203045 206801]) ("org-m" variable nil nil nil nil nil [206803 206821]) ("org-l" variable nil nil nil nil nil [206822 206840]) ("org-f" variable nil nil nil nil nil [206841 206859]) ("org-get-level-face" function nil ("n") nil "Get the right face for match N in font-lock matching of healdines." nil [206860 207279]) ("org-get-todo-face" function nil ("kwd") nil "Get the right face for a TODO keyword KWD.
If KWD is a number, get the corresponding match group." nil [207281 207582]) ("org-unfontify-region" function nil ("beg" "end" "&optional" "maybe_loudly") nil "Remove fontification and activation overlays from links." nil [207584 208124]) ("org-cycle-global-status" variable nil nil nil nil nil [208204 208240]) ("make-variable-buffer-local" code nil [208241 208294]) ("org-cycle-subtree-status" variable nil nil nil nil nil [208295 208332]) ("make-variable-buffer-local" code nil [208333 208387]) ("org-cycle" function nil ("&optional" "arg") ((user-visible . t)) "Visibility cycling for Org-mode.

- When this function is called with a prefix argument, rotate the entire
  buffer through 3 states (global cycling)
  1. OVERVIEW: Show only top-level headlines.
  2. CONTENTS: Show all headlines of all levels, but no body text.
  3. SHOW ALL: Show everything.

- When point is at the beginning of a headline, rotate the subtree started
  by this line through 3 different states (local cycling)
  1. FOLDED:   Only the main headline is shown.
  2. CHILDREN: The main headline and the direct children are shown.
               From this state, you can move to one of the children
               and zoom in further.
  3. SUBTREE:  Show the entire subtree, including body text.

- When there is a numeric prefix, go up to a heading with level ARG, do
  a `show-subtree' and return to the previous cursor position.  If ARG
  is negative, go up that many levels.

- When point is not at the beginning of a headline, execute
  `indent-relative', like TAB normally does.  See the option
  `org-cycle-emulate-tab' for details.

- Special case: if point is at the beginning of the buffer and there is
  no headline in line 1, this function will act as if called with prefix arg.
  But only if also the variable `org-cycle-global-at-bob' is t." nil [208404 215641]) ("org-global-cycle" function nil ("&optional" "arg") ((user-visible . t)) "Cycle the global visibility.  For details see `org-cycle'." nil [215658 216050]) ("org-overview" function nil nil ((user-visible . t)) "Switch to overview mode, shoing only top-level headlines.
Really, this shows all headlines with level equal or greater than the level
of the first headline in the buffer.  This is important, because if the
first headline is not level one, then (hide-sublevels 1) gives confusing
results." nil [216052 216705]) ("org-content" function nil ("&optional" "arg") ((user-visible . t)) "Show all headlines in the buffer, like a table of contents.
With numerical argument N, show content up to level N." nil [216707 217413]) ("org-optimize-window-after-visibility-change" function nil ("state") nil "Adjust the window after a change in outline visibility.
This function is the default value of the hook `org-cycle-hook'." nil [217416 218015]) ("org-cycle-show-empty-lines" function nil ("state") nil "Show empty lines above all visible headlines.
The region to be covered depends on STATE when called through
`org-cycle-hook'.  Lisp program can use t for STATE to get the
entire buffer covered.  Note that an empty line is only shown if there
are at least `org-cycle-separator-lines' empty lines before the headeline." nil [218018 219717]) ("org-subtree-end-visible-p" function nil nil nil "Is the end of the current subtree visible?" nil [219719 219881]) ("org-first-headline-recenter" function nil ("&optional" "N") nil "Move cursor to the first headline and recenter the headline.
Optional argument N means, put the headline into the Nth line of the window." nil [219883 220236]) ("org-goto-window-configuration" variable nil nil nil nil nil [220252 220294]) ("org-goto-marker" variable nil nil nil nil nil [220295 220323]) ("org-goto-map" variable nil (let ((map (make-sparse-keymap))) (let ((cmds (quote (isearch-forward isearch-backward kill-ring-save set-mark-command mouse-drag-region universal-argument org-occur))) cmd) (while (setq cmd (pop cmds)) (substitute-key-definition cmd cmd map global-map))) (suppress-keymap map) (org-defkey map "" (quote org-goto-ret)) (org-defkey map [(left)] (quote org-goto-left)) (org-defkey map [(right)] (quote org-goto-right)) (org-defkey map [(113)] (quote org-goto-quit)) (org-defkey map [(control 103)] (quote org-goto-quit)) (org-defkey map "	" (quote org-cycle)) (org-defkey map [(tab)] (quote org-cycle)) (org-defkey map [(down)] (quote outline-next-visible-heading)) (org-defkey map [(up)] (quote outline-previous-visible-heading)) (org-defkey map "n" (quote outline-next-visible-heading)) (org-defkey map "p" (quote outline-previous-visible-heading)) (org-defkey map "f" (quote outline-forward-same-level)) (org-defkey map "b" (quote outline-backward-same-level)) (org-defkey map "u" (quote outline-up-heading)) (org-defkey map "/" (quote org-occur)) (org-defkey map "" (quote outline-next-visible-heading)) (org-defkey map "" (quote outline-previous-visible-heading)) (org-defkey map "" (quote outline-forward-same-level)) (org-defkey map "" (quote outline-backward-same-level)) (org-defkey map "" (quote outline-up-heading)) map) nil nil nil [220324 221692]) ("org-goto-help" variable nil "Browse copy of buffer to find location or copy text.
RET=jump to location             [Q]uit and return to previous location
[Up]/[Down]=next/prev headline   TAB=cycle visibility   [/] org-occur" ((const . t)) nil nil [221694 221917]) ("org-goto" function nil nil ((user-visible . t)) "Look up a different location in the current file, keeping current visibility.

When you want look-up or go to a different location in a document, the
fastest way is often to fold the entire buffer and then dive into the tree.
This method has the disadvantage, that the previous location will be folded,
which may not be what you want.

This command works around this by showing a copy of the current buffer
in an indirect buffer, in overview mode.  You can dive into the tree in
that copy, use org-occur and incremental search to find a location.
When pressing RET or `Q', the command returns to the original buffer in
which the visibility is still unchanged.  After RET is will also jump to
the location selected in the indirect buffer and expose the
the headline hierarchy above." nil [221919 223122]) ("org-goto-selected-point" variable nil nil nil nil nil [223124 223160]) ("org-goto-exit-command" variable nil nil nil nil nil [223192 223226]) ("org-get-location" function nil ("buf" "help") nil "Let the user select a location in the Org-mode buffer BUF.
This function uses a recursive edit.  It returns the selected position
or nil." nil [223259 225239]) ("org-goto-ret" function nil ("&optional" "arg") ((user-visible . t)) "Finish `org-goto' by going to the new location." nil [225241 225448]) ("org-goto-left" function nil nil ((user-visible . t)) "Finish `org-goto' by going to the new location." nil [225450 225758]) ("org-goto-right" function nil nil ((user-visible . t)) "Finish `org-goto' by going to the new location." nil [225760 226040]) ("org-goto-quit" function nil nil ((user-visible . t)) "Finish `org-goto' without cursor motion." nil [226042 226221]) ("org-indirect-dedicated-frame" variable nil nil nil "This is the frame being used for indirect tree display." nil [226264 226365]) ("org-last-indirect-buffer" variable nil nil nil nil nil [226366 226403]) ("org-tree-to-indirect-buffer" function nil ("&optional" "arg") ((user-visible . t)) "Create indirect buffer and narrow it to current subtree.
With numerical prefix ARG, go up to this level and then take that tree.
If ARG is negative, go up that many levels.
Normally this command removes the indirect buffer previously made
with this command.  However, when called with a C-u prefix, the last buffer
is kept so that you can work with several indirect buffers at the same time.
If `org-indirect-buffer-display' is `dedicated-frame', the C-u prefix also
requests that a new frame be made for the new buffer, so that the dedicated
frame is not changed." nil [226405 228884]) ("org-get-indirect-buffer" function nil ("&optional" "buffer") nil (setq buffer (or buffer (current-buffer))) nil [228886 229284]) ("org-set-frame-title" function nil ("title") nil "Set the title of the current frame to the string TITLE." nil [229286 229536]) ("org-insert-heading" function nil ("&optional" "force-heading") ((user-visible . t)) "Insert a new heading or item with same depth at point.
If point is in a plain list and FORCE-HEADING is nil, create a new list item.
If point is at the beginning of a headline, insert a sibling before the
current headline.  If point is in the middle of a headline, split the headline
at that position and make the rest of the headline part of the sibling below
the current headline." nil [229587 231090]) ("org-insert-heading-after-current" function nil nil ((user-visible . t)) "Insert a new heading with same level as current, after current subtree." nil [231092 231318]) ("org-insert-todo-heading" function nil ("arg") ((user-visible . t)) "Insert a new heading with the same level and TODO state as current heading.
If the heading has no TODO state, or if the state is DONE, use the first
state (TODO by default).  Also with prefix arg, force first state." nil [231320 231982]) ("org-insert-subheading" function nil ("arg") ((user-visible . t)) "Insert a new subheading and demote it.
Works for outline headings and for plain lists alike." nil [231984 232253]) ("org-insert-todo-subheading" function nil ("arg") ((user-visible . t)) "Insert a new subheading with TODO keyword or checkbox and demote it.
Works for outline headings and for plain lists alike." nil [232255 232564]) ("org-promote-subtree" function nil nil ((user-visible . t)) "Promote the entire subtree.
See also `org-promote'." nil [232594 232782]) ("org-demote-subtree" function nil nil ((user-visible . t)) "Demote the entire subtree.  See `org-demote'.
See also `org-promote'." nil [232784 232988]) ("org-do-promote" function nil nil ((user-visible . t)) "Promote the current heading higher up the tree.
If the region is active in `transient-mark-mode', promote all headings
in the region." nil [232991 233345]) ("org-do-demote" function nil nil ((user-visible . t)) "Demote the current heading lower down the tree.
If the region is active in `transient-mark-mode', demote all headings
in the region." nil [233347 233697]) ("org-fix-position-after-promote" function nil nil nil "Make sure that after pro/demotion cursor position is right." nil [233699 234130]) ("org-reduced-level" function nil ("l") nil (if org-odd-levels-only (1+ (floor (/ l 2))) l) nil [234132 234211]) ("org-get-legal-level" function nil ("level" "&optional" "change") nil "Rectify a level change under the influence of `org-odd-levels-only'
LEVEL is a current level, CHANGE is by how much the level should be
modified.  Even if CHANGE is nil, LEVEL may be returned modified because
even level numbers will become the next higher odd number." nil [234213 234804]) ("org-promote" function nil nil nil "Promote the current heading higher up the tree.
If the region is active in `transient-mark-mode', promote all headings
in the region." nil [234806 235450]) ("org-demote" function nil nil nil "Demote the current heading lower down the tree.
If the region is active in `transient-mark-mode', demote all headings
in the region." nil [235452 236008]) ("org-map-tree" function nil ("fun") nil "Call FUN for every heading underneath the current one." nil [236010 236380]) ("org-map-region" function nil ("fun" "beg" "end") nil "Call FUN for every heading between BEG and END." nil [236382 236866]) ("org-fixup-indentation" function nil ("diff") nil "Change the indentation in the current entry by DIFF
However, if any line in the current entry has no indentation, or if it
would end up with no indentation after the change, nothing at all is done." nil [236868 237735]) ("org-convert-to-odd-levels" function nil nil ((user-visible . t)) "Convert an org-mode file with all levels allowed to one with odd levels.
This will leave level 1 alone, convert level 2 to level 3, level 3 to
level 5 etc." nil [237737 238323]) ("org-convert-to-oddeven-levels" function nil nil ((user-visible . t)) "Convert an org-mode file with only odd levels to one with odd and even levels.
This promotes level 3 to level 2, level 5 to level 3 etc.  If the file contains a
section with an even level, conversion would destroy the structure of the file.  An error
is signaled in this case." nil [238326 239274]) ("org-tr-level" function nil ("n") nil "Make N odd if required." nil [239276 239370]) ("org-move-subtree-up" function nil ("&optional" "arg") ((user-visible . t)) "Move the current subtree up past ARG headlines of the same level." nil [239431 239621]) ("org-move-subtree-down" function nil ("&optional" "arg") ((user-visible . t)) "Move the current subtree down past ARG headlines of the same level." nil [239623 241093]) ("org-subtree-clip" variable nil "" nil "Clipboard for cut and paste of subtrees.
This is actually only a copy of the kill, because we use the normal kill
ring.  We need it to check if the kill was created by `org-copy-subtree'." nil [241095 241315]) ("org-subtree-clip-folded" variable nil nil nil "Was the last copied subtree folded?
This is used to fold the tree back after pasting." nil [241317 241443]) ("org-cut-subtree" function nil ("&optional" "n") ((user-visible . t)) "Cut the current subtree into the clipboard.
With prefix arg N, cut this many sequential subtrees.
This is a short-hand for marking the subtree and then cutting it." nil [241445 241698]) ("org-copy-subtree" function nil ("&optional" "n" "cut") ((user-visible . t)) "Cut the current subtree into the clipboard.
With prefix arg N, cut this many sequential subtrees.
This is a short-hand for marking the subtree and then copying it.
If CUT is non-nil, actually cut the subtree." nil [241700 242777]) ("org-paste-subtree" function nil ("&optional" "level" "tree") ((user-visible . t)) "Paste the clipboard as a subtree, with modification of headline level.
The entire subtree is promoted or demoted in order to match a new headline
level.  By default, the new level is derived from the visible headings
before and after the insertion point, and taken to be the inferior headline
level of the two.  So if the previous visible heading is level 3 and the
next is level 4 (or vice versa), level 4 will be used for insertion.
This makes sure that the subtree remains an independent subtree and does
not swallow low level entries.

You can also force a different level, either by using a numeric prefix
argument, or by inserting the heading marker by hand.  For example, if the
cursor is after \"*****\", then the tree will be shifted to level 5.

If you want to insert the tree as is, just use \\[yank].

If optional TREE is given, use this text instead of the kill ring." nil [242779 246645]) ("org-kill-is-subtree-p" function nil ("&optional" "txt") nil "Check if the current kill is an outline subtree, or a set of trees.
Returns nil if kill does not start with a headline, or if the first
headline level is not the largest headline level in the tree.
So this will actually accept several entries of equal levels as well,
which is OK for `org-paste-subtree'.
If optional TXT is given, check this string instead of the current kill." nil [246647 247676]) ("org-narrow-to-subtree" function nil nil ((user-visible . t)) "Narrow buffer to the current subtree." nil [247678 247899]) ("org-sort" function nil ("with-case") ((user-visible . t)) "Call `org-sort-entries-or-items' or `org-table-sort-lines'.
Optional argument WITH-CASE means sort case-sensitively." nil [247923 248235]) ("org-priority-regexp" variable nil nil nil nil nil [248237 248265]) ("org-sort-entries-or-items" function nil ("&optional" "with-case" "sorting-type" "getkey-func" "property") ((user-visible . t)) "Sort entries on a certain level of an outline tree.
If there is an active region, the entries in the region are sorted.
Else, if the cursor is before the first entry, sort the top-level items.
Else, the children of the entry at point are sorted.

Sorting can be alphabetically, numerically, and by date/time as given by
the first time stamp in the entry.  The command prompts for the sorting
type unless it has been given to the function through the SORTING-TYPE
argument, which needs to a character, any of (?n ?N ?a ?A ?t ?T ?p ?P ?f ?F).
If the SORTING-TYPE is ?f or ?F, then GETKEY-FUNC specifies a function to be
called with point at the beginning of the record.  It must return either
a string or a number that should serve as the sorting key for that record.

Comparing entries ignores case by default.  However, with an optional argument
WITH-CASE, the sorting considers case as well." nil [248295 255610]) ("org-do-sort" function nil ("table" "what" "&optional" "with-case" "sorting-type") nil "Sort TABLE of WHAT according to SORTING-TYPE.
The user will be prompted for the SORTING-TYPE if the call to this
function does not specify it.  WHAT is only for the prompt, to indicate
what is being sorted.  The sorting key will be extracted from
the car of the elements of the table.
If WITH-CASE is non-nil, the sorting will be case-sensitive." nil [255612 257240]) ("org-at-item-p" function nil nil nil "Is point in a line starting a hand-formatted item?" nil [257309 257873]) ("org-in-item-p" function nil nil nil "It the cursor inside a plain list item.
Does not have to be the first line." nil [257875 258129]) ("org-insert-item" function nil ("&optional" "checkbox") nil "Insert a new item at the current level.
Return t when things worked, nil when we are not in an item." nil [258131 259317]) ("org-at-item-checkbox-p" function nil nil nil "Is point at a line starting a plain-list item with a checklet?" nil [259335 259590]) ("org-toggle-checkbox" function nil ("&optional" "arg") ((user-visible . t)) "Toggle the checkbox in the current line." nil [259592 260712]) ("org-update-checkbox-count-maybe" function nil nil nil "Update checkbox statistics unless turned off by user." nil [260714 260887]) ("org-update-checkbox-count" function nil ("&optional" "all") ((user-visible . t)) "Update the checkbox statistics in the current section.
This will find all statistic cookies like [57%] and [6/12] and update them
with the current numbers.  With optional prefix argument ALL, do this for
the whole buffer." nil [260889 262948]) ("org-get-checkbox-statistics-face" function nil nil nil "Select the face for checkbox statistics.
The face will be `org-done' when all relevant boxes are checked.  Otherwise
it will be `org-todo'." nil [262950 263363]) ("org-get-indentation" function nil ("&optional" "line") nil "Get the indentation of the current line, interpreting tabs.
When LINE is given, assume it represents a line and compute its indentation." nil [263365 263746]) ("org-remove-tabs" function nil ("s" "&optional" "width") nil "Replace tabulators in S with spaces.
Assumes that s is a single line, starting in column 0." nil [263748 264143]) ("org-fix-indentation" function nil ("line" "ind") nil "Fix indentation in LINE.
IND is a cons cell with target and minimum indentation.
If the current indenation in LINE is smaller than the minimum,
leave it alone.  If it is larger than ind, set it to the target." nil [264145 264624]) ("org-empty-line-terminates-plain-lists" variable nil nil nil "Non-nil means, an empty line ends all plain list levels.
When nil, empty lines are part of the preceeding item." nil [264626 264838]) ("org-beginning-of-item" function nil nil ((user-visible . t)) "Go to the beginning of the current hand-formatted item.
If the cursor is not in an item, throw an error." nil [264840 265998]) ("org-end-of-item" function nil nil ((user-visible . t)) "Go to the end of the current hand-formatted item.
If the cursor is not in an item, throw an error." nil [266000 267051]) ("org-next-item" function nil nil ((user-visible . t)) "Move to the beginning of the next item in the current plain list.
Error if not at a plain list, or if this is the last item in the list." nil [267053 267491]) ("org-previous-item" function nil nil ((user-visible . t)) "Move to the beginning of the previous item in the current plain list.
Error if not at a plain list, or if this is the first item in the list." nil [267493 268255]) ("org-move-item-down" function nil nil ((user-visible . t)) "Move the plain list item at point down, i.e. swap with following item.
Subitems (items with larger indentation) are considered part of the item,
so this really moves item trees." nil [268257 269094]) ("org-move-item-up" function nil ("arg") ((user-visible . t)) "Move the plain list item at point up, i.e. swap with previous item.
Subitems (items with larger indentation) are considered part of the item,
so this really moves item trees." nil [269096 270448]) ("org-maybe-renumber-ordered-list" function nil nil ((user-visible . t)) "Renumber the ordered list at point if setup allows it.
This tests the user option `org-auto-renumber-ordered-lists' before
doing the renumbering." nil [270450 270829]) ("org-maybe-renumber-ordered-list-safe" function nil nil nil (condition-case nil (save-excursion (org-maybe-renumber-ordered-list)) (error nil)) nil [270831 270982]) ("org-cycle-list-bullet" function nil ("&optional" "which") ((user-visible . t)) "Cycle through the different itemize/enumerate bullets.
This cycle the entire list level through the sequence:

   `-'  ->  `+'  ->  `*'  ->  `1.'  ->  `1)'

If WHICH is a string, use that as the new bullet.  If WHICH is an integer,
0 meand `-', 1 means `+' etc." nil [270984 272204]) ("org-get-string-indentation" function nil ("s") nil "What indentation has S due to SPACE and TAB at the beginning of the string?" nil [272206 272592]) ("org-renumber-ordered-list" function nil ("arg") ((user-visible . t)) "Renumber an ordered plain list.
Cursor needs to be in the first line of an item, the line that starts
with something like \"1.\" or \"2)\"." nil [272594 273990]) ("org-fix-bullet-type" function nil nil ((user-visible . t)) "Make sure all items in this list have the same bullet as the firsst item." nil [273992 275190]) ("org-beginning-of-item-list" function nil nil ((user-visible . t)) "Go to the beginning of the current item list.
I.e. to the first item in this list." nil [275192 275964]) ("org-end-of-item-list" function nil nil ((user-visible . t)) "Go to the end of the current item list.
I.e. to the text after the last item." nil [275967 276733]) ("org-last-indent-begin-marker" variable nil (make-marker) nil nil nil [276736 276787]) ("org-last-indent-end-marker" variable nil (make-marker) nil nil nil [276788 276837]) ("org-outdent-item" function nil ("arg") ((user-visible . t)) "Outdent a local list item." nil [276839 276948]) ("org-indent-item" function nil ("arg") ((user-visible . t)) "Indent a local list item." nil [276950 278357]) ("org-item-indent-positions" function nil nil nil "Return indentation for plain list items.
This returns a list with three values:  The current indentation, the
parent indentation and the indentation a child should habe.
Assumes cursor in item line." nil [278359 279442]) ("orgstruct-mode-map" variable nil (make-sparse-keymap) nil "Keymap for the minor `orgstruct-mode'." nil [280627 280718]) ("org-local-vars" variable nil nil nil "List of local variables, for use by `orgstruct-mode'" nil [280720 280804]) ("define-minor-mode" code nil [280821 281684]) ("turn-on-orgstruct" function nil nil nil "Unconditionally turn on `orgstruct-mode'." nil [281701 281796]) ("turn-on-orgstruct++" function nil nil nil "Unconditionally turn on `orgstruct-mode', and force org-mode indentations.
In addition to setting orgstruct-mode, this also exports all indentation and
autofilling variables from org-mode into the buffer.  Note that turning
off orgstruct-mode will *not* remove these additonal settings." nil [281813 282495]) ("orgstruct-error" function nil nil ((user-visible . t)) "Error when there is no default binding for a structure key." nil [282497 282670]) ("orgstruct-setup" function nil nil nil "Setup orgstruct keymaps." nil [282672 284657]) ("orgstruct-make-binding" function nil ("fun" "n" "&rest" "keys") nil "Create a function for binding in the structure minor mode.
FUN is the command to call inside a table.  N is used to create a unique
command name.  KEYS are keys that should be checked in for a command
to execute outside of tables." nil [284659 285805]) ("org-context-p" function nil ("&rest" "contexts") nil "Check if local context is and of CONTEXTS.
Possible values in the list of contexts are `table', `headline', and `item'." nil [285807 286333]) ("org-get-local-variables" function nil nil nil "Return a list of all local variables in an org-mode buffer." nil [286335 287076]) ("org-run-like-in-org-mode" function nil ("cmd") nil (unless org-local-vars (setq org-local-vars (org-get-local-variables))) nil [287093 287304]) ("defalias" code nil [287322 287385]) ("org-archive-subtree" function nil ("&optional" "find-done") ((user-visible . t)) "Move the current subtree to the archive.
The archive can be a certain top-level heading in the current file, or in
a different file.  The tree will be moved to that location, the subtree
heading be marked DONE, and the current time will be added.

When called with prefix argument FIND-DONE, find whole trees without any
open TODO items and archive them (after getting confirmation from the user).
If the cursor is not at a headline when this comand is called, try all level
1 trees.  If the cursor is on a headline, only try the direct children of
this heading." nil [287387 294648]) ("org-refresh-category-properties" function nil nil nil "Refresh category text properties in teh buffer." nil [294650 295849]) ("org-archive-all-done" function nil ("&optional" "tag") nil "Archive sublevels of the current tree without open TODO items.
If the cursor is not on a headline, try all level 1 trees.  If
it is on a headline, try all direct children.
When TAG is non-nil, don't move trees, but mark them with the ARCHIVE tag." nil [295851 297619]) ("org-cycle-hide-drawers" function nil ("state") nil "Re-hide all drawers after a visibility state change." nil [297621 298103]) ("org-flag-drawer" function nil ("flag") nil (save-excursion (beginning-of-line 1) (when (looking-at "^[ 	]*:[a-zA-Z][a-zA-Z0-9]*:") (let ((b (match-end 0))) (if (re-search-forward "^[ 	]*:END:" (save-excursion (outline-next-heading) (point)) t) (outline-flag-region b (point-at-eol) flag) (error ":END: line missing"))))) nil [298105 298487]) ("org-cycle-hide-archived-subtrees" function nil ("state") nil "Re-hide all archived subtrees after a visibility state change." nil [298489 299194]) ("org-force-cycle-archived" function nil nil ((user-visible . t)) "Cycle subtree even if it is archived." nil [299196 299402]) ("org-hide-archived-subtrees" function nil ("beg" "end") nil "Re-hide all archived subtrees after a visibility state change." nil [299404 299729]) ("org-toggle-tag" function nil ("tag" "&optional" "onoff") nil "Toggle the tag TAG for the current line.
If ONOFF is `on' or `off', don't toggle but set to this state." nil [299731 300926]) ("org-toggle-archive-tag" function nil ("&optional" "arg") ((user-visible . t)) "Toggle the archive tag for the current headline.
With prefix ARG, check all children of current headline and offer tagging
the children that do not contain any open TODO items." nil [300928 301477]) ("org-before-change-function" function nil ("beg" "end") nil "Every change indicates that a table might need an update." nil [301832 301975]) ("org-table-line-regexp" variable nil "^[ 	]*|" ((const . t)) "Detects an org-type table line." nil [301977 302056]) ("org-table-dataline-regexp" variable nil "^[ 	]*|[^-]" ((const . t)) "Detects an org-type table line." nil [302057 302144]) ("org-table-auto-recalculate-regexp" variable nil "^[ 	]*| *# *\\(|\\|$\\)" ((const . t)) "Detects a table line marked for automatic recalculation." nil [302145 302277]) ("org-table-recalculate-regexp" variable nil "^[ 	]*| *[#*] *\\(|\\|$\\)" ((const . t)) "Detects a table line marked for automatic recalculation." nil [302278 302408]) ("org-table-calculate-mark-regexp" variable nil "^[ 	]*| *[!$^_#*] *\\(|\\|$\\)" ((const . t)) "Detects a table line marked for automatic recalculation." nil [302409 302546]) ("org-table-hline-regexp" variable nil "^[ 	]*|-" ((const . t)) "Detects an org-type table hline." nil [302547 302629]) ("org-table1-hline-regexp" variable nil "^[ 	]*\\+-[-+]" ((const . t)) "Detects a table-type table hline." nil [302630 302720]) ("org-table-any-line-regexp" variable nil "^[ 	]*\\(|\\|\\+-[-+]\\)" ((const . t)) "Detects an org-type or table-type table." nil [302721 302830]) ("org-table-border-regexp" variable nil "^[ 	]*[^| 	]" ((const . t)) "Searching from within a table (any type) this finds the first line
outside the table." nil [302831 302972]) ("org-table-any-border-regexp" variable nil "^[ 	]*[^|+ 	]" ((const . t)) "Searching from within a table (any type) this finds the first line
outside the table." nil [302973 303119]) ("org-table-last-highlighted-reference" variable nil nil nil nil nil [303121 303170]) ("org-table-formula-history" variable nil nil nil nil nil [303171 303209]) ("org-table-column-names" variable nil nil nil "Alist with column names, derived from the `!' line." nil [303211 303302]) ("org-table-column-name-regexp" variable nil nil nil "Regular expression matching the current column names." nil [303303 303402]) ("org-table-local-parameters" variable nil nil nil "Alist with parameter names, derived from the `$' line." nil [303403 303501]) ("org-table-named-field-locations" variable nil nil nil "Alist with locations of named fields." nil [303502 303588]) ("org-table-current-line-types" variable nil nil nil "Table row types, non-nil only for the duration of a comand." nil [303590 303695]) ("org-table-current-begin-line" variable nil nil nil "Table begin line, non-nil only for the duration of a comand." nil [303696 303802]) ("org-table-current-begin-pos" variable nil nil nil "Table begin position, non-nil only for the duration of a comand." nil [303803 303912]) ("org-table-dlines" variable nil nil nil "Vector of data line line numbers in the current table." nil [303913 304001]) ("org-table-hlines" variable nil nil nil "Vector of hline line numbers in the current table." nil [304002 304086]) ("org-table-range-regexp" variable nil "@\\([-+]?I*[-+]?[0-9]*\\)?\\(\\$[-+]?[0-9]+\\)?\\(\\.\\.@?\\([-+]?I*[-+]?[0-9]*\\)?\\(\\$[-+]?[0-9]+\\)?\\)?" ((const . t)) "Regular expression for matching ranges in formulas." nil [304088 304383]) ("org-table-range-regexp2" variable nil (concat "\\(" "@[-0-9I$&]+" "\\|" "[a-zA-Z]\\{1,2\\}\\([0-9]+\\|&\\)" "\\|" "\\$[a-zA-Z0-9]+" "\\)" "\\.\\." "\\(" "@?[-0-9I$&]+" "\\|" "[a-zA-Z]\\{1,2\\}\\([0-9]+\\|&\\)" "\\|" "\\$[a-zA-Z0-9]+" "\\)") ((const . t)) "Match a range for reference display." nil [304385 304674]) ("org-table-translate-regexp" variable nil (concat "\\(" "@[-0-9I$]+" "\\|" "[a-zA-Z]\\{1,2\\}\\([0-9]+\\|&\\)" "\\)") ((const . t)) "Match a reference that needs translation, for reference display." nil [304676 304860]) ("org-inhibit-highlight-removal" variable nil nil nil nil nil [304862 304904]) ("org-table-create-with-table\\.el" function nil nil ((user-visible . t)) "Use the table.el package to insert a new table.
If there is already a table at point, convert between Org-mode tables
and table.el tables." nil [304933 305418]) ("org-table-create-or-convert-from-region" function nil ("arg") ((user-visible . t)) "Convert region to table, or create an empty table.
If there is an active region, convert it to a table, using the function
`org-table-convert-region'.  See the documentation of that function
to learn how the prefix argument is interpreted to determine the field
separator.
If there is no such region, create an empty table with `org-table-create'." nil [305420 305970]) ("org-table-create" function nil ("&optional" "size") ((user-visible . t)) "Query for a size and insert a table skeleton.
SIZE is a string Columns x Rows like for example \"3x2\"." nil [305972 307152]) ("org-table-convert-region" function nil ("beg0" "end0" "&optional" "separator") ((user-visible . t)) "Convert region to a table.
The region goes from BEG0 to END0, but these borders will be moved
slightly, to make sure a beginning of line in the first line is included.

SEPARATOR specifies the field separator in the lines.  It can have the
following values:

'(4)     Use the comma as a field separator
'(16)    Use a TAB as field separator
integer  When a number, use that many spaces as field separator
nil      When nil, the command tries to be smart and figure out the
         separator in the following way:
         - when each line contains a TAB, assume TAB-separated material
         - when each line contains a comme, assume CSV material
         - else, assume one or more SPACE charcters as separator." nil [307154 308962]) ("org-table-import" function nil ("file" "arg") ((user-visible . t)) "Import FILE as a table.
The file is assumed to be tab-separated.  Such files can be produced by most
spreadsheet and database applications.  If no tabs (at least one per line)
are found, lines will be split on whitespace into fields." nil [308964 309435]) ("org-table-export" function nil nil ((user-visible . t)) "Export table as a tab-separated file.
Such a file can be imported into a spreadsheet program like Excel." nil [309437 310687]) ("org-table-aligned-begin-marker" variable nil (make-marker) nil "Marker at the beginning of the table last aligned.
Used to check if cursor still is in that table, to minimize realignment." nil [310689 310870]) ("org-table-aligned-end-marker" variable nil (make-marker) nil "Marker at the end of the table last aligned.
Used to check if cursor still is in that table, to minimize realignment." nil [310871 311044]) ("org-table-last-alignment" variable nil nil nil "List of flags for flushright alignment, from the last re-alignment.
This is being used to correctly align a single field after TAB or RET." nil [311045 311225]) ("org-table-last-column-widths" variable nil nil nil "List of max width of fields in each column.
This is being used to correctly align a single field after TAB or RET." nil [311226 311386]) ("org-table-overlay-coordinates" variable nil nil nil "Overlay coordinates after each align of a table." nil [311387 311482]) ("make-variable-buffer-local" code nil [311483 311542]) ("org-last-recalc-line" variable nil nil nil nil nil [311544 311577]) ("org-narrow-column-arrow" variable nil "=>" ((const . t)) "Used as display property in narrowed table columns." nil [311578 311673]) ("org-table-align" function nil nil ((user-visible . t)) "Align the table at point by aligning all vertical bars." nil [311675 318851]) ("org-string-width" function nil ("s") nil "Compute width of string, ignoring invisible characters.
This ignores character with invisibility property `org-link', and also
characters with property `org-cwidth', because these will become invisible
upon the next fontification round." nil [318853 319969]) ("org-table-begin" function nil ("&optional" "table-type") nil "Find the beginning of the table and return its position.
With argument TABLE-TYPE, go to the beginning of a table.el-type table." nil [319971 320451]) ("org-table-end" function nil ("&optional" "table-type") nil "Find the end of the table and return its position.
With argument TABLE-TYPE, go to the end of a table.el-type table." nil [320453 320879]) ("org-table-justify-field-maybe" function nil ("&optional" "new") nil "Justify the current field, text to left, number to right.
Optional argument NEW may specify text to replace the current field content." nil [320881 322720]) ("org-table-next-field" function nil nil ((user-visible . t)) "Go to the next field in the current table, creating new lines as needed.
Before doing so, re-align the table if necessary." nil [322722 323756]) ("org-table-previous-field" function nil nil ((user-visible . t)) "Go to the previous field in the table.
Before doing so, re-align the table if necessary." nil [323758 324366]) ("org-table-next-row" function nil nil ((user-visible . t)) "Go to the next row (same column) in the current table.
Before doing so, re-align the table if necessary." nil [324368 325172]) ("org-table-copy-down" function nil ("n") ((user-visible . t)) "Copy a field down in the current column.
If the field at the cursor is empty, copy into it the content of the nearest
non-empty field above.  With argument N, use the Nth non-empty field.
If the current field is not empty, it is copied down to the next row, and
the cursor is moved with it.  Therefore, repeating this command causes the
column to be filled row-by-row.
If the variable `org-table-copy-increment' is non-nil and the field is an
integer or a timestamp, it will be incremented while copying.  In the case of
a timestamp, if the cursor is on the year, change the year.  If it is on the
month or the day, change that.  Point will stay on the current date field
in order to easily repeat the interval." nil [325174 327347]) ("org-table-check-inside-data-field" function nil nil nil "Is point inside a table data field?
I.e. not on a hline or before the first or after the last column?
This actually throws an error, so it aborts the current command." nil [327349 327748]) ("org-table-clip" variable nil nil nil "Clipboard for table regions." nil [327750 327810]) ("org-table-blank-field" function nil nil ((user-visible . t)) "Blank the current table field or active region." nil [327812 328436]) ("org-table-get-field" function nil ("&optional" "n" "replace") nil "Return the value of the field in column N of current row.
N defaults to current field.
If REPLACE is a string, replace field with this value.  The return value
is always the old value." nil [328438 329059]) ("org-table-field-info" function nil ("arg") ((user-visible . t)) "Show info about the current field, and highlight any reference at point." nil [329061 330567]) ("org-table-current-column" function nil nil ((user-visible . t)) "Find out which column we are in.
When called interactively, column is also displayed in echo area." nil [330569 331009]) ("org-table-current-dline" function nil nil ((user-visible . t)) "Find out what table data line we are in.
Only datalins count for this." nil [331011 331492]) ("org-table-goto-column" function nil ("n" "&optional" "on-delim" "force") ((user-visible . t)) "Move the cursor to the Nth column in the current table line.
With optional argument ON-DELIM, stop with point before the left delimiter
of the field.
If there are less than N fields, just go to after the last delimiter.
However, when FORCE is non-nil, create new columns if necessary." nil [331494 332486]) ("org-at-table-p" function nil ("&optional" "table-type") nil "Return t if the cursor is inside an org-type table.
If TABLE-TYPE is non-nil, also check for table.el-type tables." nil [332488 332851]) ("org-at-table\\.el-p" function nil nil nil "Return t if and only if we are at a table.el table." nil [332853 333081]) ("org-table-recognize-table\\.el" function nil nil nil "If there is a table.el table nearby, recognize it and move into it." nil [333083 334081]) ("org-at-table-hline-p" function nil nil nil "Return t if the cursor is inside a hline in a table." nil [334083 334307]) ("org-table-insert-column" function nil nil ((user-visible . t)) "Insert a new column into the table." nil [334309 335041]) ("org-table-find-dataline" function nil nil nil "Find a dataline in the current table, which is needed for column commands." nil [335043 335699]) ("org-table-delete-column" function nil nil ((user-visible . t)) "Delete a column from the table." nil [335701 336578]) ("org-table-move-column-right" function nil nil ((user-visible . t)) "Move column to the right." nil [336580 336694]) ("org-table-move-column-left" function nil nil ((user-visible . t)) "Move column to the left." nil [336695 336809]) ("org-table-move-column" function nil ("&optional" "left") ((user-visible . t)) "Move the current column to the right.  With arg LEFT, move to the left." nil [336811 338078]) ("org-table-move-row-down" function nil nil ((user-visible . t)) "Move table row down." nil [338080 338182]) ("org-table-move-row-up" function nil nil ((user-visible . t)) "Move table row up." nil [338183 338281]) ("org-table-move-row" function nil ("&optional" "up") ((user-visible . t)) "Move the current table line down.  With arg UP, move it up." nil [338283 339401]) ("org-table-insert-row" function nil ("&optional" "arg") ((user-visible . t)) "Insert a new row above the current line into the table.
With prefix ARG, insert below the current line." nil [339403 340249]) ("org-table-insert-hline" function nil ("&optional" "above") ((user-visible . t)) "Insert a horizontal-line below the current line into the table.
With prefix ABOVE, insert above the current line." nil [340251 341116]) ("org-table-hline-and-move" function nil ("&optional" "same-column") ((user-visible . t)) "Insert a hline and move to the row below that line." nil [341118 341578]) ("org-table-clean-line" function nil ("s") nil "Convert a table line S into a string with only \"|\" and space.
In particular, this does handle wide and invisible characters." nil [341580 342157]) ("org-table-kill-row" function nil nil ((user-visible . t)) "Delete the current row or horizontal line from the table." nil [342159 342677]) ("org-table-sort-lines" function nil ("with-case" "&optional" "sorting-type") ((user-visible . t)) "Sort table lines according to the column at point.

The position of point indicates the column to be used for
sorting, and the range of lines is the range between the nearest
horizontal separator lines, or the entire table of no such lines
exist.  If point is before the first column, you will be prompted
for the sorting column.  If there is an active region, the mark
specifies the first line and the sorting column, while point
should be in the last line to be included into the sorting.

The command then prompts for the sorting type which can be
alphabetically, numerically, or by time (as given in a time stamp
in the field).  Sorting in reverse order is also possible.

With prefix argument WITH-CASE, alphabetic sorting will be case-sensitive.

If SORTING-TYPE is specified when this function is called from a Lisp
program, no prompting will take place.  SORTING-TYPE must be a character,
any of (?a ?A ?n ?N ?t ?T) where the capital letter indicate that sorting
should be done in reverse order." nil [342679 345801]) ("org-table-cut-region" function nil ("beg" "end") ((user-visible . t)) "Copy region in table to the clipboard and blank all relevant fields." nil [345803 345973]) ("org-table-copy-region" function nil ("beg" "end" "&optional" "cut") ((user-visible . t)) "Copy rectangular region in table to clipboard.
A special clipboard is used which can only be accessed
with `org-table-paste-rectangle'." nil [345975 347172]) ("org-table-paste-rectangle" function nil nil ((user-visible . t)) "Paste a rectangular region into a table.
The upper right corner ends up in the current field.  All involved fields
will be overwritten.  If the rectangle does not fit into the present table,
the table is enlarged as needed.  The process ignores horizontal separator
lines." nil [347174 348310]) ("org-table-convert" function nil nil ((user-visible . t)) "Convert from `org-mode' table to table.el and back.
Obviously, this only works within limits.  When an Org-mode table is
converted to table.el, all horizontal separator lines get lost, because
table.el uses these as cell boundaries and has no notion of horizontal lines.
A table.el table can be converted to an Org-mode table only if it does not
do row or column spanning.  Multiline cells will become multiple cells.
Beware, Org-mode does not test if the table can be successfully converted - it
blindly applies a recipe that works for simple tables." nil [348312 350347]) ("org-table-wrap-region" function nil ("arg") ((user-visible . t)) "Wrap several fields in a column like a paragraph.
This is useful if you'd like to spread the contents of a field over several
lines, in order to keep the table compact.

If there is an active region, and both point and mark are in the same column,
the text in the column is wrapped to minimum width for the given number of
lines.  Generally, this makes the table more compact.  A prefix ARG may be
used to change the number of desired lines.  For example, `C-2 \\[org-table-wrap]'
formats the selected text to two lines.  If the region was longer than two
lines, the remaining lines remain empty.  A negative prefix argument reduces
the current number of lines by that amount.  The wrapped text is pasted back
into the table.  If you formatted it to more lines than it was before, fields
further down in the table get overwritten - so you might need to make space in
the table first.

If there is no region, the current field is split at the cursor position and
the text fragment to the right of the cursor is prepended to the field one
line down.

If there is no region, but you specify a prefix ARG, the current field gets
blank, and the content is appended to the field above." nil [350349 353284]) ("org-field-marker" variable nil nil nil nil nil [353286 353315]) ("org-table-edit-field" function nil ("arg") ((user-visible . t)) "Edit table field in a different window.
This is mainly useful for fields that contain hidden parts.
When called with a \\[universal-argument] prefix, just make the full field visible so that
it can be edited in place." nil [353317 354790]) ("org-table-finish-edit-field" function nil nil nil "Finish editing a table data field.
Remove all newline characters, insert the result into the table, realign
the table and kill the editing buffer." nil [354792 355620]) ("org-trim" function nil ("s") nil "Remove whitespace at beginning and end of string." nil [355622 355848]) ("org-wrap" function nil ("string" "&optional" "width" "lines") nil "Wrap string to either a number of lines, or a width in characters.
If WIDTH is non-nil, the string is wrapped to that width, however many lines
that costs.  If there is a word longer than WIDTH, the text is actually
wrapped to the length of that word.
IF WIDTH is nil and LINES is non-nil, the string is forced into at most that
many lines, whatever width that takes.
The return value is a list of lines, without newlines at the end." nil [355850 356899]) ("org-do-wrap" function nil ("words" "width") nil "Create lines of maximum width WIDTH (in characters) from word list WORDS." nil [356902 357265]) ("org-split-string" function nil ("string" "&optional" "separators") nil "Splits STRING into substrings at SEPARATORS.
No empty strings are returned if there are matches at the beginning
and end of string." nil [357267 358357]) ("org-table-map-tables" function nil ("function") nil "Apply FUNCTION to the start of all tables in the buffer." nil [358359 358911]) ("org-timecnt" variable nil nil nil nil nil [358913 358933]) ("org-table-sum" function nil ("&optional" "beg" "end" "nlast") ((user-visible . t)) "Sum numbers in region of current table column.
The result will be displayed in the echo area, and will be available
as kill to be inserted with \\[yank].

If there is an active region, it is interpreted as a rectangle and all
numbers in that rectangle will be summed.  If there is no active
region and point is located in a table column, sum all numbers in that
column.

If at least one number looks like a time HH:MM or HH:MM:SS, all other
numbers are assumed to be times as well (in decimal hours) and the
numbers are added as such.

If NLAST is a number, only the NLAST fields will actually be summed." nil [358966 361480]) ("org-table-get-number-for-summing" function nil ("s") nil (let (n) (if (string-match "^ *|? *" s) (setq s (replace-match "" nil nil s))) (if (string-match " *|? *$" s) (setq s (replace-match "" nil nil s))) (setq n (string-to-number s)) (cond ((and (string-match "0" s) (string-match "\\`[-+ 	0.edED]+\\'" s)) 0) ((string-match "\\`[ 	]+\\'" s) nil) ((string-match "\\`\\([0-9]+\\):\\([0-9]+\\)\\(:\\([0-9]+\\)\\)?\\'" s) (let ((h (string-to-number (or (match-string 1 s) "0"))) (m (string-to-number (or (match-string 2 s) "0"))) (s (string-to-number (or (match-string 4 s) "0")))) (if (boundp (quote org-timecnt)) (setq org-timecnt (1+ org-timecnt))) (* 1.0 (+ h (/ m 60.0) (/ s 3600.0))))) ((equal n 0) nil) (t n))) nil [361482 362333]) ("org-table-current-field-formula" function nil ("&optional" "key" "noerror") nil "Return the formula active for the current field.
Assumes that specials are in place.
If KEY is given, return the key to this formula.
Otherwise return the formula preceeded with \"=\" or \":=\"." nil [362335 363248]) ("org-table-get-formula" function nil ("&optional" "equation" "named") nil "Read a formula from the minibuffer, offer stored formula as default.
When NAMED is non-nil, look for a named equation." nil [363250 365667]) ("org-table-store-formulas" function nil ("alist") nil "Store the list of formulas below the current table." nil [365669 366414]) ("org-table-formula-make-cmp-string" function nil ("a") nil (when (string-match "^\\(@\\([0-9]+\\)\\)?\\(\\$?\\([0-9]+\\)\\)?\\(\\$?[a-zA-Z0-9]+\\)?" a) (concat (if (match-end 2) (format "@%05d" (string-to-number (match-string 2 a))) "") (if (match-end 4) (format "$%05d" (string-to-number (match-string 4 a))) "") (if (match-end 5) (concat "@@" (match-string 5 a))))) nil [366416 366794]) ("org-table-formula-less-p" function nil ("a" "b") nil "Compare two formulas for sorting." nil [366796 367020]) ("org-table-get-stored-formulas" function nil ("&optional" "noerror") ((user-visible . t)) "Return an alist with the stored formulas directly after current table." nil [367022 368202]) ("org-table-fix-formulas" function nil ("key" "replace" "&optional" "limit" "delta" "remove") nil "Modify the equations after the table structure has been edited.
KEY is \"@\" or \"$\".  REPLACE is an alist of numbers to replace.
For all numbers larger than LIMIT, shift them by DELTA." nil [368204 369286]) ("org-table-get-specials" function nil nil nil "Get the column names and local parameters for this table." nil [369288 372239]) ("org-table-maybe-eval-formula" function nil nil nil "Check if the current field starts with \"=\" or \":=\".
If yes, store the formula and apply it." nil [372241 373126]) ("org-recalc-commands" variable nil nil nil "List of commands triggering the recalculation of a line.
Will be filled automatically during use." nil [373128 373262]) ("org-recalc-marks" variable nil (quote ((" " . "Unmarked: no special line, no automatic recalculation") ("#" . "Automatically recalculate this line upon TAB, RET, and C-c C-c in the line") ("*" . "Recalculate only when entire table is recalculated with `C-u C-c *'") ("!" . "Column name definition line. Reference in formula as $name.") ("$" . "Parameter definition line name=value. Reference in formula as $name.") ("_" . "Names for values in row below this one.") ("^" . "Names for values in row above this one."))) nil nil nil [373264 373794]) ("org-table-rotate-recalc-marks" function nil ("&optional" "newchar") ((user-visible . t)) "Rotate the recalculation mark in the first column.
If in any row, the first field is not consistent with a mark,
insert a new column for the markers.
When there is an active region, change all the lines in the region,
after prompting for the marking character.
After each change, a message will be displayed indicating the meaning
of the new mark." nil [373796 376288]) ("org-table-maybe-recalculate-line" function nil nil ((user-visible . t)) "Recompute the current line if marked for it, and if we haven't just done it." nil [376290 376756]) ("org-table-formula-debug" variable nil nil nil "Non-nil means, debug table formulas.
When nil, simply write \"#ERROR\" in corrupted fields." nil [376758 376890]) ("make-variable-buffer-local" code nil [376891 376944]) ("modes" variable nil nil nil nil nil [376946 376960]) ("org-set-calc-mode" function nil ("var" "&optional" "value") nil (if (stringp var) (setq var (assoc var (quote (("D" calc-angle-mode deg) ("R" calc-angle-mode rad) ("F" calc-prefer-frac t) ("S" calc-symbolic-mode t)))) value (nth 2 var) var (nth 1 var))) nil [376961 377411]) ("org-table-eval-formula" function nil ("&optional" "arg" "equation" "suppress-align" "suppress-const" "suppress-store" "suppress-analysis") ((user-visible . t)) "Replace the table field value at the cursor by the result of a calculation.

This function makes use of Dave Gillespie's Calc package, in my view the
most exciting program ever written for GNU Emacs.  So you need to have Calc
installed in order to use this function.

In a table, this command replaces the value in the current field with the
result of a formula.  It also installs the formula as the \"current\" column
formula, by storing it in a special line below the table.  When called
with a `C-u' prefix, the current field must ba a named field, and the
formula is installed as valid in only this specific field.

When called with two `C-u' prefixes, insert the active equation
for the field back into the current field, so that it can be
edited there.  This is useful in order to use \\[org-table-show-reference]
to check the referenced fields.

When called, the command first prompts for a formula, which is read in
the minibuffer.  Previously entered formulas are available through the
history list, and the last used formula is offered as a default.
These stored formulas are adapted correctly when moving, inserting, or
deleting columns with the corresponding commands.

The formula can be any algebraic expression understood by the Calc package.
For details, see the Org-mode manual.

This function can also be called from Lisp programs and offers
additional arguments: EQUATION can be the formula to apply.  If this
argument is given, the user will not be prompted.  SUPPRESS-ALIGN is
used to speed-up recursive calls by by-passing unnecessary aligns.
SUPPRESS-CONST suppresses the interpretation of constants in the
formula, assuming that this has been done already outside the function.
SUPPRESS-STORE means the formula should not be stored, either because
it is already stored, or because it is a modified equation that should
not overwrite the stored one." nil [377413 386295]) ("org-table-put-field-property" function nil ("prop" "value") nil (save-excursion (put-text-property (progn (skip-chars-backward "^|") (point)) (progn (skip-chars-forward "^|") (point)) prop value)) nil [386297 386531]) ("org-table-get-range" function nil ("desc" "&optional" "tbeg" "col" "highlight") nil "Get a calc vector from a column, accorting to descriptor DESC.
Optional arguments TBEG and COL can give the beginning of the table and
the current column, to avoid unnecessary parsing.
HIGHLIGHT means, just highlight the range." nil [386533 389335]) ("org-table-get-descriptor-line" function nil ("desc" "&optional" "cline" "bline" "table") nil "Analyze descriptor DESC and retrieve the corresponding line number.
The cursor is currently in line CLINE, the table begins in line BLINE,
and TABLE is a vector with line types." nil [389337 391120]) ("org-find-row-type" function nil ("table" "i" "type" "backwards" "relative" "n") nil (let ((l (length table))) (while (> n 0) (while (and (setq i (+ i (if backwards -1 1))) (>= i 0) (< i l) (not (eq (aref table i) type)) (if (and relative (eq (aref table i) (quote hline))) (progn (setq i (- i (if backwards -1 1)) n 1) nil) t))) (setq n (1- n))) (if (or (< i 0) (>= i l)) (error "Row descriptior leads outside table") i)) nil [391122 391646]) ("org-rewrite-old-row-references" function nil ("s") nil (if (string-match "&[-+0-9I]" s) (error "Formula contains old &row reference, please rewrite using @-syntax") s) nil [391648 391815]) ("org-table-make-reference" function nil ("elements" "keep-empty" "numbers" "lispp") nil "Convert list ELEMENTS to something appropriate to insert into formula.
KEEP-EMPTY indicated to keep empty fields, default is to skip them.
NUMBERS indicates that everything should be converted to numbers.
LISPP means to return something appropriate for a Lisp list." nil [391817 393099]) ("org-table-recalculate" function nil ("&optional" "all" "noalign") ((user-visible . t)) "Recalculate the current table line by applying all stored formulas.
With prefix arg ALL, do this for all lines in the table." nil [393101 397970]) ("org-table-iterate" function nil ("&optional" "arg") ((user-visible . t)) "Recalculate the table until it does not change anymore." nil [397972 398721]) ("org-table-formula-substitute-names" function nil ("f") nil "Replace $const with values in string F." nil [398723 399599]) ("org-table-get-constant" function nil ("const") nil "Find the value for a parameter or constant in a formula.
Parameters get priority." nil [399601 400109]) ("org-table-fedit-map" variable nil (let ((map (make-sparse-keymap))) (org-defkey map "" (quote org-table-fedit-finish)) (org-defkey map "" (quote org-table-fedit-finish)) (org-defkey map "" (quote org-table-fedit-finish)) (org-defkey map "" (quote org-table-fedit-abort)) (org-defkey map "?" (quote org-table-show-reference)) (org-defkey map [(meta shift up)] (quote org-table-fedit-line-up)) (org-defkey map [(meta shift down)] (quote org-table-fedit-line-down)) (org-defkey map [(shift up)] (quote org-table-fedit-ref-up)) (org-defkey map [(shift down)] (quote org-table-fedit-ref-down)) (org-defkey map [(shift left)] (quote org-table-fedit-ref-left)) (org-defkey map [(shift right)] (quote org-table-fedit-ref-right)) (org-defkey map [(meta up)] (quote org-table-fedit-scroll-down)) (org-defkey map [(meta down)] (quote org-table-fedit-scroll)) (org-defkey map [(meta tab)] (quote lisp-complete-symbol)) (org-defkey map "\211" (quote lisp-complete-symbol)) (org-defkey map [(tab)] (quote org-table-fedit-lisp-indent)) (org-defkey map "	" (quote org-table-fedit-lisp-indent)) (org-defkey map "" (quote org-table-fedit-toggle-ref-type)) (org-defkey map "}" (quote org-table-fedit-toggle-coordinates)) map) nil nil nil [400111 401387]) ("easy-menu-define" code nil [401389 402573]) ("org-pos" variable nil nil nil nil nil [402575 402591]) ("org-table-edit-formulas" function nil nil ((user-visible . t)) "Edit the formulas of the current table in a separate buffer." nil [402593 404830]) ("org-table-fedit-post-command" function nil nil nil (when (not (memq this-command (quote (lisp-complete-symbol)))) (let ((win (selected-window))) (save-excursion (condition-case nil (org-table-show-reference) (error nil)) (select-window win)))) nil [404832 405107]) ("org-table-formula-to-user" function nil ("s") nil "Convert a formula from internal to user representation." nil [405109 405299]) ("org-table-formula-from-user" function nil ("s") nil "Convert a formula from user to internal representation." nil [405301 405486]) ("org-table-convert-refs-to-rc" function nil ("s") nil "Convert spreadsheet references from AB7 to @7$28.
Works for single references, but also for entire formulas and even the
full TBLFM line." nil [405488 406565]) ("org-table-convert-refs-to-an" function nil ("s") nil "Convert spreadsheet references from to @7$28 to AB7.
Works for single references, but also for entire formulas and even the
full TBLFM line." nil [406567 407338]) ("org-letters-to-number" function nil ("s") nil "Convert a base 26 number represented by letters into an integer.
For example:  AB -> 28." nil [407340 407635]) ("org-number-to-letters" function nil ("n") nil "Convert an integer into a base 26 number represented by letters.
For example:  28 -> AB." nil [407637 407900]) ("org-table-fedit-convert-buffer" function nil ("function") nil "Convert all references in this buffer, using FUNTION." nil [407902 408275]) ("org-table-fedit-toggle-ref-type" function nil nil ((user-visible . t)) "Convert all references in the buffer from B3 to @3$2 and back." nil [408277 408712]) ("org-table-fedit-ref-up" function nil nil ((user-visible . t)) "Shift the reference at point one row/hline up." nil [408714 408854]) ("org-table-fedit-ref-down" function nil nil ((user-visible . t)) "Shift the reference at point one row/hline down." nil [408855 409001]) ("org-table-fedit-ref-left" function nil nil ((user-visible . t)) "Shift the reference at point one field to the left." nil [409002 409151]) ("org-table-fedit-ref-right" function nil nil ((user-visible . t)) "Shift the reference at point one field to the right." nil [409152 409304]) ("org-table-fedit-shift-reference" function nil ("dir") nil (cond ((org-at-regexp-p "\\(\\<[a-zA-Z]\\)&") (if (memq dir (quote (left right))) (org-rematch-and-replace 1 (eq dir (quote left))) (error "Cannot shift reference in this direction"))) ((org-at-regexp-p "\\(\\<[a-zA-Z]\\{1,2\\}\\)\\([0-9]+\\)") (if (memq dir (quote (up down))) (org-rematch-and-replace 2 (eq dir (quote up))) (org-rematch-and-replace 1 (eq dir (quote left))))) ((org-at-regexp-p "\\(@\\|\\.\\.\\)\\([-+]?\\(I+\\>\\|[0-9]+\\)\\)\\(\\$\\([-+]?[0-9]+\\)\\)?") (if (memq dir (quote (up down))) (org-rematch-and-replace 2 (eq dir (quote up)) (match-end 3)) (org-rematch-and-replace 5 (eq dir (quote left)))))) nil [409306 410043]) ("org-rematch-and-replace" function nil ("n" "&optional" "decr" "hline") nil "Re-match the group N, and replace it with the shifted refrence." nil [410045 410425]) ("org-shift-refpart" function nil ("ref" "&optional" "decr" "hline") nil "Shift a refrence part REF.
If DECR is set, decrease the references row/column, else increase.
If HLINE is set, this may be a hline reference, it certainly is not
a translation reference." nil [410427 411623]) ("org-table-fedit-toggle-coordinates" function nil nil ((user-visible . t)) "Toggle the display of coordinates in the refrenced table." nil [411625 411934]) ("org-table-fedit-finish" function nil ("&optional" "arg") ((user-visible . t)) "Parse the buffer for formula definitions and install them.
With prefix ARG, apply the new formulas to the table." nil [411936 413395]) ("org-table-fedit-abort" function nil nil ((user-visible . t)) "Abort editing formulas, without installing the changes." nil [413397 413799]) ("org-table-fedit-lisp-indent" function nil nil ((user-visible . t)) "Pretty-print and re-indent Lisp expressions in the Formula Editor." nil [413801 415215]) ("org-show-positions" variable nil nil nil nil nil [415217 415248]) ("org-table-show-reference" function nil ("&optional" "local") ((user-visible . t)) "Show the location/value of the $ expression at point." nil [415250 421315]) ("org-table-force-dataline" function nil nil nil "Make sure the cursor is in a dataline in a table." nil [421317 421937]) ("org-table-fedit-line-up" function nil nil ((user-visible . t)) "Move cursor one line up in the window showing the table." nil [421939 422090]) ("org-table-fedit-line-down" function nil nil ((user-visible . t)) "Move cursor one line down in the window showing the table." nil [422092 422243]) ("org-table-fedit-move" function nil ("command") nil "Move the cursor in the window shoinw the table.
Use COMMAND to do the motion, repeat if necessary to end up in a data line." nil [422245 422841]) ("org-table-fedit-scroll" function nil ("N") nil (interactive "p") nil [422843 422988]) ("org-table-fedit-scroll-down" function nil ("N") nil (interactive "p") nil [422990 423082]) ("org-table-rectangle-overlays" variable nil nil nil nil nil [423084 423125]) ("org-table-add-rectangle-overlay" function nil ("beg" "end" "&optional" "face") nil "Add a new overlay." nil [423127 423361]) ("org-table-highlight-rectangle" function nil ("&optional" "beg" "end" "face") nil "Highlight rectangular region in a table." nil [423363 424483]) ("org-table-remove-rectangle-highlight" function nil ("&rest" "ignore") nil "Remove the rectangle overlays." nil [424485 424805]) ("org-table-coordinate-overlays" variable nil nil nil "Collects the cooordinate grid overlays, so that they can be removed." nil [424807 424922]) ("make-variable-buffer-local" code nil [424923 424982]) ("org-table-overlay-coordinates" function nil nil ((user-visible . t)) "Add overlays to the table at point, to show row/column coordinates." nil [424984 426336]) ("org-table-toggle-coordinate-overlays" function nil nil ((user-visible . t)) "Toggle the display of Row/Column numbers in tables." nil [426338 426870]) ("org-table-toggle-formula-debugger" function nil nil ((user-visible . t)) "Toggle the formula debugger in tables." nil [426872 427140]) ("orgtbl-mode" variable nil nil nil "Variable controlling `orgtbl-mode', a minor mode enabling the `org-mode'
table editor in arbitrary modes." nil [428635 428769]) ("make-variable-buffer-local" code nil [428770 428811]) ("orgtbl-mode-map" variable nil (make-keymap) nil "Keymap for `orgtbl-mode'." nil [428813 428881]) ("turn-on-orgtbl" function nil nil nil "Unconditionally turn on `orgtbl-mode'." nil [428898 428984]) ("org-old-auto-fill-inhibit-regexp" variable nil nil nil "Local variable used by `orgtbl-mode'" nil [428986 429072]) ("orgtbl-line-start-regexp" variable nil "[ 	]*\\(|\\|#\\+\\(TBLFM\\|ORGTBL\\):\\)" ((const . t)) "Matches a line belonging to an orgtbl." nil [429074 429196]) ("orgtbl-extra-font-lock-keywords" variable nil (list (list (concat "^" orgtbl-line-start-regexp ".*") 0 (quote (quote org-table)) (quote prepend))) ((const . t)) "Extra font-lock-keywords to be added when orgtbl-mode is active." nil [429198 429412]) ("orgtbl-mode" function nil ("&optional" "arg") ((user-visible . t)) "The `org-mode' table editor as a minor mode for use in other modes." nil [429429 431523]) ("org-cleanup-narrow-column-properties" function nil nil nil "Remove all properties related to narrow-column invisibility." nil [431525 432120]) ("put" code nil [432153 432183]) ("put" code nil [432184 432229]) ("add-minor-mode" code nil [432230 432285]) ("orgtbl-make-binding" function nil ("fun" "n" "&rest" "keys") nil "Create a function for binding in the table minor mode.
FUN is the command to call inside a table.  N is used to create a unique
command name.  KEYS are keys that should be checked in for a command
to execute outside of tables." nil [432287 433390]) ("orgtbl-error" function nil nil ((user-visible . t)) "Error when there is no default binding for a table key." nil [433392 433546]) ("orgtbl-setup" function nil nil nil "Setup orgtbl keymaps." nil [433548 440273]) ("orgtbl-ctrl-c-ctrl-c" function nil ("arg") ((user-visible . t)) "If the cursor is inside a table, realign the table.
It it is a table to be sent away to a receiver, do it.
With prefix arg, also recompute table." nil [440275 441334]) ("orgtbl-tab" function nil ("arg") ((user-visible . t)) "Justification and field motion for `orgtbl-mode'." nil [441336 441533]) ("orgtbl-ret" function nil nil ((user-visible . t)) "Justification and field motion for `orgtbl-mode'." nil [441535 441683]) ("orgtbl-self-insert-command" function nil ("N") ((user-visible . t)) "Like `self-insert-command', use overwrite-mode for whitespace in tables.
If the cursor is in a table looking at whitespace, the whitespace is
overwritten, and the table is not marked as requiring realignment." nil [441685 442844]) ("org-force-self-insert" function nil ("N") ((user-visible . t)) "Needed to enforce self-insert under remapping." nil [442846 442976]) ("orgtbl-exp-regexp" variable nil "^\\([-+]?[0-9][0-9.]*\\)[eE]\\([-+]?[0-9]+\\)$" nil "Regula expression matching exponentials as produced by calc." nil [442978 443118]) ("org-table-clean-did-remove-column" variable nil nil nil nil nil [443120 443166]) ("orgtbl-export" function nil ("table" "target") nil (let ((func (intern (concat "orgtbl-to-" (symbol-name target)))) (lines (org-split-string table "[ 	]*
[ 	]*")) org-table-last-alignment org-table-last-column-widths maxcol column) (if (not (fboundp func)) (error "Cannot export orgtbl table to %s" target)) (setq lines (org-table-clean-before-export lines)) (setq table (mapcar (lambda (x) (if (string-match org-table-hline-regexp x) (quote hline) (org-split-string (org-trim x) "\\s-*|\\s-*"))) lines)) (setq maxcol (apply (quote max) (mapcar (lambda (x) (if (listp x) (length x) 0)) table))) (loop for i from (1- maxcol) downto 0 do (setq column (mapcar (lambda (x) (if (listp x) (nth i x) nil)) table)) (setq column (delq nil column)) (push (apply (quote max) (mapcar (quote string-width) column)) org-table-last-column-widths) (push (> (/ (apply (quote +) (mapcar (lambda (x) (if (string-match org-table-number-regexp x) 1 0)) column)) maxcol) org-table-number-fraction) org-table-last-alignment)) (funcall func table nil)) nil [443168 444362]) ("orgtbl-send-table" function nil ("&optional" "maybe") ((user-visible . t)) "Send a tranformed version of this table to the receiver position.
With argument MAYBE, fail quietly if no transformation is defined for
this table." nil [444364 447157]) ("org-remove-by-index" function nil ("list" "indices" "&optional" "i0") nil "Remove the elements in LIST with indices in INDICES.
First element has index 0, or I0 if given." nil [447159 447592]) ("orgtbl-toggle-comment" function nil nil ((user-visible . t)) "Comment or uncomment the orgtbl at point." nil [447594 448407]) ("orgtbl-insert-radio-table" function nil nil ((user-visible . t)) "Insert a radio table template appropriate for this major mode." nil [448409 448922]) ("org-get-param" function nil ("params" "header" "i" "sym" "&optional" "hsym") nil "Get parameter value for symbol SYM.
If this is a header line, actually get the value for the symbol with an
additional \"h\" inserted after the colon.
If the value is a protperty list, get the element for the current column.
Assumes variables VAL, PARAMS, HEAD and I to be scoped into the function." nil [448924 449433]) ("orgtbl-to-generic" function nil ("table" "params") ((user-visible . t)) "Convert the orgtbl-mode TABLE to some other format.
This generic routine can be used for many standard cases.
TABLE is a list, each entry either the symbol `hline' for a horizontal
separator line, or a list of fields for that line.
PARAMS is a property list of parameters that can influence the conversion.
For the generic converter, some parameters are obligatory:  You need to
specify either :lfmt, or all of (:lstart :lend :sep).  If you do not use
:splice, you must have :tstart and :tend.

Valid parameters are

:tstart     String to start the table.  Ignored when :splice is t.
:tend       String to end the table.  Ignored when :splice is t.

:splice     When set to t, return only table body lines, don't wrap
            them into :tstart and :tend.  Default is nil.

:hline      String to be inserted on horizontal separation lines.
            May be nil to ignore hlines.

:lstart     String to start a new table line.
:lend       String to end a table line
:sep        Separator between two fields
:lfmt       Format for entire line, with enough %s to capture all fields.
            If this is present, :lstart, :lend, and :sep are ignored.
:fmt        A format to be used to wrap the field, should contain
            %s for the original field value.  For example, to wrap
            everything in dollars, you could use :fmt \"$%s$\".
            This may also be a property list with column numbers and
            formats. for example :fmt (2 \"$%s$\" 4 \"%s%%\")

:hlstart :hlend :hlsep :hlfmt :hfmt
            Same as above, specific for the header lines in the table.
            All lines before the first hline are treated as header.
            If any of these is not present, the data line value is used.

:efmt       Use this format to print numbers with exponentials.
            The format should have %s twice for inserting mantissa
            and exponent, for example \"%s\\\\times10^{%s}\".  This
            may also be a property list with column numbers and
            formats.  :fmt will still be applied after :efmt.

In addition to this, the parameters :skip and :skipcols are always handled
directly by `orgtbl-send-table'.  See manual." nil [449435 453329]) ("orgtbl-to-latex" function nil ("table" "params") nil "Convert the orgtbl-mode TABLE to LaTeX.
TABLE is a list, each entry either the symbol `hline' for a horizontal
separator line, or a list of fields for that line.
PARAMS is a property list of parameters that can influence the conversion.
Supports all parameters from `orgtbl-to-generic'.  Most important for
LaTeX are:

:splice    When set to t, return only table body lines, don't wrap
           them into a tabular environment.  Default is nil.

:fmt       A format to be used to wrap the field, should contain %s for the
           original field value.  For example, to wrap everything in dollars,
           use :fmt \"$%s$\".  This may also be a property list with column
           numbers and formats. for example :fmt (2 \"$%s$\" 4 \"%s%%\")

:efmt      Format for transforming numbers with exponentials.  The format
           should have %s twice for inserting mantissa and exponent, for
           example \"%s\\\\times10^{%s}\".  LaTeX default is \"%s\\\\,(%s)\".
           This may also be a property list with column numbers and formats.

The general parameters :skip and :skipcols have already been applied when
this function is called." nil [453331 454940]) ("orgtbl-to-html" function nil ("table" "params") nil "Convert the orgtbl-mode TABLE to LaTeX.
TABLE is a list, each entry either the symbol `hline' for a horizontal
separator line, or a list of fields for that line.
PARAMS is a property list of parameters that can influence the conversion.
Currently this function recognizes the following parameters:

:splice    When set to t, return only table body lines, don't wrap
           them into a <table> environment.  Default is nil.

The general parameters :skip and :skipcols have already been applied when
this function is called.  The function does *not* use `orgtbl-to-generic',
so you cannot specify parameters for it." nil [454942 456171]) ("orgtbl-to-texinfo" function nil ("table" "params") nil "Convert the orgtbl-mode TABLE to TeXInfo.
TABLE is a list, each entry either the symbol `hline' for a horizontal
separator line, or a list of fields for that line.
PARAMS is a property list of parameters that can influence the conversion.
Supports all parameters from `orgtbl-to-generic'.  Most important for
TeXInfo are:

:splice nil/t      When set to t, return only table body lines, don't wrap
                   them into a multitable environment.  Default is nil.

:fmt fmt           A format to be used to wrap the field, should contain
                   %s for the original field value.  For example, to wrap
                   everything in @kbd{}, you could use :fmt \"@kbd{%s}\".
                   This may also be a property list with column numbers and
                   formats. for example :fmt (2 \"@kbd{%s}\" 4 \"@code{%s}\").

:cf \"f1 f2..\"    The column fractions for the table.  Bye default these
                   are computed automatically from the width of the columns
                   under org-mode.

The general parameters :skip and :skipcols have already been applied when
this function is called." nil [456173 457915]) ("org-link-expand-abbrev" function nil ("link") nil "Apply replacements as defined in `org-link-abbrev-alist." nil [457958 458618]) ("org-insert-link-history" variable nil nil nil "Minibuffer history for links inserted with `org-insert-link'." nil [458653 458755]) ("org-stored-links" variable nil nil nil "Contains the links stored with `org-store-link'." nil [458757 458839]) ("org-store-link-plist" variable nil nil nil "Plist with info about the most recently link created with `org-store-link'." nil [458841 458954]) ("org-link-protocols" variable nil nil nil "Link protocols added to Org-mode using `org-add-link-type'." nil [458956 459051]) ("org-store-link-functions" variable nil nil nil "List of functions that are called to create and store a link.
Each function will be called in turn until one returns a non-nil
value.  Each function should check if it is responsible for creating
this link (for example by looking at the major mode).
If not, it must exit and return nil.
If yes, it should return a non-nil value after a calling
`org-store-link-properties' with a list of properties and values.
Special properties are:

:type         The link prefix. like \"http\".  This must be given.
:link         The link, like \"http://www.astro.uva.nl/~dominik\".
              This is obligatory as well.
:description  Optional default description for the second pair
              of brackets in an Org-mode link.  The user can still change
              this when inserting this link into an Org-mode buffer.

In addition to these, any additional properties can be specified
and then used in remember templates." nil [459053 460014]) ("org-add-link-type" function nil ("type" "&optional" "follow" "publish") nil "Add TYPE to the list of `org-link-types'.
Re-compute all regular expressions depending on `org-link-types'
FOLLOW and PUBLISH are two functions.  Both take the link path as
an argument.
FOLLOW should do whatever is necessary to follow the link, for example
to find a file or display a mail message.
PUBLISH takes the path and retuns the string that should be used when
this document is published." nil [460016 460617]) ("org-add-agenda-custom-command" function nil ("entry") nil "Replace or add a command in `org-agenda-custom-commands'.
This is mostly for hacking and trying a new command - once the command
works you probably want to add it to `org-agenda-custom-commands' for good." nil [460619 461028]) ("org-store-link" function nil ("arg") ((user-visible . t)) "\\<org-mode-map>Store an org-link to the current location.
This link can later be inserted into an org-buffer with
\\[org-insert-link].
For some link types, a prefix arg is interpreted:
For links to usenet articles, arg negates `org-usenet-links-prefer-google'.
For file links, arg negates `org-context-in-file-links'." nil [461045 471776]) ("org-store-link-props" function nil ("&rest" "plist") nil "Store link properties, extract names and addresses." nil [471778 472601]) ("org-email-link-description" function nil ("&optional" "fmt") nil "Return the description part of an email link.
This takes information from `org-store-link-plist' and formats it
according to FMT (default from `org-email-link-description-format')." nil [472603 473781]) ("org-make-org-heading-search-string" function nil ("&optional" "string" "heading") ((user-visible . t)) "Make search string for STRING or current headline." nil [473783 474760]) ("org-make-link" function nil ("&rest" "strings") nil "Concatenate STRINGS." nil [474762 474850]) ("org-make-link-string" function nil ("link" "&optional" "description") nil "Make a link with brackets, consisting of LINK and DESCRIPTION." nil [474852 475599]) ("org-link-escape-chars" variable nil (quote ((" " . "%20") ("[" . "%5B") ("]" . "%5d") ("\340" . "%E0") ("\342" . "%E2") ("\347" . "%E7") ("\350" . "%E8") ("\351" . "%E9") ("\352" . "%EA") ("\356" . "%EE") ("\364" . "%F4") ("\371" . "%F9") ("\373" . "%FB") (";" . "%3B") ("?" . "%3F") ("=" . "%3D") ("+" . "%2B"))) ((const . t)) "Association list of escapes for some characters problematic in links.
This is the list that is used for internal purposes." nil [475601 476162]) ("org-link-escape-chars-browser" variable nil (quote ((" " . "%20"))) ((const . t)) "Association list of escapes for some characters problematic in links.
This is the list that is used before handing over to the browser." nil [476164 476363]) ("org-link-escape" function nil ("text" "&optional" "table") nil "Escape charaters in TEXT that are problematic for links." nil [476365 476815]) ("org-link-unescape" function nil ("text" "&optional" "table") nil "Reverse the action of `org-link-escape'." nil [476817 477254]) ("org-xor" function nil ("a" "b") nil "Exclusive or." nil [477256 477314]) ("org-get-header" function nil ("header") nil "Find a header field in the current buffer." nil [477316 478210]) ("org-fixup-message-id-for-http" function nil ("s") nil "Replace special characters in a message id, so it can be used in an http query." nil [478213 478558]) ("org-insert-link-global" function nil nil ((user-visible . t)) "Insert a link like Org-mode does.
This command can be called in any mode to insert a link in Org-mode syntax." nil [478575 478784]) ("org-insert-link" function nil ("&optional" "complete-file") ((user-visible . t)) "Insert a link.  At the prompt, enter the link.

Completion can be used to select a link previously stored with
`org-store-link'.  When the empty string is entered (i.e. if you just
press RET at the prompt), the link defaults to the most recently
stored link.  As SPC triggers completion in the minibuffer, you need to
use M-SPC or C-q SPC to force the insertion of a space character.

You will also be prompted for a description, and if one is given, it will
be displayed in the buffer instead of the link.

If there is already a link at point, this command will allow you to edit link
and description parts.

With a \\[universal-argument] prefix, prompts for a file to link to.  The file name can be
selected using completion.  The path to the file will be relative to
the current directory if the file is in the current directory or a
subdirectory.  Otherwise, the link will be the absolute path as
completed in the minibuffer (i.e. normally ~/path/to/file).

With two \\[universal-argument] prefixes, enforce an absolute path even if the file
is in the current directory or below.
With three \\[universal-argument] prefixes, negate the meaning of
`org-keep-stored-link-after-insertion'." nil [478786 486083]) ("org-completing-read" function nil ("&rest" "args") nil (let ((minibuffer-local-completion-map (copy-keymap minibuffer-local-completion-map))) (org-defkey minibuffer-local-completion-map " " (quote self-insert-command)) (apply (quote completing-read) args)) nil [486085 486332]) ("org-link-search-failed" variable nil nil nil nil nil [486363 486398]) ("org-next-link" function nil nil ((user-visible . t)) "Move forward to the next link.
If the link is in hidden text, expose it." nil [486400 487089]) ("org-previous-link" function nil nil ((user-visible . t)) "Move backward to the previous link.
If the link is in hidden text, expose it." nil [487091 487784]) ("org-find-file-at-mouse" function nil ("ev") ((user-visible . t)) "Open file link or URL at mouse." nil [487786 487932]) ("org-open-at-mouse" function nil ("ev") ((user-visible . t)) "Open file link or URL at mouse." nil [487934 488065]) ("org-window-config-before-follow-link" variable nil nil nil "The window configuration before following a link.
This is saved in case the need arises to restore it." nil [488067 488223]) ("org-open-link-marker" variable nil (make-marker) nil "Marker pointing to the location where `org-open-at-point; was called." nil [488225 488342]) ("org-open-at-point-global" function nil nil ((user-visible . t)) "Follow a link like Org-mode does.
This command can be called in any mode to follow a link that has
Org-mode syntax." nil [488359 488578]) ("org-open-at-point" function nil ("&optional" "in-emacs") ((user-visible . t)) "Open link at or after point.
If there is no link at point, this function will search forward up to
the end of the current subtree.
Normally, files will be opened by an appropriate application.  If the
optional argument IN-EMACS is non-nil, Emacs will visit the file." nil [488580 496438]) ("org-create-file-search-functions" variable nil nil nil "List of functions to construct the right search string for a file link.
These functions are called in turn with point at the location to
which the link should point.

A function in the hook should first test if it would like to
handle this file type, for example by checking the major-mode or
the file extension.  If it decides not to handle this file, it
should just return nil to give other functions a chance.  If it
does handle the file, it must return the search string to be used
when following the link.  The search string will be part of the
file link, given after a double colon, and `org-open-at-point'
will automatically search for it.  If special measures must be
taken to make the search successful, another function should be
added to the companion hook `org-execute-file-search-functions',
which see.

A function in this hook may also use `setq' to set the variable
`description' to provide a suggestion for the descriptive text to
be used for this link when it gets inserted into an Org-mode
buffer with \\[org-insert-link]." nil [496457 497547]) ("org-execute-file-search-functions" variable nil nil nil "List of functions to execute a file search triggered by a link.

Functions added to this hook must accept a single argument, the
search string that was part of the file link, the part after the
double colon.  The function must first check if it would like to
handle this search, for example by checking the major-mode or the
file extension.  If it decides not to handle this search, it
should just return nil to give other functions a chance.  If it
does handle the search, it must return a non-nil value to keep
other functions from trying.

Each function can access the current prefix argument through the
variable `current-prefix-argument'.  Note that a single prefix is
used to force opening a link in Emacs, so it may be good to only
use a numeric or double prefix to guide the search function.

In case this is needed, a function in this hook can also restore
the window configuration before `org-open-at-point' was called using:

    (set-window-configuration org-window-config-before-follow-link)" nil [497549 498604]) ("org-link-search" function nil ("s" "&optional" "type" "avoid-pos") nil "Search for a link search option.
If S is surrounded by forward slashes, it is interpreted as a
regular expression.  In org-mode files, this will create an `org-occur'
sparse tree.  In ordinary files, `occur' will be used to list matches.
If the current buffer is in `dired-mode', grep will be used to search
in all files.  If AVOID-POS is given, ignore matches near that position." nil [498606 502456]) ("org-search-not-self" function nil ("group" "&rest" "args") nil "Execute `re-search-forward', but only accept matches that do not
enclose the position of `org-open-link-marker'." nil [502458 503409]) ("org-get-buffer-for-internal-link" function nil ("buffer") nil "Return a buffer to be used for displaying the link target of internal links." nil [503411 504073]) ("org-do-occur" function nil ("regexp" "&optional" "cleanup") nil "Call the Emacs command `occur'.
If CLEANUP is non-nil, remove the printout of the regular expression
in the *Occur* buffer.  This is useful if the regex is long and not useful
to read." nil [504075 504826]) ("org-mark-ring" variable nil nil nil "Mark ring for positions before jumps in Org-mode." nil [504863 504943]) ("org-mark-ring-last-goto" variable nil nil nil "Last position in the mark ring used to go back." nil [504944 505032]) ("setq" code nil [505060 505112]) ("loop" code nil [505141 505228]) ("setcdr" code nil [505229 505308]) ("org-mark-ring-push" function nil ("&optional" "pos" "buffer") ((user-visible . t)) "Put the current position or POS into the mark ring and rotate it." nil [505310 505772]) ("org-mark-ring-goto" function nil ("&optional" "n") ((user-visible . t)) "Jump to the previous position in the mark ring.
With prefix arg N, jump back that many stored positions.  When
called several times in succession, walk through the entire ring.
Org-mode commands jumping to a different position in the current file,
or to another Org-mode file, automatically push the old position
onto the ring." nil [505774 506518]) ("org-remove-angle-brackets" function nil ("s") nil (if (equal (substring s 0 1) "<") (setq s (substring s 1))) nil [506520 506687]) ("org-add-angle-brackets" function nil ("s") nil (if (equal (substring s 0 1) "<") nil (setq s (concat "<" s))) nil [506688 506855]) ("org-follow-timestamp-link" function nil nil nil (cond ((org-at-date-range-p t) (let ((org-agenda-start-on-weekday) (t1 (match-string 1)) (t2 (match-string 2))) (setq t1 (time-to-days (org-time-string-to-time t1)) t2 (time-to-days (org-time-string-to-time t2))) (org-agenda-list nil t1 (1+ (- t2 t1))))) ((org-at-timestamp-p t) (org-agenda-list nil (time-to-days (org-time-string-to-time (substring (match-string 1) 0 10))) 1)) (t (error "This should not happen"))) nil [506887 507464]) ("org-follow-bbdb-link" function nil ("name") nil "Follow a BBDB link to NAME." nil [507467 508445]) ("org-follow-info-link" function nil ("name") nil "Follow an info file & node link  to NAME." nil [508447 508909]) ("org-follow-gnus-link" function nil ("&optional" "group" "article") nil "Follow a Gnus link to GROUP and ARTICLE." nil [508911 509345]) ("org-follow-vm-link" function nil ("&optional" "folder" "article" "readonly") nil "Follow a VM link to FOLDER and ARTICLE." nil [509347 510727]) ("org-follow-wl-link" function nil ("folder" "article") nil "Follow a Wanderlust link to FOLDER and ARTICLE." nil [510729 511488]) ("org-follow-rmail-link" function nil ("folder" "article") nil "Follow an RMAIL link to FOLDER and ARTICLE." nil [511490 512363]) ("org-mhe-get-message-real-folder" function nil nil nil "Return the name of the current message real folder, so if you use
sequences, it will now work." nil [512408 513588]) ("org-mhe-get-message-folder-from-index" function nil nil nil "Returns the name of the message folder in a index folder buffer." nil [513590 513832]) ("org-mhe-get-message-folder" function nil nil nil "Return the name of the current message folder.  Be careful if you
use sequences." nil [513834 514107]) ("org-mhe-get-message-num" function nil nil nil "Return the number of the current message.  Be careful if you
use sequences." nil [514109 514387]) ("org-mhe-get-header" function nil ("header") nil "Return a header of the message in folder mode. This will create a
show buffer for the corresponding message. If you have a more clever
idea..." nil [514389 515090]) ("org-follow-mhe-link" function nil ("folder" "article") nil "Follow an MHE link to FOLDER and ARTICLE.
If ARTICLE is nil FOLDER is shown.  If the configuration variable
`org-mhe-search-all-folders' is t and `mh-searcher' is pick,
ARTICLE is searched in all folders.  Indexed searches (swish++,
namazu, and others supported by MH-E) will always search in all
folders." nil [515092 516146]) ("org-create-file-search-in-bibtex" function nil nil nil "Create the search string and description for a BibTeX database entry." nil [516284 517458]) ("org-execute-file-search-in-bibtex" function nil ("s") nil "Find the link search string S as a key for a database entry." nil [517460 518496]) ("add-hook" code nil [518547 518625]) ("add-hook" code nil [518626 518706]) ("org-open-file" function nil ("path" "&optional" "in-emacs" "line" "search") nil "Open the file at PATH.
First, this expands any special file name abbreviations.  Then the
configuration variable `org-file-apps' is checked if it contains an
entry for this file type, and if yes, the corresponding command is launched.
If no application is found, Emacs simply visits the file.
With optional argument IN-EMACS, Emacs will visit the file.
Optional LINE specifies a line to go to, optional SEARCH a string to
search for.  If LINE or SEARCH is given, the file will always be
opened in Emacs.
If the file does not exist, an error is thrown." nil [518763 521733]) ("org-default-apps" function nil nil nil "Return the default applications for this operating system." nil [521735 522003]) ("ange-ftp-name-format" variable nil nil nil nil nil [522005 522034]) ("org-file-remote-p" function nil ("file") nil "Test whether FILE specifies a location on a remote system.
Return non-nil if the location is indeed remote.

For example, the filename \"/user@host:/foo\" specifies a location
on the system \"/user@host:\"." nil [522069 522604]) ("org-remember-annotation" function nil nil nil "Return a link to the current location as an annotation for remember.el.
If you are using Org-mode files as target for data storage with
remember.el, then the annotations should include a link compatible with the
conventions in Org-mode.  This function returns such a link." nil [522650 522984]) ("org-remember-help" variable nil "Select a destination location for the note.
UP/DOWN=headline   TAB=cycle visibility  [Q]uit   RET/<left>/<right>=Store
RET on headline   -> Store as sublevel entry to current headline
RET at beg-of-buf -> Append to file as level 2 headline
<left>/<right>    -> before/after current headline, same headings level" ((const . t)) nil nil [522986 523328]) ("org-remember-previous-location" variable nil nil nil nil nil [523330 523373]) ("org-force-remember-template-char" variable nil nil nil nil nil [523374 523415]) ("org-remember-apply-template" function nil ("&optional" "use-char" "skip-interactive") nil "Initialize *remember* buffer with template, invoke `org-mode'.
This function should be placed into `remember-mode-hook' and in fact requires
to be run from that hook to fucntion properly." nil [523454 531261]) ("org-remember" function nil ("&optional" "org-force-remember-template-char") ((user-visible . t)) "Call `remember'.  If this is already a remember buffer, re-apply template.
If there is an active region, make sure remember uses it as initial content
of the remember buffer." nil [531278 532077]) ("org-note-abort" variable nil nil nil nil nil [532079 532106]) ("org-remember-handler" function nil nil nil "Store stuff from remember.el into an org file.
First prompts for an org file.  If the user just presses return, the value
of `org-default-notes-file' is used.
Then the command offers the headings tree of the selected file in order to
file the text at a specific location.
You can either immediately press RET to get the note appended to the
file, or you can use vertical cursor motion and visibility cycling (TAB) to
find a better place.  Then press RET or <left> or <right> in insert the note.

Key      Cursor position   Note gets inserted
-----------------------------------------------------------------------------
RET      buffer-start      as level 1 heading at end of file
RET      on headline       as sublevel of the heading at cursor
RET      no heading        at cursor position, level taken from context.
                           Or use prefix arg to specify level manually.
<left>   on headline       as same level, before current heading
<right>  on headline       as same level, after current heading

So the fastest way to store the note is to press RET RET to append it to
the default file.  This way your current train of thought is not
interrupted, in accordance with the principles of remember.el.
You can also get the fast execution without prompting by using
C-u C-c C-c to exit the remember buffer.  See also the variable
`org-remember-store-without-prompt'.

Before being stored away, the function ensures that the text has a
headline, i.e. a first line that starts with a \"*\".  If not, a headline
is constructed from the current date and some additional data.

If the variable `org-adapt-indentation' is non-nil, the entire text is
also indented so that it starts in the same column as the headline
(i.e. after the stars).

See also the variable `org-reverse-note-order'." nil [532144 539819]) ("org-get-org-file" function nil nil nil "Read a filename, with default directory `org-directory'." nil [539880 540179]) ("org-notes-order-reversed-p" function nil nil nil "Check if the current file should receive notes in reversed order." nil [540181 540664]) ("org-find-dblock" function nil ("name") nil "Find the first dynamic block with name NAME in the buffer.
If not found, stay at current position and return nil." nil [540687 541107]) ("org-dblock-start-re" variable nil "^#\\+BEGIN:[ 	]+\\(\\S-+\\)\\([ 	]+\\(.*\\)\\)?" ((const . t)) "Matches the startline of a dynamic block, with parameters." nil [541109 541256]) ("org-dblock-end-re" variable nil "^#\\+END\\([: 	
]\\|$\\)" ((const . t)) "Matches the end of a dyhamic block." nil [541258 541357]) ("org-create-dblock" function nil ("plist") nil "Create a dynamic block section, with parameters taken from PLIST.
PLIST must containe a :name entry which is used as name of the block." nil [541359 541825]) ("org-prepare-dblock" function nil nil nil "Prepare dynamic block for refresh.
This empties the block, puts the cursor at the insert position and returns
the property list including an extra property :name with the block name." nil [541827 542528]) ("org-map-dblocks" function nil ("&optional" "command") nil "Apply COMMAND to all dynamic blocks in the current buffer.
If COMMAND is not given, use `org-update-dblock'." nil [542530 543164]) ("org-dblock-update" function nil ("&optional" "arg") ((user-visible . t)) "User command for updating dynamic blocks.
Update the dynamic block at point.  With prefix ARG, update all dynamic
blocks in the buffer." nil [543166 543509]) ("org-update-dblock" function nil nil nil "Update the dynamic block at point
This means to empty the block, parse for parameters and then call
the correct writing function." nil [543511 544100]) ("org-beginning-of-dblock" function nil nil nil "Find the beginning of the dynamic block at point.
Error if there is no scuh block at point." nil [544102 544571]) ("org-update-all-dblocks" function nil nil nil "Update all dynamic blocks in the buffer.
This function can be used in a hook." nil [544573 544751]) ("org-additional-option-like-keywords" variable nil (quote ("BEGIN_HTML" "BEGIN_LaTeX" "END_HTML" "END_LaTeX" "ORGTBL" "HTML:" "LaTeX:" "BEGIN:" "END:" "DATE:")) ((const . t)) nil nil [544771 544926]) ("org-complete" function nil ("&optional" "arg") ((user-visible . t)) "Perform completion on word at point.
At the beginning of a headline, this completes TODO keywords as given in
`org-todo-keywords'.
If the current word is preceded by a backslash, completes the TeX symbols
that are supported for HTML support.
If the current word is preceded by \"#+\", completes special words for
setting file options.
In the line after \"#+STARTUP:, complete valid keywords.\"
At all other locations, this simply calls the value of
`org-completion-fallback-command'." nil [544928 550403]) ("org-toggle-comment" function nil nil ((user-visible . t)) "Change the COMMENT state of an entry." nil [550436 550863]) ("org-last-todo-state-is-todo" variable nil nil nil "This is non-nil when the last TODO state change led to a TODO state.
If the last change removed the TODO tag or switched to DONE, then
this is nil." nil [550865 551057]) ("org-setting-tags" variable nil nil nil nil nil [551059 551088]) ("org-property-or-variable-value" function nil ("var" "&optional" "inherit") nil "Check if there is a property fixing the value of VAR.
If yes, return this value.  If not, return the current value of the variable." nil [551134 551502]) ("org-parse-local-options" function nil ("string" "var") nil "Parse STRING for startup setting relevant for variable VAR." nil [551504 552308]) ("org-blocker-hook" variable nil nil nil "Hook for functions that are allowed to block a state change.

Each function gets as its single argument a property list, see
`org-trigger-hook' for more information about this list.

If any of the functions in this hook returns nil, the state change
is blocked." nil [552310 552605]) ("org-trigger-hook" variable nil nil nil "Hook for functions that are triggered by a state change.

Each function gets as its single argument a property list with at least
the following elements:

 (:type type-of-change :position pos-at-entry-start
  :from old-state :to new-state)

Depending on the type, more properties may be present.

This mechanism is currently implemented for:

TODO state changes
------------------
:type  todo-state-change
:from  previous state (keyword as a string), or nil
:to    new state (keyword as a string), or nil" nil [552607 553145]) ("org-todo" function nil ("&optional" "arg") ((user-visible . t)) "Change the TODO state of an item.
The state of an item is given by a keyword at the start of the heading,
like
     *** TODO Write paper
     *** DONE Call mom

The different keywords are specified in the variable `org-todo-keywords'.
By default the available states are \"TODO\" and \"DONE\".
So for this example: when the item starts with TODO, it is changed to DONE.
When it starts with DONE, the DONE is removed.  And when neither TODO nor
DONE are present, add TODO at the beginning of the heading.

With C-u prefix arg, use completion to determine the new state.
With numeric prefix arg, switch to that state.

For calling through lisp, arg is also interpreted in the following way:
'none             -> empty state
\"\"(empty string)  -> switch to empty state
'done             -> switch to DONE
'nextset          -> switch to the next set of keywords
'previousset      -> switch to the previous set of keywords
\"WAITING\"         -> switch to the specified keyword, but only if it
                     really is a member of `org-todo-keywords'." nil [553148 561936]) ("org-get-todo-sequence-head" function nil ("kwd") nil "Return the head of the TODO sequence to which KWD belongs.
If KWD is not set, check if there is a text property remembering the
right sequence." nil [561938 562569]) ("org-fast-todo-selection" function nil nil nil "Fast TODO keyword selection with single keys.
Returns the new TODO keyword, or nil if no state change should occur." nil [562571 564867]) ("org-get-repeat" function nil nil nil "Check if tere is a deadline/schedule with repeater in this entry." nil [564869 565168]) ("org-last-changed-timestamp" variable nil nil nil nil nil [565170 565205]) ("org-log-post-message" variable nil nil nil nil nil [565206 565235]) ("org-auto-repeat-maybe" function nil nil nil "Check if the current headline contains a repeated deadline/schedule.
If yes, set TODO state back to what it was and change the base date
of repeating deadline/scheduled time stamps to new date.
This function should be run in the `org-after-todo-state-change-hook'." nil [565236 567171]) ("org-show-todo-tree" function nil ("arg") ((user-visible . t)) "Make a compact tree which shows all headlines marked with TODO.
The tree will show the lines where the regexp matches, and all higher
headlines above the match.
With \\[universal-argument] prefix, also show the DONE entries.
With a numeric prefix N, construct a sparse tree for the Nth element
of `org-todo-keywords-1'." nil [567173 568356]) ("org-deadline" function nil ("&optional" "remove") ((user-visible . t)) "Insert the \"DEADLINE:\" string with a timestamp to make a deadline.
With argument REMOVE, remove any deadline from the item." nil [568358 568726]) ("org-schedule" function nil ("&optional" "remove") ((user-visible . t)) "Insert the SCHEDULED: string with a timestamp to schedule a TODO item.
With argument REMOVE, remove any scheduling date from the item." nil [568728 569105]) ("org-add-planning-info" function nil ("what" "&optional" "time" "&rest" "remove") ((user-visible . t)) "Insert new timestamp with keyword in the line directly after the headline.
WHAT indicates what kind of time stamp to add.  TIME indicated the time to use.
If non is given, the user is prompted for a date.
REMOVE indicates what kind of entries to remove.  An old WHAT entry will also
be removed." nil [569107 572293]) ("org-log-note-marker" variable nil (make-marker) nil nil nil [572295 572337]) ("org-log-note-purpose" variable nil nil nil nil nil [572338 572371]) ("org-log-note-state" variable nil nil nil nil nil [572372 572403]) ("org-log-note-window-configuration" variable nil nil nil nil nil [572404 572450]) ("org-log-note-return-to" variable nil (make-marker) nil nil nil [572451 572496]) ("org-log-post-message" variable nil nil nil "Message to be displayed after a log note has been stored.
The auto-repeater uses this." nil [572497 572621]) ("org-add-log-maybe" function nil ("&optional" "purpose" "state" "findpos") nil "Set up the post command hook to take a note." nil [572623 573475]) ("org-skip-over-state-notes" function nil nil nil "Skip past the list of State notes in an entry." nil [573477 573739]) ("org-add-log-note" function nil ("&optional" "purpose") nil "Pop up a window for taking a note, and add this note later at point." nil [573741 574770]) ("org-store-log-note" function nil nil nil "Finish taking a log note, and insert it to where it belongs." nil [574772 576815]) ("org-sparse-tree" function nil ("&optional" "arg") ((user-visible . t)) "Create a sparse tree, prompt for the details.
This command can create sparse trees.  You first need to select the type
of match used to create the tree:

t      Show entries with a specific TODO keyword.
T      Show entries selected by a tags match.
p      Enter a property name and its value (both with completion on existing
       names/values) and show entries with that property.
r      Show entries matching a regular expression" nil [576879 578197]) ("org-occur-highlights" variable nil nil nil nil nil [578199 578232]) ("make-variable-buffer-local" code nil [578233 578283]) ("org-occur" function nil ("regexp" "&optional" "keep-previous" "callback") ((user-visible . t)) "Make a compact tree which shows all matches of REGEXP.
The tree will show the lines where the regexp matches, and all higher
headlines above the match.  It will also show the heading after the match,
to make sure editing the matching entry is easy.
If KEEP-PREVIOUS is non-nil, highlighting and exposing done by a previous
call to `org-occur' will be kept, to allow stacking of calls to this
command.
If CALLBACK is non-nil, it is a function which is called to confirm
that the match should indeed be shown." nil [578285 579915]) ("org-show-context" function nil ("&optional" "key") nil "Make sure point and context and visible.
How much context is shown depends upon the variables
`org-show-hierarchy-above', `org-show-following-heading'. and
`org-show-siblings'." nil [579917 581278]) ("org-reveal" function nil ("&optional" "siblings") ((user-visible . t)) "Show current entry, hierarchy above it, and the following headline.
This can be used to show a consistent set of context around locations
exposed with `org-show-hierarchy-above' or `org-show-following-heading'
not t for the search context.

With optional argument SIBLINGS, on each level of the hierarchy all
siblings are shown.  This repairs the tree structure to what it would
look like when opened with hierarchical calls to `org-cycle'." nil [581280 581951]) ("org-highlight-new-match" function nil ("beg" "end") nil "Highlight from BEG to END and mark the highlight is an occur headline." nil [581953 582198]) ("org-remove-occur-highlights" function nil ("&optional" "beg" "end" "noremove") ((user-visible . t)) "Remove the occur highlights from the buffer.
BEG and END are ignored.  If NOREMOVE is nil, remove this function
from the `before-change-functions' in the current buffer." nil [582200 582705]) ("org-priority-regexp" variable nil ".*?\\(\\[#\\([A-Z0-9]\\)\\] ?\\)" nil "Regular expression matching the priority indicator." nil [582724 582843]) ("org-remove-priority-next-time" variable nil nil nil nil nil [582845 582887]) ("org-priority-up" function nil nil ((user-visible . t)) "Increase the priority of the current item." nil [582889 582999]) ("org-priority-down" function nil nil ((user-visible . t)) "Decrease the priority of the current item." nil [583001 583115]) ("org-priority" function nil ("&optional" "action") ((user-visible . t)) "Change the priority of an item by ARG.
ACTION can be `set', `up', `down', or a character." nil [583117 585627]) ("org-get-priority" function nil ("s") nil "Find priority cookie and return priority." nil [585630 585930]) ("org-scan-tags" function nil ("action" "matcher" "&optional" "todo-only") nil "Scan headline tags with inheritance and produce output ACTION.
ACTION can be `sparse-tree' or `agenda'.  MATCHER is a Lisp form to be
evaluated, testing if a given set of tags qualifies a headline for
inclusion.  When TODO-ONLY is non-nil, only lines with a TODO keyword
are included in the output." nil [585943 590148]) ("todo-only" variable nil nil nil nil nil [590150 590168]) ("org-tags-sparse-tree" function nil ("&optional" "todo-only" "match") ((user-visible . t)) "Create a sparse tree according to tags  string MATCH.
MATCH can contain positive and negative selection of tags, like
\"+WORK+URGENT-WITHBOSS\".
If optional argument TODO_ONLY is non-nil, only select lines that are
also TODO lines." nil [590192 590581]) ("org-cached-props" variable nil nil nil nil nil [590583 590612]) ("org-cached-entry-get" function nil ("pom" "property") nil (if org-use-property-inheritance (org-entry-get pom property (quote inherit)) (cdr (assoc property (or org-cached-props (setq org-cached-props (org-entry-properties pom)))))) nil [590613 591023]) ("org-global-tags-completion-table" function nil ("&optional" "files") nil "Return the list of all tags in all agenda buffer/files." nil [591025 591442]) ("org-make-tags-matcher" function nil ("match") nil "Create the TAGS//TODO matcher form for the selection string MATCH." nil [591444 595941]) ("org-match-any-p" function nil ("re" "list") nil "Does re match any element of list?" nil [595943 596094]) ("org-add-colon-after-tag-completion" variable nil nil nil nil nil [596096 596143]) ("org-tags-overlay" variable nil (org-make-overlay 1 1) nil nil nil [596173 596221]) ("org-detach-overlay" code nil [596222 596259]) ("org-align-tags-here" function nil ("to-col") nil (let ((pos (point)) (col (current-column)) tags) (beginning-of-line 1) (if (and (looking-at (org-re ".*?\\([ 	]+\\)\\(:[[:alnum:]_@:]+:\\)[ 	]*$")) (< pos (match-beginning 2))) (progn (setq tags (match-string 2)) (goto-char (match-beginning 1)) (insert " ") (delete-region (point) (1+ (match-end 0))) (backward-char 1) (move-to-column (max (1+ (current-column)) (1+ col) (if (> to-col 0) to-col (- (abs to-col) (length tags)))) t) (insert tags) (move-to-column (min (current-column) col) t)) (goto-char pos))) nil [596261 597055]) ("org-set-tags" function nil ("&optional" "arg" "just-align") ((user-visible . t)) "Set the tags for the current headline.
With prefix ARG, realign all tags in headings in the current buffer." nil [597057 600231]) ("org-change-tag-in-region" function nil ("beg" "end" "tag" "off") ((user-visible . t)) "Add or remove TAG for each entry in the region.
This works in the agenda, and also in an org-mode buffer." nil [600233 601872]) ("org-tags-completion-function" function nil ("string" "predicate" "&optional" "flag") nil (let (s1 s2 rtn (ctable org-last-tags-completion-table) (confirm (lambda (x) (stringp (car x))))) (if (string-match "^\\(.*[-+:&|]\\)\\([^-+:&|]*\\)$" string) (setq s1 (match-string 1 string) s2 (match-string 2 string)) (setq s1 "" s2 string)) (cond ((eq flag nil) (setq rtn (try-completion s2 ctable confirm)) (if (stringp rtn) (setq rtn (concat s1 s2 (substring rtn (length s2)) (if (and org-add-colon-after-tag-completion (assoc rtn ctable)) ":" "")))) rtn) ((eq flag t) (all-completions s2 ctable confirm)) ((eq flag (quote lambda)) (assoc s2 ctable)))) nil [601874 602783]) ("org-fast-tag-insert" function nil ("kwd" "tags" "face" "&optional" "end") nil "Insert KDW, and the TAGS, the latter with face FACE.  Also inser END." nil [602785 603055]) ("org-fast-tag-show-exit" function nil ("flag") nil (save-excursion (goto-line 3) (if (re-search-forward "[ 	]+Next change exits" (point-at-eol) t) (replace-match "")) (when flag (end-of-line 1) (move-to-column (- (window-width) 19) t) (insert (org-add-props " Next change exits" nil (quote face) (quote org-warning))))) nil [603057 603390]) ("org-set-current-tags-overlay" function nil ("current" "prefix") nil (let ((s (concat ":" (mapconcat (quote identity) current ":") ":"))) (if (featurep (quote xemacs)) (org-overlay-display org-tags-overlay (concat prefix s) (quote secondary-selection)) (put-text-property 0 (length s) (quote face) (quote (secondary-selection org-tag)) s) (org-overlay-display org-tags-overlay (concat prefix s)))) nil [603392 603794]) ("org-fast-tag-selection" function nil ("current" "inherited" "table" "&optional" "todo-table") nil "Fast tag selection with single keys.
CURRENT is the current list of tags in the headline, INHERITED is the
list of inherited tags, and TABLE is an alist of tags and corresponding keys,
possibly with grouping information.  TODO-TABLE is a similar table with
TODO keywords, should these have keys assigned to them.
If the keys are nil, a-z are automatically assigned.
Returns the new tags string, or nil to not change the current settings." nil [603796 612216]) ("org-get-tags-string" function nil nil nil "Get the TAGS string in the current headline." nil [612218 612528]) ("org-get-tags" function nil nil nil "Get the list of tags specified in the current headline." nil [612530 612660]) ("org-get-buffer-tags" function nil nil nil "Get a table of all tags used in the buffer, for completion." nil [612662 613131]) ("org-special-properties" variable nil (quote ("TODO" "TAGS" "ALLTAGS" "DEADLINE" "SCHEDULED" "CLOCK" "PRIORITY")) ((const . t)) "The special properties valid in Org-mode.

These are properties that are not defined in the property drawer,
but in some other way." nil [613190 613430]) ("org-default-properties" variable nil (quote ("ARCHIVE" "CATEGORY" "SUMMARY" "DESCRIPTION" "LOCATION" "LOGGING" "COLUMNS")) ((const . t)) "Some properties that are used by Org-mode for various purposes.
Being in this list makes sure that they are offered for completion." nil [613432 613686]) ("org-property-start-re" variable nil "^[ 	]*:PROPERTIES:[ 	]*$" ((const . t)) "Regular expression matching the first line of a property drawer." nil [613688 613818]) ("org-property-end-re" variable nil "^[ 	]*:END:[ 	]*$" ((const . t)) "Regular expression matching the first line of a property drawer." nil [613820 613941]) ("org-property-action" function nil nil ((user-visible . t)) "Do an action on properties." nil [613943 614519]) ("org-at-property-p" function nil nil nil "Is the cursor in a property line?" nil [614521 614882]) ("org-with-point-at" function nil ("pom" "&rest" "body") nil "Move to buffer and point of point-or-marker POM for the duration of BODY." nil [614884 615189]) ("org-get-property-block" function nil ("&optional" "beg" "end" "force") nil "Return the (beg . end) range of the body of the property drawer.
BEG and END can be beginning and end of subtree, if not given
they will be found.
If the drawer does not exist and FORCE is non-nil, create the drawer." nil [615191 616376]) ("org-entry-properties" function nil ("&optional" "pom" "which") nil "Get all properties of the entry at point-or-marker POM.
This includes the TODO keyword, the tags, time strings for deadline,
scheduled, and clocking, and any additional properties defined in the
entry.  The return value is an alist, keys may occur multiple times
if the property key was used several times.
POM may also be nil, in which case the current entry is used.
If WHICH is nil or `all', get all properties.  If WHICH is
`special' or `standard', only get that subclass." nil [616378 619412]) ("org-entry-get" function nil ("pom" "property" "&optional" "inherit") nil "Get value of PROPERTY for entry at point-or-marker POM.
If INHERIT is non-nil and the entry does not have the property,
then also check higher levels of the hierarchy.
If the property is present but empty, the return value is the empty string.
If the property is not present at all, nil is returned." nil [619414 620482]) ("org-entry-delete" function nil ("pom" "property") nil "Delete the property PROPERTY from entry at point-or-marker POM." nil [620484 621084]) ("org-entry-add-to-multivalued-property" function nil ("pom" "property" "value") nil "Add VALUE to the words in the PROPERTY in entry at point-or-marker POM." nil [621230 621641]) ("org-entry-remove-from-multivalued-property" function nil ("pom" "property" "value") nil "Remove VALUE from words in the PROPERTY in entry at point-or-marker POM." nil [621643 622060]) ("org-entry-member-in-multivalued-property" function nil ("pom" "property" "value") nil "Is VALUE one of the words in the PROPERTY in entry at point-or-marker POM?" nil [622062 622341]) ("org-entry-property-inherited-from" variable nil (make-marker) nil nil nil [622343 622399]) ("org-entry-get-with-inheritance" function nil ("property") nil "Get entry property, and search higher levels if not present." nil [622401 622997]) ("org-entry-put" function nil ("pom" "property" "value") nil "Set PROPERTY to VALUE for entry at point-or-marker POM." nil [622999 625408]) ("org-buffer-property-keys" function nil ("&optional" "include-specials" "include-defaults") nil "Get all property keys in the current buffer.
With INCLUDE-SPECIALS, also list the special properties that relect things
like tags and TODO state.
With INCLUDE-DEFAULTS, also include properties that has special meaning
internally: ARCHIVE, CATEGORY, SUMMARY, DESCRIPTION, LOCATION, and LOGGING." nil [625410 626518]) ("org-property-values" function nil ("key") nil "Return a list of all values of property KEY." nil [626520 626904]) ("org-insert-property-drawer" function nil nil ((user-visible . t)) "Insert a property drawer into the current entry." nil [626906 627840]) ("org-set-property" function nil ("property" "value") ((user-visible . t)) "In the current entry, set PROPERTY to VALUE.
When called interactively, this will prompt for a property name, offering
completion on existing and default properties.  And then it will prompt
for a value, offering competion either on allowed values (via an inherited
xxx_ALL property) or on existing values in other instances of this property
in the current file." nil [627842 629042]) ("org-delete-property" function nil ("property") ((user-visible . t)) "In the current entry, delete PROPERTY." nil [629044 629447]) ("org-delete-property-globally" function nil ("property") ((user-visible . t)) "Remove PROPERTY globally, from all entries." nil [629449 630086]) ("org-columns-current-fmt-compiled" variable nil nil nil nil nil [630088 630129]) ("org-compute-property-at-point" function nil nil ((user-visible . t)) "Compute the property at point.
This looks for an enclosing column format, extracts the operator and
then applies it to the proerty in the column format's scope." nil [630147 630681]) ("org-property-get-allowed-values" function nil ("pom" "property" "&optional" "table") nil "Get allowed values for the property PROPERTY.
When TABLE is non-nil, return an alist that can directly be used for
completion." nil [630683 631815]) ("org-property-previous-allowed-value" function nil ("&optional" "previous") ((user-visible . t)) "Switch to the next allowed value for this property." nil [631817 631991]) ("org-property-next-allowed-value" function nil ("&optional" "previous") ((user-visible . t)) "Switch to the next allowed value for this property." nil [631993 632968]) ("org-find-entry-with-id" function nil ("ident") nil "Locate the entry that contains the ID property with exact value IDENT.
IDENT can be a string, a symbol or a number, this function will search for
the string representation of it.
Return the position where this entry starts, or nil if there is no such entry." nil [632970 633804]) ("org-columns-overlays" variable nil nil nil "Holds the list of current column overlays." nil [633823 633903]) ("org-columns-current-fmt" variable nil nil nil "Local variable, holds the currently active column format." nil [633905 634003]) ("org-columns-current-fmt-compiled" variable nil nil nil "Local variable, holds the currently active column format.
This is the compiled version of the format." nil [634004 634155]) ("org-columns-current-widths" variable nil nil nil "Loval variable, holds the currently widths of fields." nil [634156 634253]) ("org-columns-current-maxwidths" variable nil nil nil "Loval variable, holds the currently active maximum column widths." nil [634254 634366]) ("org-columns-begin-marker" variable nil (make-marker) nil "Points to the position where last a column creation command was called." nil [634367 634490]) ("org-columns-top-level-marker" variable nil (make-marker) nil "Points to the position where current columns region starts." nil [634491 634606]) ("org-columns-map" variable nil (make-sparse-keymap) nil "The keymap valid in column display." nil [634608 634693]) ("org-columns-content" function nil nil ((user-visible . t)) "Switch to contents view while in columns view." nil [634695 634825]) ("org-defkey" code nil [634827 634880]) ("org-defkey" code nil [634881 634927]) ("org-defkey" code nil [634928 634984]) ("org-defkey" code nil [634985 635042]) ("org-defkey" code nil [635043 635114]) ("org-defkey" code nil [635115 635177]) ("org-defkey" code nil [635178 635234]) ("org-defkey" code nil [635235 635285]) ("org-defkey" code nil [635286 635336]) ("org-defkey" code nil [635337 635387]) ("org-defkey" code nil [635388 635438]) ("org-defkey" code nil [635439 635497]) ("org-defkey" code nil [635498 635559]) ("org-defkey" code nil [635560 635646]) ("org-defkey" code nil [635647 635734]) ("org-defkey" code nil [635735 635811]) ("org-defkey" code nil [635812 635876]) ("org-defkey" code nil [635877 635956]) ("org-defkey" code nil [635957 636025]) ("org-defkey" code nil [636026 636078]) ("org-defkey" code nil [636079 636130]) ("org-defkey" code nil [636131 636198]) ("org-defkey" code nil [636199 636264]) ("org-defkey" code nil [636265 636331]) ("org-defkey" code nil [636332 636400]) ("easy-menu-define" code nil [636402 637347]) ("org-columns-new-overlay" function nil ("beg" "end" "&optional" "string" "face") nil "Create a new column overlay and add it to the list." nil [637349 637655]) ("org-columns-display-here" function nil ("&optional" "props") ((user-visible . t)) "Overlay the current line with column display." nil [637657 641005]) ("org-previous-header-line-format" variable nil nil nil "The header line format before column view was turned on." nil [641007 641112]) ("org-columns-inhibit-recalculation" variable nil nil nil "Inhibit recomputing of columns on column view startup." nil [641113 641218]) ("header-line-format" variable nil nil nil nil nil [641221 641248]) ("org-columns-display-here-title" function nil nil ((user-visible . t)) "Overlay the newline before the current line with the table title." nil [641249 642270]) ("org-columns-remove-overlays" function nil nil ((user-visible . t)) "Remove all currently active column overlays." nil [642272 643015]) ("org-columns-cleanup-item" function nil ("item" "fmt") nil "Remove from ITEM what is a column in the format FMT." nil [643017 643695]) ("org-columns-show-value" function nil nil ((user-visible . t)) "Show the full value of the property." nil [643697 643895]) ("org-columns-quit" function nil nil ((user-visible . t)) "Remove the column overlays and in this way exit column editing." nil [643897 644293]) ("org-columns-check-computed" function nil nil nil "Check if this column value is computed.
If yes, throw an error indicating that changing it does not make sense." nil [644295 644662]) ("org-columns-todo" function nil ("&optional" "arg") ((user-visible . t)) "Change the TODO state during column view." nil [644664 644804]) ("org-columns-set-tags-or-toggle" function nil ("&optional" "arg") ((user-visible . t)) "Toggle checkbox at point, or set tags for current headline." nil [644806 645129]) ("org-columns-edit-value" function nil ("&optional" "key") ((user-visible . t)) "Edit the value of the property at point in column view.
Where possible, use the standard interface for changing this line." nil [645131 648052]) ("org-edit-headline" function nil nil nil "Edit the current headline, the part without TODO keyword, TAGS." nil [648054 648791]) ("org-columns-edit-allowed" function nil nil ((user-visible . t)) "Edit the list of allowed values for the current property." nil [648793 649432]) ("org-no-warnings" function nil ("&rest" "body") nil (cons (if (fboundp (quote with-no-warnings)) (quote with-no-warnings) (quote progn)) body) nil [649434 649545]) ("org-columns-eval" function nil ("form") nil (let (hidep) (save-excursion (beginning-of-line 1) (condition-case nil (org-no-warnings (next-line 1)) (error nil)) (setq hidep (org-on-heading-p 1))) (eval form) (and hidep (hide-entry))) nil [649547 650019]) ("org-columns-previous-allowed-value" function nil nil ((user-visible . t)) "Switch to the previous allowed value for this column." nil [650021 650177]) ("org-columns-next-allowed-value" function nil ("&optional" "previous") ((user-visible . t)) "Switch to the next allowed value for this column." nil [650179 652378]) ("org-verify-version" function nil ("task") nil (cond ((eq task (quote columns)) (if (or (featurep (quote xemacs)) (< emacs-major-version 22)) (error "Emacs 22 is required for the columns feature")))) nil [652380 652581]) ("org-columns-open-link" function nil ("&optional" "arg") nil (interactive "P") nil [652583 652808]) ("org-open-link-from-string" function nil ("s" "&optional" "arg") ((user-visible . t)) "Open a link in the string S, as if it was in Org-mode." nil [652810 653087]) ("org-columns-get-format-and-top-level" function nil nil nil (let (fmt) (when (condition-case nil (org-back-to-heading) (error nil)) (move-marker org-entry-property-inherited-from nil) (setq fmt (org-entry-get nil "COLUMNS" t))) (setq fmt (or fmt org-columns-default-format)) (org-set-local (quote org-columns-current-fmt) fmt) (org-columns-compile-format fmt) (if (marker-position org-entry-property-inherited-from) (move-marker org-columns-top-level-marker org-entry-property-inherited-from) (move-marker org-columns-top-level-marker (point))) fmt) nil [653089 653692]) ("org-columns" function nil nil ((user-visible . t)) "Turn on column view on an org-mode file." nil [653694 654797]) ("org-columns-new" function nil ("&optional" "prop" "title" "width" "op" "fmt") ((user-visible . t)) "Insert a new column, to the leeft o the current column." nil [654799 656103]) ("org-columns-delete" function nil nil ((user-visible . t)) "Delete the column at point from columns view." nil [656105 656714]) ("org-columns-edit-attributes" function nil nil ((user-visible . t)) "Edit the attributes of the current column." nil [656716 656940]) ("org-columns-widen" function nil ("arg") ((user-visible . t)) "Make the column wider by ARG characters." nil [656942 657369]) ("org-columns-narrow" function nil ("arg") ((user-visible . t)) "Make the column nrrower by ARG characters." nil [657371 657500]) ("org-columns-move-right" function nil nil ((user-visible . t)) "Swap this column with the one to the right." nil [657502 658007]) ("org-columns-move-left" function nil nil ((user-visible . t)) "Swap this column with the one to the left." nil [658009 658289]) ("org-columns-store-format" function nil nil nil "Store the text version of the current columns format in appropriate place.
This is either in the COLUMNS property of the node starting the current column
display, or in the #+COLUMNS line of the current buffer." nil [658291 659503]) ("org-overriding-columns-format" variable nil nil nil "When set, overrides any other definition." nil [659505 659593]) ("org-agenda-view-columns-initially" variable nil nil nil "When set, switch to columns view immediately after creating the agenda." nil [659594 659716]) ("org-agenda-columns" function nil nil ((user-visible . t)) "Turn on column view in the agenda." nil [659718 661396]) ("org-columns-get-autowidth-alist" function nil ("s" "cache") nil "Derive the maximum column widths from the format and the cache." nil [661398 661966]) ("org-columns-compute-all" function nil nil nil "Compute all columns that have operators defined." nil [661968 662331]) ("org-columns-update" function nil ("property") nil "Recompute PROPERTY, and update the columns display for it." nil [662333 663120]) ("org-columns-compute" function nil ("property") ((user-visible . t)) "Sum the values of property PROPERTY hierarchically, for the entire buffer." nil [663122 665933]) ("org-columns-redo" function nil nil ((user-visible . t)) "Construct the column display again." nil [665935 666357]) ("org-columns-not-in-agenda" function nil nil nil (if (eq major-mode (quote org-agenda-mode)) (error "This command is only allowed in Org-mode buffers")) nil [666359 666500]) ("org-string-to-number" function nil ("s") nil "Convert string to number, and interpret hh:mm:ss." nil [666503 666799]) ("org-column-number-to-string" function nil ("n" "fmt") nil "Convert a computed column number to a string value, according to FMT." nil [666801 667177]) ("org-column-string-to-number" function nil ("s" "fmt") nil "Convert a column value to a number that can be used for column computing." nil [667179 667573]) ("org-columns-uncompile-format" function nil ("cfmt") nil "Turn the compiled columns format back into a string representation." nil [667575 668344]) ("org-columns-compile-format" function nil ("fmt") nil "Turn a column format string into an alist of specifications.
The alist has one entry for each column in the format.  The elements of
that list are:
property     the property
title        the title field for the columns
width        the column width in characters, can be nil for automatic
operator     the operator if any
format       the output format for computed results, derived from operator" nil [668346 669620]) ("org-columns-capture-view" function nil nil nil "Get the column view of the current buffer and return it as a list.
The list will contains the title row and all other rows.  Each row is
a list of fields." nil [669658 670556]) ("org-dblock-write:columnview" function nil ("params") nil "Write the column view table.
PARAMS is a property list of parameters:

:width    enforce same column widths with <N> specifiers.
:id       the :ID: property of the entry where the columns view
          should be built, as a string.  When `local', call locally.
          When `global' call column view with the cursor at the beginning
          of the buffer (usually this means that the whole buffer switches
          to column view).
:hlines   When t, insert a hline before each item.  When a number, insert
          a hline before each level <= that number.
:vlines   When t, make each column a colgroup to enforce vertical lines." nil [670558 673036]) ("org-listtable-to-string" function nil ("tbl") nil "Convert a listtable TBL to a string that contains the Org-mode table.
The table still need to be alligned.  The resulting string has no leading
and tailing newline characters." nil [673038 673454]) ("org-insert-columns-dblock" function nil nil ((user-visible . t)) "Create a dynamic block capturing a column view table." nil [673456 674038]) ("org-last-changed-timestamp" variable nil nil nil nil nil [674057 674096]) ("org-time-was-given" variable nil nil nil nil nil [674097 674124]) ("org-end-time-was-given" variable nil nil nil nil nil [674156 674187]) ("org-ts-what" variable nil nil nil nil nil [674219 674239]) ("org-time-stamp" function nil ("arg") ((user-visible . t)) "Prompt for a date/time and insert a time stamp.
If the user specifies a time like HH:MM, or if this command is called
with a prefix argument, the time stamp will contain date and time.
Otherwise, only the date will be included.  All parts of a date not
specified by the user will be filled in from the current date/time.
So if you press just return without typing anything, the time stamp
will represent the current date/time.  If there is already a timestamp
at the cursor, it will be modified." nil [674272 676394]) ("org-time-stamp-inactive" function nil ("&optional" "arg") ((user-visible . t)) "Insert an inactive time stamp.
An inactive time stamp is enclosed in square brackets instead of angle
brackets.  It is inactive in the sense that it does not trigger agenda entries,
does not link to the calendar and cannot be changed with the S-cursor keys.
So these are more for recording a certain time/date." nil [676396 677015]) ("org-date-ovl" variable nil (org-make-overlay 1 1) nil nil nil [677017 677061]) ("org-overlay-put" code nil [677062 677111]) ("org-detach-overlay" code nil [677112 677145]) ("org-ans1" variable nil nil nil nil nil [677147 677164]) ("org-ans2" variable nil nil nil nil nil [677196 677213]) ("org-plain-time-of-day-regexp" variable nil nil nil nil nil [677246 677283]) ("org-read-date" function nil ("&optional" "with-time" "to-time" "from-string" "prompt" "default-time") nil "Read a date and make things smooth for the user.
The prompt will suggest to enter an ISO date, but you can also enter anything
which will at least partially be understood by `parse-time-string'.
Unrecognized parts of the date will default to the current day, month, year,
hour and minute.  If this command is called to replace a timestamp at point,
of to enter the second timestamp of a range, the default time is taken from the
existing stamp.  For example,
  3-2-5         --> 2003-02-05
  feb 15        --> currentyear-02-15
  sep 12 9      --> 2009-09-12
  12:45         --> today 12:45
  22 sept 0:34  --> currentyear-09-22 0:34
  12            --> currentyear-currentmonth-12
  Fri           --> nearest Friday (today or later)
  etc.

Furthermore you can specify a relative date by giving, as the *first* thing
in the input:  a plus/minus sign, a number and a letter [dwmy] to indicate
change in days weeks, months, years.
With a single plus or minus, the date is relative to today.  With a double
plus or minus, it is relative to the date in DEFAULT-TIME.  E.g.
  +4d           --> four days from today
  +4            --> same as above
  +2w           --> two weeks from today
  ++5           --> five days from default date

The function understands only English month and weekday abbreviations,
but this can be configured with the variables `parse-time-months' and
`parse-time-weekdays'.

While prompting, a calendar is popped up - you can also select the
date with the mouse (button 1).  The calendar shows a period of three
months.  To scroll it to other months, use the keys `>' and `<'.
If you don't like the calendar, turn it off with
       (setq org-popup-calendar-for-date-prompt nil)

With optional argument TO-TIME, the date will immediately be converted
to an internal time.
With an optional argument WITH-TIME, the prompt will suggest to also
insert a time.  Note that when WITH-TIME is not set, you can still
enter a time, and this function will inform the calling routine about
this change.  The calling routine may then choose to change the format
used to insert the time stamp into the buffer to include the time.
With optional argument FROM-STRING, read fomr this string instead from
the user.  PROMPT can overwrite the default prompt.  DEFAULT-TIME is
the time/date that is used for everything that is not specified by the
user." nil [677300 687663]) ("parse-time-weekdays" variable nil nil nil nil nil [688027 688055]) ("org-read-date-get-relative" function nil ("s" "today" "default") nil "Check string S for special relative date string.
TODAY and DEFAULT are internal times, for today and for a default.
Return shift list (N what def-flag)
WHAT       is \"d\", \"w\", \"m\", or \"y\" for day. week, month, year.
N          is the number if WHATs to shift
DEF-FLAG   is t when a double ++ or -- indicates shift relative to
           the DEFAULT date rather than TODAY." nil [688057 689537]) ("org-eval-in-calendar" function nil ("form" "&optional" "keepdate") nil "Eval FORM in the calendar window and return to current window.
Also, store the cursor date in variable org-ans2." nil [689539 690632]) ("org-calendar-select" function nil nil ((user-visible . t)) "Return to `org-read-date' with the date currently selected.
This is used by `org-read-date' in a temporary keymap for the calendar buffer." nil [690634 691094]) ("org-insert-time-stamp" function nil ("time" "&optional" "with-hm" "inactive" "pre" "post" "extra") nil "Insert a date stamp for the date given by the internal TIME.
WITH-HM means, use the stamp format that includes the time of the day.
INACTIVE means use square brackets instead of angular ones, so that the
stamp will not contribute to the agenda.
PRE and POST are optional strings to be inserted before and after the
stamp.
The command returns the inserted time stamp." nil [691096 692327]) ("org-toggle-time-stamp-overlays" function nil nil ((user-visible . t)) "Toggle the use of custom time stamp formats." nil [692329 693224]) ("org-display-custom-time" function nil ("beg" "end") nil "Overlay modified time stamp format over timestamp between BED and END." nil [693226 694413]) ("org-translate-time" function nil ("string") nil "Translate all timestamps in STRING to custom format.
But do this only if the variable `org-display-custom-times' is set." nil [694415 695604]) ("org-fix-decoded-time" function nil ("time") nil "Set 0 instead of nil for the first 6 elements of time.
Don't touch the rest." nil [695606 695807]) ("org-days-to-time" function nil ("timestamp-string") nil "Difference between TIMESTAMP-STRING and now in days." nil [695809 696008]) ("org-deadline-close" function nil ("timestamp-string" "&optional" "ndays") nil "Is the time in TIMESTAMP-STRING close to the current date?" nil [696010 696282]) ("org-get-wdays" function nil ("ts") nil "Get the deadline lead time appropriate for timestring TS." nil [696284 696874]) ("org-calendar-select-mouse" function nil ("ev") ((user-visible . t)) "Return to `org-read-date' with the date currently selected.
This is used by `org-read-date' in a temporary keymap for the calendar buffer." nil [696876 697371]) ("org-check-deadlines" function nil ("ndays") ((user-visible . t)) "Check if there are any deadlines due or past due.
A deadline is considered due if it happens within `org-deadline-warning-days'
days from today's date.  If the deadline appears in an entry marked DONE,
it is not shown.  The prefix arg NDAYS can be used to test that many
days.  If the prefix is a raw \\[universal-argument] prefix, all deadlines are shown." nil [697373 698297]) ("org-evaluate-time-range" function nil ("&optional" "to-buffer") ((user-visible . t)) "Evaluate a time range by computing the difference between start and end.
Normally the result is just printed in the echo area, but with prefix arg
TO-BUFFER, the result is inserted just after the date stamp into the buffer.
If the time range is actually in a table, the result is inserted into the
next column.
For time difference computation, a year is assumed to be exactly 365
days in order to avoid rounding problems." nil [698299 700787]) ("org-make-tdiff-string" function nil ("y" "d" "h" "m") nil (let ((fmt "") (l nil)) (if (> y 0) (setq fmt (concat fmt "%d year" (if (> y 1) "s" "") " ") l (push y l))) (if (> d 0) (setq fmt (concat fmt "%d day" (if (> d 1) "s" "") " ") l (push d l))) (if (> h 0) (setq fmt (concat fmt "%d hour" (if (> h 1) "s" "") " ") l (push h l))) (if (> m 0) (setq fmt (concat fmt "%d minute" (if (> m 1) "s" "") " ") l (push m l))) (apply (quote format) fmt (nreverse l))) nil [700789 701342]) ("org-time-string-to-time" function nil ("s") nil (apply (quote encode-time) (org-parse-time-string s)) nil [701344 701428]) ("org-time-string-to-absolute" function nil ("s" "&optional" "daynr") nil "Convert a time stamp to an absolute day number.
If there is a specifyer for a cyclic time stamp, get the closest date to
DAYNR." nil [701430 702043]) ("org-time-from-absolute" function nil ("d") nil "Return the time corresponding to date D.
D may be an absolute day number, or a calendar-type list (month day year)." nil [702045 702314]) ("org-calendar-holiday" function nil nil nil "List of holidays, for Diary display in Org-mode." nil [702316 702510]) ("org-diary-sexp-entry" function nil ("sexp" "entry" "date") nil "Process a SEXP diary ENTRY for DATE." nil [702512 703298]) ("org-diary-to-ical-string" function nil ("frombuf") nil "Get iCalendar entreis from diary entries in buffer FROMBUF.
This uses the icalendar.el library." nil [703300 704253]) ("org-closest-date" function nil ("start" "current" "change") nil "Find the date closest to CURRENT that is consistent with START and CHANGE." nil [704255 706858]) ("org-date-to-gregorian" function nil ("date") nil "Turn any specification of DATE into a gregorian date for the calendar." nil [706860 707300]) ("org-parse-time-string" function nil ("s" "&optional" "nodefault") nil "Parse the standard Org-mode time string.
This should be a lot faster than the normal `parse-time-string'.
If time is not given, defaults to 0:00.  However, with optional NODEFAULT,
hour and minute fields will be nil if not given." nil [707302 708079]) ("org-timestamp-up" function nil ("&optional" "arg") ((user-visible . t)) "Increase the date item at the cursor by one.
If the cursor is on the year, change the year.  If it is on the month or
the day, change that.
With prefix ARG, change by that many units." nil [708081 708381]) ("org-timestamp-down" function nil ("&optional" "arg") ((user-visible . t)) "Decrease the date item at the cursor by one.
If the cursor is on the year, change the year.  If it is on the month or
the day, change that.
With prefix ARG, change by that many units." nil [708383 708689]) ("org-timestamp-up-day" function nil ("&optional" "arg") ((user-visible . t)) "Increase the date in the time stamp by one day.
With prefix ARG, change that many days." nil [708691 708999]) ("org-timestamp-down-day" function nil ("&optional" "arg") ((user-visible . t)) "Decrease the date in the time stamp by one day.
With prefix ARG, change that many days." nil [709001 709317]) ("org-pos-in-match-range" function nil ("pos" "n") nil (and (match-beginning n) (<= (match-beginning n) pos) (>= (match-end n) pos)) nil [709319 709454]) ("org-at-timestamp-p" function nil ("&optional" "inactive-ok") ((user-visible . t)) "Determine if the cursor is in or at a timestamp." nil [709456 710714]) ("org-toggle-timestamp-type" function nil nil ((user-visible . t)) "" nil [710716 711130]) ("org-timestamp-change" function nil ("n" "&optional" "what") nil "Change the date in the time stamp at point.
The date will be changed by N times WHAT.  WHAT can be `day', `month',
`year', `minute', `second'.  If WHAT is not given, the cursor position
in the timestamp determines what will be changed." nil [711132 713905]) ("org-modify-ts-extra" function nil ("s" "pos" "n") nil "Change the different parts of the lead-time and repeat fields in timestamp." nil [713950 715192]) ("org-recenter-calendar" function nil ("date") nil "If the calendar is visible, recenter it to DATE." nil [715194 715590]) ("org-goto-calendar" function nil ("&optional" "arg") ((user-visible . t)) "Go to the Emacs calendar at the current date.
If there is a time stamp in the current line, go to that date.
A prefix ARG can be used to force the current date." nil [715592 716399]) ("org-get-date-from-calendar" function nil nil nil "Return a list (month day year) of date at point in calendar." nil [716401 716594]) ("org-date-from-calendar" function nil nil ((user-visible . t)) "Insert time stamp corresponding to cursor date in *Calendar* buffer.
If there is already a time stamp at the cursor position, update it." nil [716596 717015]) ("org-agenda-to-appt" function nil ("&optional" "filter") ((user-visible . t)) "Activate appointments found in `org-agenda-files'.
When prefixed, prompt for a regular expression and use it as a
filter: only add entries if they match this regular expression.

FILTER can be a string. In this case, use this string as a
regular expression to filter results.

FILTER can also be an alist, with the car of each cell being
either 'headline or 'category.  For example:

  '((headline \"IMPORTANT\")
    (category \"Work\"))

will only add headlines containing IMPORTANT or headlines
belonging to the category \"Work\"." nil [717083 719501]) ("org-mode-line-string" variable nil "" nil nil nil [719543 719575]) ("put" code nil [719576 719627]) ("org-mode-line-timer" variable nil nil nil nil nil [719629 719661]) ("org-clock-heading" variable nil "" nil nil nil [719662 719691]) ("org-clock-start-time" variable nil "" nil nil nil [719692 719724]) ("org-update-mode-line" function nil nil nil (let* ((delta (- (time-to-seconds (current-time)) (time-to-seconds org-clock-start-time))) (h (floor delta 3600)) (m (floor (- delta (* 3600 h)) 60))) (setq org-mode-line-string (propertize (format "-[%d:%02d (%s)]" h m org-clock-heading) (quote help-echo) "Org-mode clock is running")) (force-mode-line-update)) nil [719726 720142]) ("org-clock-marker" variable nil (make-marker) nil "Marker recording the last clock-in." nil [720144 720223]) ("org-clock-mode-line-entry" variable nil nil nil "Information for the modeline about the running clock." nil [720224 720320]) ("org-clock-in" function nil nil ((user-visible . t)) "Start the clock on the current item.
If necessary, clock-out of the currently active clock." nil [720322 721442]) ("org-clock-find-position" function nil nil nil "Find the location where the next clock line should be inserted." nil [721444 723281]) ("org-clock-out" function nil ("&optional" "fail-quietly") ((user-visible . t)) "Stop the currently running clock.
If there is no running clock, throw an error, unless FAIL-QUIETLY is set." nil [723283 725113]) ("org-clock-cancel" function nil nil ((user-visible . t)) "Cancel the running clock be removing the start timestamp." nil [725115 725484]) ("org-clock-goto" function nil ("&optional" "delete-windows") ((user-visible . t)) "Go to the currently clocked-in entry." nil [725486 725877]) ("org-clock-file-total-minutes" variable nil nil nil "Holds the file total time in minutes, after a call to `org-clock-sum'." nil [725879 725995]) ("make-variable-buffer-local" code nil [725998 726056]) ("org-clock-sum" function nil ("&optional" "tstart" "tend") ((user-visible . t)) "Sum the times for each subtree.
Puts the resulting times in minutes as a text property on each headline." nil [726058 728071]) ("org-clock-display" function nil ("&optional" "total-only") ((user-visible . t)) "Show subtree times in the entire buffer.
If TOTAL-ONLY is non-nil, only show the total time for the entire file
in the echo area." nil [728073 729229]) ("org-clock-overlays" variable nil nil nil nil nil [729231 729262]) ("make-variable-buffer-local" code nil [729263 729311]) ("org-put-clock-overlay" function nil ("time" "&optional" "level") nil "Put an overlays on the current line, displaying TIME.
If LEVEL is given, prefix time with a corresponding number of stars.
This creates a new overlay and stores it in `org-clock-overlays', so that it
will be easy to remove." nil [729313 730528]) ("org-remove-clock-overlays" function nil ("&optional" "beg" "end" "noremove") ((user-visible . t)) "Remove the occur highlights from the buffer.
BEG and END are ignored.  If NOREMOVE is nil, remove this function
from the `before-change-functions' in the current buffer." nil [730530 731027]) ("org-clock-out-if-current" function nil nil nil "Clock out if the current entry contains the running clock.
This is used to stop the clock after a TODO entry is marked DONE,
and is only done if the variable `org-clock-out-when-done' is not nil." nil [731029 731845]) ("add-hook" code nil [731847 731927]) ("org-check-running-clock" function nil nil nil "Check if the current buffer contains the running clock.
If yes, offer to stop it and to save the buffer with the changes." nil [731929 732370]) ("org-clock-report" function nil ("&optional" "arg") ((user-visible . t)) "Create a table containing a report about clocked time.
If the cursor is inside an existing clocktable block, then the table
will be updated.  If not, a new clocktable will be inserted.
When called with a prefix argument, move to the first clock table in the
buffer and update it." nil [732372 732985]) ("org-in-clocktable-p" function nil nil nil "Check if the cursor is in a clocktable." nil [732987 733349]) ("org-clock-update-time-maybe" function nil nil ((user-visible . t)) "If this is a CLOCK line, update it and return t.
Otherwise, return nil." nil [733351 734443]) ("org-clock-special-range" function nil ("key" "&optional" "time" "as-strings") nil "Return two times bordering a special time range.
Key is a symbol specifying the range and can be one of `today', `yesterday',
`thisweek', `lastweek', `thismonth', `lastmonth', `thisyear', `lastyear'.
A week starts Monday 0:00 and ends Sunday 24:00.
The range is determined relative to TIME.  TIME defaults to the current time.
The return value is a cons cell with two internal times like the ones
returned by `current time' or `encode-time'. if AS-STRINGS is non-nil,
the returned times will be formatted strings." nil [734445 736318]) ("org-dblock-write:clocktable" function nil ("params") nil "Write the standard clocktable." nil [736320 741241]) ("org-clocktable-add-file" function nil ("file" "table") nil (if table (let ((lines (org-split-string table "
")) (ff (file-name-nondirectory file))) (mapconcat (quote identity) (mapcar (lambda (x) (if (string-match org-table-dataline-regexp x) (concat "|" ff x) x)) lines) "
"))) nil [741243 741688]) ("org-collect-clock-time-entries" function nil nil ((user-visible . t)) "Return an internal list with clocking information.
This list has one entry for each CLOCK interval.
FIXME: describe the elements." nil [741743 743394]) ("org-agenda-mode-map" variable nil (make-sparse-keymap) nil "Keymap for `org-agenda-mode'." nil [743464 743547]) ("org-agenda-menu" variable nil nil nil nil nil [743549 743573]) ("org-agenda-follow-mode" variable nil nil nil nil nil [743604 743639]) ("org-agenda-show-log" variable nil nil nil nil nil [743640 743672]) ("org-agenda-redo-command" variable nil nil nil nil nil [743673 743709]) ("org-agenda-mode-hook" variable nil nil nil nil nil [743710 743743]) ("org-agenda-type" variable nil nil nil nil nil [743744 743772]) ("org-agenda-force-single-file" variable nil nil nil nil nil [743773 743814]) ("org-agenda-mode" function nil nil ((user-visible . t)) "Mode for time-sorted view on action items in Org-mode files.

The following commands are available:

\\{org-agenda-mode-map}" nil [743816 745473]) ("substitute-key-definition" code nil [745475 745583]) ("org-defkey" code nil [745584 745644]) ("org-defkey" code nil [745645 745705]) ("org-defkey" code nil [745706 745771]) ("org-defkey" code nil [745772 745832]) ("org-defkey" code nil [745833 745896]) ("org-defkey" code nil [745897 745964]) ("org-defkey" code nil [745965 746028]) ("org-defkey" code nil [746029 746094]) ("org-defkey" code nil [746095 746155]) ("org-defkey" code nil [746156 746216]) ("org-defkey" code nil [746217 746298]) ("org-defkey" code nil [746299 746384]) ("org-defkey" code nil [746385 746465]) ("org-defkey" code nil [746466 746545]) ("org-defkey" code nil [746546 746611]) ("org-defkey" code nil [746612 746676]) ("org-defkey" code nil [746677 746737]) ("org-defkey" code nil [746738 746812]) ("org-defkey" code nil [746813 746877]) ("org-defkey" code nil [746878 746944]) ("org-defkey" code nil [746945 747010]) ("org-defkey" code nil [747011 747075]) ("org-defkey" code nil [747076 747141]) ("org-defkey" code nil [747142 747208]) ("org-defkey" code nil [747209 747274]) ("org-defkey" code nil [747275 747346]) ("org-defkey" code nil [747347 747419]) ("org-defkey" code nil [747420 747497]) ("org-defkey" code nil [747498 747576]) ("org-defkey" code nil [747578 747638]) ("org-defkey" code nil [747639 747703]) ("org-defkey" code nil [747704 747768]) ("let" code nil [747769 747901]) ("org-defkey" code nil [747903 747963]) ("org-defkey" code nil [747964 748021]) ("org-defkey" code nil [748022 748083]) ("org-defkey" code nil [748084 748149]) ("org-defkey" code nil [748150 748203]) ("org-defkey" code nil [748204 748257]) ("org-defkey" code nil [748258 748311]) ("org-defkey" code nil [748312 748373]) ("org-defkey" code nil [748374 748436]) ("org-defkey" code nil [748437 748506]) ("org-defkey" code nil [748507 748569]) ("org-defkey" code nil [748570 748628]) ("org-defkey" code nil [748629 748676]) ("org-defkey" code nil [748677 748728]) ("org-defkey" code nil [748729 748799]) ("org-defkey" code nil [748800 748874]) ("org-defkey" code nil [748875 748932]) ("org-defkey" code nil [748933 748994]) ("org-defkey" code nil [748995 749055]) ("org-defkey" code nil [749056 749118]) ("eval-after-load" code nil [749119 749239]) ("org-defkey" code nil [749240 749301]) ("org-defkey" code nil [749302 749365]) ("org-defkey" code nil [749366 749429]) ("org-defkey" code nil [749430 749487]) ("org-defkey" code nil [749488 749545]) ("org-defkey" code nil [749546 749614]) ("org-defkey" code nil [749615 749672]) ("org-defkey" code nil [749673 749742]) ("org-defkey" code nil [749743 749801]) ("org-defkey" code nil [749802 749874]) ("org-defkey" code nil [749875 749936]) ("org-defkey" code nil [749937 750000]) ("org-defkey" code nil [750001 750053]) ("org-defkey" code nil [750054 750114]) ("org-defkey" code nil [750115 750177]) ("org-defkey" code nil [750178 750247]) ("org-defkey" code nil [750248 750321]) ("org-defkey" code nil [750322 750397]) ("org-defkey" code nil [750398 750477]) ("org-defkey" code nil [750478 750538]) ("org-defkey" code nil [750539 750600]) ("org-defkey" code nil [750601 750668]) ("org-agenda-keymap" variable nil (copy-keymap org-agenda-mode-map) nil "Local keymap for agenda entries from Org-mode." nil [750670 750781]) ("org-defkey" code nil [750783 750886]) ("org-defkey" code nil [750887 750990]) ("when" code nil [750991 751088]) ("easy-menu-define" code nil [751089 755098]) ("org-agenda-allow-remote-undo" variable nil t nil "Non-nil means, allow remote undo from the agenda buffer." nil [755117 755217]) ("org-agenda-undo-list" variable nil nil nil "List of undoable operations in the agenda since last refresh." nil [755218 755317]) ("org-agenda-undo-has-started-in" variable nil nil nil "Buffers that have already seen `undo-start' in the current undo sequence." nil [755318 755439]) ("org-agenda-pending-undo-list" variable nil nil nil "In a series of undo commands, this is the list of remaning undo items." nil [755440 755556]) ("org-if-unprotected" function nil ("&rest" "body") nil "Execute BODY if there is no `org-protected' text property at point." nil [755558 755761]) ("org-with-remote-undo" function nil ("_buffer" "&rest" "_body") nil "Execute BODY while recording undo information in two buffers." nil [755763 756782]) ("org-agenda-undo" function nil nil ((user-visible . t)) "Undo a remote editing step in the agenda.
This undoes changes both in the agenda buffer and in the remote buffer
that have been changed along." nil [756784 758265]) ("org-verify-change-for-undo" function nil ("l1" "l2") nil "Verify that a real change occurred between the undo lists L1 and L2." nil [758267 758511]) ("org-agenda-restrict" variable nil nil nil nil nil [758534 758566]) ("org-agenda-restrict-begin" variable nil (make-marker) nil nil nil [758567 758615]) ("org-agenda-restrict-end" variable nil (make-marker) nil nil nil [758616 758662]) ("org-agenda-last-dispatch-buffer" variable nil nil nil nil nil [758663 758707]) ("org-agenda" function nil ("arg" "&optional" "keys" "restriction") ((user-visible . t)) "Dispatch agenda commands to collect entries to the agenda buffer.
Prompts for a command to execute.  Any prefix arg will be passed
on to the selected command.  The default selections are:

a     Call `org-agenda-list' to display the agenda for current day or week.
t     Call `org-todo-list' to display the global todo list.
T     Call `org-todo-list' to display the global todo list, select only
      entries with a specific TODO keyword (the user gets a prompt).
m     Call `org-tags-view' to display headlines with tags matching
      a condition  (the user is prompted for the condition).
M     Like `m', but select only TODO entries, no ordinary headlines.
L     Create a timeline for the current buffer.
e     Export views to associated files.

More commands can be added by configuring the variable
`org-agenda-custom-commands'.  In particular, specific tags and TODO keyword
searches can be pre-defined in this way.

If the current buffer is in Org-mode and visiting a file, you can also
first press `<' once to indicate that the agenda should be temporarily
(until the next use of \\[org-agenda]) restricted to the current file.
Pressing `<' twice means to restrict to the current subtree or region
(if active)." nil [758724 764945]) ("org-agenda-get-restriction-and-command" function nil ("prefix-descriptions") nil "The user interface for selecting an agenda command." nil [764947 771183]) ("org-run-agenda-series" function nil ("name" "series") nil (org-prepare-agenda name) nil [771185 772550]) ("org-batch-agenda" function nil ("cmd-key" "&rest" "parameters") nil "Run an agenda command in batch mode and send the result to STDOUT.
If CMD-KEY is a string of length 1, it is used as a key in
`org-agenda-custom-commands' and triggers this command.  If it is a
longer string is is used as a tags/todo match string.
Paramters are alternating variable names and values that will be bound
before running the agenda command." nil [772567 773385]) ("org-encode-for-stdout" function nil ("string") nil (if (fboundp (quote encode-coding-string)) (encode-coding-string string buffer-file-coding-system) string) nil [773387 773537]) ("org-agenda-info" variable nil nil nil nil nil [773539 773567]) ("org-batch-agenda-csv" function nil ("cmd-key" "&rest" "parameters") nil "Run an agenda command in batch mode and send the result to STDOUT.
If CMD-KEY is a string of length 1, it is used as a key in
`org-agenda-custom-commands' and triggers this command.  If it is a
longer string is is used as a tags/todo match string.
Paramters are alternating variable names and values that will be bound
before running the agenda command.

The output gives a line for each selected agenda item.  Each
item is a list of comma-separated values, like this:

category,head,type,todo,tags,date,time,extra,priority-l,priority-n

category     The category of the item
head         The headline, without TODO kwd, TAGS and PRIORITY
type         The type of the agenda entry, can be
                todo               selected in TODO match
                tagsmatch          selected in tags match
                diary              imported from diary
                deadline           a deadline on given date
                scheduled          scheduled on given date
                timestamp          entry has timestamp on given date
                closed             entry was closed on given date
                upcoming-deadline  warning about deadline
                past-scheduled     forwarded scheduled item
                block              entry has date block including g. date
todo         The todo keyword, if any
tags         All tags including inherited ones, separated by colons
date         The relevant date, like 2007-2-14
time         The time, like 15:00-16:50
extra        Sting with extra planning info
priority-l   The priority letter if any was given
priority-n   The computed numerical priority
agenda-day   The day in the agenda where this is listed" nil [773584 776371]) ("org-fix-agenda-info" function nil ("props") nil "Make sure all properties on an agenda item have a canonical form,
so the the export commands caneasily use it." nil [776373 777856]) ("org-agenda-export-csv-mapper" function nil ("prop") nil (let ((res (plist-get org-agenda-info prop))) (setq res (cond ((not res) "") ((stringp res) res) (t (prin1-to-string res)))) (while (string-match "," res) (setq res (replace-match ";" t t res))) (org-trim res)) nil [777858 778175]) ("org-store-agenda-views" function nil ("&rest" "parameters") nil (interactive) nil [778193 778304]) ("org-batch-store-agenda-views" function nil ("&rest" "parameters") nil "Run all custom agenda commands that have a file argument." nil [778356 779501]) ("org-write-agenda" function nil ("file" "&optional" "nosettings") ((user-visible . t)) "Write the current buffer (an agenda view) as a file.
Depending on the extension of the file name, plain text (.txt),
HTML (.html or .htm) or Postscript (.ps) is produced.
If NOSETTINGS is given, do not scope the settings of
`org-agenda-exporter-settings' into the export commands.  This is used when
the settings have already been scoped and we do not wish to overrule other,
higher priority settings." nil [779503 781389]) ("org-no-read-only" function nil ("&rest" "body") nil "Inhibit read-only for BODY." nil [781391 781503]) ("org-check-for-org-mode" function nil nil nil "Make sure current buffer is in org-mode.  Error if not." nil [781505 781714]) ("org-fit-agenda-window" function nil nil nil "Fit the window to the buffer size." nil [781716 782077]) ("org-agenda-files" function nil ("&optional" "unrestricted") nil "Get the list of agenda files.
Optional UNRESTRICTED means return the full list even if a restriction
is currently in place." nil [782101 783091]) ("org-edit-agenda-file-list" function nil nil ((user-visible . t)) "Edit the list of agenda files.
Depending on setup, this either uses customize to edit the variable
`org-agenda-files', or it visits the file that is holding the list.  In the
latter case, the buffer is set up in a way that saving it automatically kills
the buffer and restores the previous window configuration." nil [783150 784238]) ("org-store-new-agenda-file-list" function nil ("list") nil "Set new value for the agenda file list and save it correcly." nil [784240 784743]) ("org-read-agenda-file-list" function nil nil nil "Read the list of agenda files from a file." nil [784745 785004]) ("org-cycle-agenda-files" function nil nil ((user-visible . t)) "Cycle through the files in `org-agenda-files'.
If the current buffer visits an agenda file, find the next one in the list.
If the current buffer does not, find the first agenda file." nil [785022 785767]) ("org-agenda-file-to-front" function nil ("&optional" "to-end") ((user-visible . t)) "Move/add the current file to the top of the agenda file list.
If the file is not present in the list, it is added to the front.  If it is
present, it is moved there.  With optional argument TO-END, add/move to the
end of the list." nil [785769 786800]) ("org-remove-file" function nil ("&optional" "file") ((user-visible . t)) "Remove current file from the list of files in variable `org-agenda-files'.
These are the files which are being checked for agenda entries.
Optional argument FILE means, use this file instead of the current." nil [786802 787789]) ("org-file-menu-entry" function nil ("file") nil (vector file (list (quote find-file) file) t) nil [787791 787866]) ("org-check-agenda-file" function nil ("file") nil "Make sure FILE exists.  If not, ask user what to do." nil [787868 788277]) ("org-agenda-multi" variable nil nil nil nil nil [788312 788341]) ("org-agenda-buffer-name" variable nil "*Org Agenda*" nil nil nil [788365 788411]) ("org-pre-agenda-window-conf" variable nil nil nil nil nil [788412 788451]) ("org-agenda-name" variable nil nil nil nil nil [788452 788480]) ("org-prepare-agenda" function nil ("&optional" "name") nil (setq org-todo-keywords-for-agenda nil) nil [788481 790055]) ("org-finalize-agenda" function nil nil nil "Finishing touch for the agenda buffer, called just before displaying it." nil [790057 791070]) ("org-fontify-priorities" function nil nil ((user-visible . t)) "Make highest priority lines bold, and lowest italic." nil [791072 792226]) ("org-prepare-agenda-buffers" function nil ("files") ((user-visible . t)) "Create buffers for all agenda files, protect archived trees and comments." nil [792228 793747]) ("org-agenda-skip-function" variable nil nil nil "Function to be called at each match during agenda construction.
If this function returns nil, the current match should not be skipped.
Otherwise, the function must return a position from where the search
should be continued.
This may also be a Lisp form, it will be evaluated.
Never set this variable using `setq' or so, because then it will apply
to all future agenda commands.  Instead, bind it with `let' to scope
it dynamically into the agenda-constructing command.  A good way to set
it is through options in org-agenda-custom-commands." nil [793749 794332]) ("org-agenda-skip" function nil nil nil "Throw to `:skip' in places that should be skipped.
Also moves point to the end of the skipped region, so that search can
continue from there." nil [794334 795252]) ("org-agenda-markers" variable nil nil nil "List of all currently active markers created by `org-agenda'." nil [795254 795351]) ("org-agenda-last-marker-time" variable nil (time-to-seconds (current-time)) nil "Creation time of the last agenda marker." nil [795352 795466]) ("org-agenda-new-marker" function nil ("&optional" "pos") nil "Return a new agenda marker.
Org-mode keeps a list of these markers and resets them when they are
no longer in use." nil [795468 795787]) ("org-agenda-maybe-reset-markers" function nil ("&optional" "force") nil "Reset markers created by `org-agenda'.  But only if they are old enough." nil [795789 796163]) ("org-agenda-new-buffers" variable nil nil nil "Buffers created to visit agenda files." nil [796165 796243]) ("org-get-agenda-file-buffer" function nil ("file") nil "Get a buffer visiting FILE.  If the buffer needs to be created, add
it to the list of buffers which might be released later." nil [796245 796655]) ("org-release-buffers" function nil ("blist") nil "Release all buffers in list, asking the user for confirmation when needed.
When a buffer is unmodified, it is just killed.  When modified, it is saved
(if the user agrees) and then killed." nil [796657 797177]) ("org-get-category" function nil ("&optional" "pos") nil "Get the category applying to position POS." nil [797179 797319]) ("org-agenda-only-exact-dates" variable nil nil nil nil nil [797342 797382]) ("org-timeline" function nil ("&optional" "include-all") ((user-visible . t)) "Show a time-sorted view of the entries in the current org file.
Only entries with a time stamp of today or later will be listed.  With
\\[universal-argument] prefix, all unfinished TODO items will also be shown,
under the current date.
If the buffer contains an active region, only check the region for
dates." nil [797405 801100]) ("org-get-all-dates" function nil ("beg" "end" "&optional" "no-ranges" "force-today" "inactive" "empty") nil "Return a list of all relevant day numbers from BEG to END buffer positions.
If NO-RANGES is non-nil, include only the start and end dates of a range,
not every single day in the range.  If FORCE-TODAY is non-nil, make
sure that TODAY is included in the list.  If INACTIVE is non-nil, also
inactive time stamps (those in square brackets) are included.
When EMPTY is non-nil, also include days without any entries." nil [801102 802993]) ("org-agenda-overriding-arguments" variable nil nil nil nil nil [803020 803064]) ("org-agenda-start-day" variable nil nil nil nil nil [803096 803129]) ("org-agenda-last-arguments" variable nil nil nil "The arguments of the previous call to org-agenda" nil [803161 803252]) ("org-starting-day" variable nil nil nil nil nil [803253 803282]) ("org-agenda-span" variable nil nil nil nil nil [803321 803349]) ("org-include-all-loc" variable nil nil nil nil nil [803388 803420]) ("org-agenda-remove-date" variable nil nil nil nil nil [803438 803473]) ("org-agenda-list" function nil ("&optional" "include-all" "start-day" "ndays") ((user-visible . t)) "Produce a daily/weekly view from all files in variable `org-agenda-files'.
The view will be for the current day or week, but from the overview buffer
you will be able to go to other days/weeks.

With one \\[universal-argument] prefix argument INCLUDE-ALL,
all unfinished TODO items will also be shown, before the agenda.
This feature is considered obsolete, please use the TODO list or a block
agenda instead.

With a numeric prefix argument in an interactive call, the agenda will
span INCLUDE-ALL days.  Lisp programs should instead specify NDAYS to change
the number of days.  NDAYS defaults to `org-agenda-ndays'.

START-DAY defaults to TODAY, or to the most recent match for the weekday
given in `org-agenda-start-on-weekday'." nil [803511 810124]) ("org-agenda-ndays-to-span" function nil ("n") nil (cond ((< n 7) (quote day)) ((= n 7) (quote week)) ((< n 32) (quote month)) (t (quote year))) nil [810126 810230]) ("org-select-this-todo-keyword" variable nil nil nil nil nil [810254 810295]) ("org-last-arg" variable nil nil nil nil nil [810296 810321]) ("org-todo-list" function nil ("arg") ((user-visible . t)) "Show all TODO entries from all agenda file in a single list.
The prefix arg can be used to select a specific TODO keyword and limit
the list to these.  When using \\[universal-argument], you will be prompted
for a keyword.  A numeric prefix directly selects the Nth keyword in
`org-todo-keywords-1'." nil [810338 813114]) ("org-tags-view" function nil ("&optional" "todo-only" "match") ((user-visible . t)) "Show all headlines for all `org-agenda-files' matching a TAGS criterion.
The prefix arg TODO-ONLY limits the search to TODO entries." nil [813154 815920]) ("org-agenda-skip-regexp" variable nil nil nil "Regular expression used in skipping subtrees for the agenda.
This is basically a temporary global variable that can be set and then
used by user-defined selections using `org-agenda-skip-function'." nil [815957 816194]) ("org-agenda-overriding-header" variable nil nil nil "When this is set during todo and tags searches, will replace header." nil [816196 816310]) ("org-agenda-skip-subtree-when-regexp-matches" function nil nil nil "Checks if the current subtree contains match for `org-agenda-skip-regexp'.
If yes, it returns the end position of this tree, causing agenda commands
to skip this subtree.  This is a function that can be put into
`org-agenda-skip-function' for the duration of a command." nil [816312 816816]) ("org-agenda-skip-entry-if" function nil ("&rest" "conditions") nil "Skip entry if any of CONDITIONS is true.
See `org-agenda-skip-if for details." nil [816818 816989]) ("org-agenda-skip-subtree-if" function nil ("&rest" "conditions") nil "Skip entry if any of CONDITIONS is true.
See `org-agenda-skip-if for details." nil [816990 817161]) ("org-agenda-skip-if" function nil ("subtree" "conditions") nil "Checks current entity for CONDITIONS.
If SUBTREE is non-nil, the entire subtree is checked.  Otherwise, only
the entry, i.e. the text before the next heading is checked.

CONDITIONS is a list of symbols, boolean OR is used to combine the results
from different tests.  Valid conditions are:

scheduled     Check if there is a scheduled cookie
notscheduled  Check if there is no scheduled cookie
deadline      Check if there is a deadline
notdeadline   Check if there is no deadline
regexp        Check if regexp matches
notregexp     Check if regexp does not match.

The regexp is taken from the conditions list, it must com right after the
`regexp' of `notregexp' element.

If any of these conditions is met, this function returns the end point of
the entity, causing the search to continue from there.  This is a function
that can be put into `org-agenda-skip-function' for the duration of a command." nil [817163 819090]) ("org-agenda-list-stuck-projects" function nil ("&rest" "ignore") ((user-visible . t)) "Create agenda view for projects that are stuck.
Stuck projects are project that have no next actions.  For the definitions
of what a project is and how to check if it stuck, customize the variable
`org-stuck-projects'.
MATCH is being ignored." nil [819092 821190]) ("org-disable-agenda-to-diary" variable nil nil nil nil nil [821215 821255]) ("org-get-entries-from-diary" function nil ("date") nil "Get the (Emacs Calendar) diary entries for DATE." nil [821293 823094]) ("org-agenda-cleanup-fancy-diary" function nil nil nil "Remove unwanted stuff in buffer created by `fancy-diary-display'.
This gets rid of the date, the underline under the date, and
the dummy entry installed by `org-mode' to ensure non-empty diary for each
date.  It also removes lines that contain only whitespace." nil [823096 823947]) ("eval-after-load" code nil [824017 824538]) ("org-modify-diary-entry-string" function nil ("string") nil "Add text properties to string, allowing org-mode to act on it." nil [824540 825014]) ("org-diary-default-entry" function nil nil nil "Add a dummy entry to the diary.
Needed to avoid empty dates which mess up holiday display." nil [825016 825413]) ("org-diary" function nil ("&rest" "args") nil "Return diary information from org-files.
This function can be used in a \"sexp\" diary entry in the Emacs calendar.
It accesses org files and extracts information from those files to be
listed in the diary.  The function accepts arguments specifying what
items should be listed.  The following arguments are allowed:

   :timestamp    List the headlines of items containing a date stamp or
                 date range matching the selected date.  Deadlines will
                 also be listed, on the expiration day.

   :sexp         List entries resulting from diary-like sexps.

   :deadline     List any deadlines past due, or due within
                 `org-deadline-warning-days'.  The listing occurs only
                 in the diary for *today*, not at any other date.  If
                 an entry is marked DONE, it is no longer listed.

   :scheduled    List all items which are scheduled for the given date.
                 The diary for *today* also contains items which were
                 scheduled earlier and are not yet marked DONE.

   :todo         List all TODO items from the org-file.  This may be a
                 long list - so this is not turned on by default.
                 Like deadlines, these entries only show up in the
                 diary for *today*, not at any other date.

The call in the diary file should look like this:

   &%%(org-diary) ~/path/to/some/orgfile.org

Use a separate line for each org file to check.  Or, if you omit the file name,
all files listed in `org-agenda-files' will be checked automatically:

   &%%(org-diary)

If you don't give any arguments (as in the example above), the default
arguments (:deadline :scheduled :timestamp :sexp) are used.
So the example above may also be written as

   &%%(org-diary :deadline :timestamp :sexp :scheduled)

The function expects the lisp variables `entry' and `date' to be provided
by the caller, because this is how the calendar works.  Don't use this
function from a program - use `org-agenda-get-day-entries' instead." nil [825430 828305]) ("org-agenda-get-day-entries" function nil ("file" "date" "&rest" "args") nil "Does the work for `org-diary' and `org-agenda'.
FILE is the path to a file to be checked for entries.  DATE is date like
the one returned by `calendar-current-date'.  ARGS are symbols indicating
which kind of entries should be extracted.  For details about these, see
the documentation of `org-diary'." nil [828333 830799]) ("org-entry-is-todo-p" function nil nil nil (member (org-get-todo-state) org-not-done-keywords) nil [831068 831152]) ("org-entry-is-done-p" function nil nil nil (member (org-get-todo-state) org-done-keywords) nil [831154 831234]) ("org-get-todo-state" function nil nil nil (save-excursion (org-back-to-heading t) (and (looking-at org-todo-line-regexp) (match-end 2) (match-string 2))) nil [831236 831405]) ("org-at-date-range-p" function nil ("&optional" "inactive-ok") ((user-visible . t)) "Is the cursor inside a date range?" nil [831407 832022]) ("org-agenda-get-todos" function nil nil nil "Return the TODO information for agenda display." nil [832024 834791]) ("org-agenda-no-heading-message" variable nil "No heading for this item in buffer or region." ((const . t)) nil nil [834793 834883]) ("org-agenda-get-timestamps" function nil nil nil "Return the date stamp information for agenda display." nil [834885 838341]) ("org-agenda-get-sexps" function nil nil nil "Return the sexp information for agenda display." nil [838343 839916]) ("org-agenda-get-closed" function nil nil nil "Return the logged TODO entries for agenda display." nil [839918 842424]) ("org-agenda-get-deadlines" function nil nil nil "Return the deadline information for agenda display." nil [842426 846107]) ("org-agenda-deadline-face" function nil ("fraction") nil "Return the face to displaying a deadline item.
FRACTION is what fraction of the head-warning time has passed." nil [846109 846422]) ("org-agenda-get-scheduled" function nil nil nil "Return the scheduled information for agenda display." nil [846424 849944]) ("org-agenda-get-blocks" function nil nil nil "Return the date-range information for agenda display." nil [849946 852302]) ("org-plain-time-of-day-regexp" variable nil (concat "\\(\\<[012]?[0-9]" "\\(\\(:\\([0-5][0-9]\\([AaPp][Mm]\\)?\\)\\)\\|\\([AaPp][Mm]\\)\\)\\>\\)" "\\(--?" "\\(\\<[012]?[0-9]" "\\(\\(:\\([0-5][0-9]\\([AaPp][Mm]\\)?\\)\\)\\|\\([AaPp][Mm]\\)\\)\\>\\)" "\\)?") ((const . t)) "Regular expression to match a plain time or time range.
Examples:  11:45 or 8am-13:15 or 2:45-2:45pm.  After a match, the following
groups carry important information:
0  the full match
1  the first time, range or not
8  the second time, if it is a range." nil [852341 852873]) ("org-plain-time-extension-regexp" variable nil (concat "\\(\\<[012]?[0-9]" "\\(\\(:\\([0-5][0-9]\\([AaPp][Mm]\\)?\\)\\)\\|\\([AaPp][Mm]\\)\\)\\>\\)" "\\+\\([0-9]+\\)\\(:\\([0-5][0-9]\\)\\)?") ((const . t)) "Regular expression to match a time range like 13:30+2:10 = 13:30-15:40.
Examples:  11:45 or 8am-13:15 or 2:45-2:45pm.  After a match, the following
groups carry important information:
0  the full match
7  hours of duration
9  minutes of duration" nil [852875 853323]) ("org-stamp-time-of-day-regexp" variable nil (concat "<\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} +\\sw+ +\\)" "\\([012][0-9]:[0-5][0-9]\\(-\\([012][0-9]:[0-5][0-9]\\)\\)?[^
>]*?\\)>" "\\(--?" "<\\1\\([012][0-9]:[0-5][0-9]\\)>\\)?") ((const . t)) "Regular expression to match a timestamp time or time range.
After a match, the following groups carry important information:
0  the full match
1  date plus weekday, for backreferencing to make sure both times on same day
2  the first time, range or not
4  the second time, if it is a range." nil [853325 853863]) ("org-prefix-has-time" variable nil nil nil "A flag, set by `org-compile-prefix-format'.
The flag is set if the currently compiled format contains a `%t'." nil [853865 854011]) ("org-prefix-has-tag" variable nil nil nil "A flag, set by `org-compile-prefix-format'.
The flag is set if the currently compiled format contains a `%T'." nil [854012 854157]) ("org-format-agenda-item" function nil ("extra" "txt" "&optional" "category" "tags" "dotime" "noprefix" "remove-re") nil "Format TXT to be inserted into the agenda buffer.
In particular, it adds the prefix and corresponding text properties.  EXTRA
must be a string and replaces the `%s' specifier in the prefix format.
CATEGORY (string, symbol or nil) may be used to overrule the default
category taken from local variable or file name.  It will replace the `%c'
specifier in the format.  DOTIME, when non-nil, indicates that a
time-of-day should be extracted from TXT for sorting of this entry, and for
the `%t' specifier in the format.  When DOTIME is a string, this string is
searched for a time before TXT is.  NOPREFIX is a flag and indicates that
only the correctly processes TXT should be returned - this is used by
`org-agenda-change-all-lines'.  TAGS can be the tags of the headline.
Any match of REMOVE-RE will be removed from TXT." nil [854159 859142]) ("org-agenda-sorting-strategy" variable nil nil nil nil nil [859144 859180]) ("org-agenda-sorting-strategy-selected" variable nil nil nil nil nil [859207 859256]) ("org-agenda-add-time-grid-maybe" function nil ("list" "ndays" "todayp") nil (catch (quote exit) (cond ((not org-agenda-use-time-grid) (throw (quote exit) list)) ((and todayp (member (quote today) (car org-agenda-time-grid)))) ((and (= ndays 1) (member (quote daily) (car org-agenda-time-grid)))) ((member (quote weekly) (car org-agenda-time-grid))) (t (throw (quote exit) list))) (let* ((have (delq nil (mapcar (lambda (x) (get-text-property 1 (quote time-of-day) x)) list))) (string (nth 1 org-agenda-time-grid)) (gridtimes (nth 2 org-agenda-time-grid)) (req (car org-agenda-time-grid)) (remove (member (quote remove-match) req)) new time) (if (and (member (quote require-timed) req) (not have)) (throw (quote exit) list)) (while (setq time (pop gridtimes)) (unless (and remove (member time have)) (setq time (int-to-string time)) (push (org-format-agenda-item nil string "" nil (concat (substring time 0 -2) ":" (substring time -2))) new) (put-text-property 1 (length (car new)) (quote face) (quote org-time-grid) (car new)))) (if (member (quote time-up) org-agenda-sorting-strategy-selected) (append new list) (append list new)))) nil [859258 860624]) ("org-compile-prefix-format" function nil ("key") nil "Compile the prefix format into a Lisp form that can be evaluated.
The resulting form is returned and stored in the variable
`org-prefix-format-compiled'." nil [860626 862170]) ("org-set-sorting-strategy" function nil ("key") nil (if (symbolp (car org-agenda-sorting-strategy)) (setq org-agenda-sorting-strategy-selected org-agenda-sorting-strategy) (setq org-agenda-sorting-strategy-selected (or (cdr (assq key org-agenda-sorting-strategy)) (cdr (assq (quote agenda) org-agenda-sorting-strategy)) (quote (time-up category-keep priority-down))))) nil [862172 862587]) ("org-get-time-of-day" function nil ("s" "&optional" "string" "mod24") nil "Check string S for a time of day.
If found, return it as a military time number between 0 and 2400.
If not found, return nil.
The optional STRING argument forces conversion into a 5 character wide string
HH:MM." nil [862589 863861]) ("org-finalize-agenda-entries" function nil ("list" "&optional" "nosort") nil "Sort and concatenate the agenda items." nil [863863 864107]) ("org-agenda-highlight-todo" function nil ("x") nil (let (re pl) (if (eq x (quote line)) (save-excursion (beginning-of-line 1) (setq re (get-text-property (point) (quote org-todo-regexp))) (goto-char (+ (point) (or (get-text-property (point) (quote prefix-length)) 0))) (and (looking-at (concat "[ 	]*\\.*" re)) (add-text-properties (match-beginning 0) (match-end 0) (list (quote face) (org-get-todo-face 0))))) (setq re (concat (get-text-property 0 (quote org-todo-regexp) x)) pl (get-text-property 0 (quote prefix-length) x)) (and re (equal (string-match (concat "\\(\\.*\\)" re) x (or pl 0)) pl) (add-text-properties (or (match-end 1) (match-end 0)) (match-end 0) (list (quote face) (org-get-todo-face (match-string 2 x))) x)) x)) nil [864109 864962]) ("org-cmp-priority" function nil ("a" "b") nil "Compare the priorities of string A and B." nil [864964 865222]) ("org-cmp-category" function nil ("a" "b") nil "Compare the string values of categories of strings A and B." nil [865224 865532]) ("org-cmp-tag" function nil ("a" "b") nil "Compare the string values of categories of strings A and B." nil [865534 865879]) ("org-cmp-time" function nil ("a" "b") nil "Compare the time-of-day values of strings A and B." nil [865881 866215]) ("org-entries-lessp" function nil ("a" "b") nil "Predicate for sorting agenda entries." nil [866217 866980]) ("org-agenda-check-type" function nil ("error" "&rest" "types") nil "Check if agenda buffer is of allowed type.
If ERROR is non-nil, throw an error, otherwise just return nil." nil [867003 867304]) ("org-agenda-quit" function nil nil ((user-visible . t)) "Exit agenda by removing the window or the buffer." nil [867306 867833]) ("org-agenda-exit" function nil nil ((user-visible . t)) "Exit agenda by removing the window or the buffer.
Also kill all Org-mode buffers which have been loaded by `org-agenda'.
Org-mode buffers visited directly by the user will not be touched." nil [867835 868172]) ("org-save-all-org-buffers" function nil nil ((user-visible . t)) "Save all Org-mode buffers without user confirmation." nil [868174 868413]) ("org-agenda-redo" function nil nil ((user-visible . t)) "Rebuild Agenda.
When this is the global TODO list, a prefix argument will be interpreted." nil [868415 869022]) ("org-agenda-goto-date" function nil ("date") ((user-visible . t)) "Jump to DATE in agenda." nil [869024 869155]) ("org-agenda-goto-today" function nil nil ((user-visible . t)) "Go to today." nil [869157 869859]) ("org-agenda-find-same-or-today-or-agenda" function nil ("&optional" "cnt") nil (goto-char (or (and cnt (text-property-any (point-min) (point-max) (quote org-day-cnt) cnt)) (text-property-any (point-min) (point-max) (quote org-today) t) (text-property-any (point-min) (point-max) (quote org-agenda-type) (quote agenda)) (point-min))) nil [869861 870176]) ("org-agenda-later" function nil ("arg") ((user-visible . t)) "Go forward in time by thee current span.
With prefix ARG, go forward that many times the current span." nil [870178 871388]) ("org-agenda-earlier" function nil ("arg") ((user-visible . t)) "Go backward in time by the current span.
With prefix ARG, go backward that many times the current span." nil [871390 871579]) ("org-agenda-day-view" function nil nil ((user-visible . t)) "Switch to daily view for agenda." nil [871581 871729]) ("org-agenda-week-view" function nil nil ((user-visible . t)) "Switch to daily view for agenda." nil [871730 871880]) ("org-agenda-month-view" function nil nil ((user-visible . t)) "Switch to daily view for agenda." nil [871881 872005]) ("org-agenda-year-view" function nil nil ((user-visible . t)) "Switch to daily view for agenda." nil [872006 872237]) ("org-agenda-change-time-span" function nil ("span") nil "Change the agenda view to SPAN.
SPAN may be `day', `week', `month', `year'." nil [872239 872907]) ("org-agenda-compute-time-span" function nil ("sd" "span") nil "Compute starting date and number of days for agenda.
SPAN may be `day', `week', `month', `year'.  The return value
is a cons cell with the starting date and the number of days,
so that the date SD will be in that range." nil [872909 874123]) ("org-agenda-next-date-line" function nil ("&optional" "arg") ((user-visible . t)) "Jump to the next line indicating a date in agenda buffer." nil [874200 874633]) ("org-agenda-previous-date-line" function nil ("&optional" "arg") ((user-visible . t)) "Jump to the previous line indicating a date in agenda buffer." nil [874635 874961]) ("org-hl" variable nil (org-make-overlay 1 1) nil nil nil [874991 875029]) ("org-overlay-put" code nil [875030 875071]) ("org-highlight" function nil ("begin" "end" "&optional" "buffer") nil "Highlight a region with overlay." nil [875073 875289]) ("org-unhighlight" function nil nil nil "Detach overlay INDEX." nil [875291 875417]) ("org-highlight-until-next-command" function nil ("beg" "end" "&optional" "buffer") nil (org-highlight beg end buffer) nil [875456 875609]) ("org-unhighlight-once" function nil nil nil (remove-hook (quote pre-command-hook) (quote org-unhighlight-once)) nil [875610 875717]) ("org-agenda-follow-mode" function nil nil ((user-visible . t)) "Toggle follow mode in an agenda buffer." nil [875719 875984]) ("org-agenda-log-mode" function nil nil ((user-visible . t)) "Toggle log mode in an agenda buffer." nil [875986 876299]) ("org-agenda-toggle-diary" function nil nil ((user-visible . t)) "Toggle diary inclusion in an agenda buffer." nil [876301 876641]) ("org-agenda-toggle-time-grid" function nil nil ((user-visible . t)) "Toggle time grid in an agenda buffer." nil [876643 876975]) ("org-agenda-set-mode-name" function nil nil nil "Set the mode name to indicate all the small mode settings." nil [876977 877517]) ("org-agenda-post-command-hook" function nil nil nil (and (eolp) (not (bolp)) (backward-char 1)) nil [877519 877785]) ("org-agenda-show-priority" function nil nil ((user-visible . t)) "Show the priority of the current item.
This priority is composed of the main priority given with the [#A] cookies,
and by additional input from the age of a schedules or deadline entry." nil [877787 878140]) ("org-agenda-show-tags" function nil nil ((user-visible . t)) "Show the tags applicable to the current item." nil [878142 878466]) ("org-agenda-goto" function nil ("&optional" "highlight") ((user-visible . t)) "Go to the Org-mode file which contains the item at point." nil [878468 879139]) ("org-agenda-after-show-hook" variable nil nil nil "Normal hook run after an item has been shown from the agenda.
Point is in the buffer where the item originated." nil [879141 879296]) ("org-agenda-kill" function nil nil ((user-visible . t)) "Kill the entry or subtree belonging to the current agenda entry." nil [879298 880758]) ("org-agenda-archive" function nil nil ((user-visible . t)) "Kill the entry or subtree belonging to the current agenda entry." nil [880760 881466]) ("org-remove-subtree-entries-from-agenda" function nil ("&optional" "buf" "beg" "end") nil "Remove all lines in the agenda that correspond to a given subtree.
The subtree is the one in buffer BUF, starting at BEG and ending at END.
If this information is not given, the function uses the tree at point." nil [881468 882511]) ("org-agenda-open-link" function nil nil ((user-visible . t)) "Follow the link in the current line, if any." nil [882513 882796]) ("org-agenda-copy-local-variable" function nil ("var") nil "Get a variable from a referenced buffer and install it here." nil [882798 883126]) ("org-agenda-switch-to" function nil ("&optional" "delete-other-windows") ((user-visible . t)) "Go to the Org-mode file which contains the item at point." nil [883128 883722]) ("org-agenda-goto-mouse" function nil ("ev") ((user-visible . t)) "Go to the Org-mode file which contains the item at the mouse click." nil [883749 883918]) ("org-agenda-show" function nil nil ((user-visible . t)) "Display the Org-mode file which contains the item at point." nil [883920 884108]) ("org-agenda-recenter" function nil ("arg") ((user-visible . t)) "Display the Org-mode file which contains the item at point and recenter." nil [884110 884341]) ("org-agenda-show-mouse" function nil ("ev") ((user-visible . t)) "Display the Org-mode file which contains the item at the mouse click." nil [884343 884514]) ("org-agenda-check-no-diary" function nil nil nil "Check if the entry is a diary link and abort if yes." nil [884516 884692]) ("org-agenda-error" function nil nil nil (error "Command not allowed in this line") nil [884694 884766]) ("org-agenda-tree-to-indirect-buffer" function nil nil ((user-visible . t)) "Show the subtree corresponding to the current entry in an indirect buffer.
This calls the command `org-tree-to-indirect-buffer' from the original
Org-mode buffer.
With numerical prefix arg ARG, go up to this level and then take that tree.
With a C-u prefix, make a separate frame for this tree (i.e. don't use the
dedicated frame)." nil [884768 885519]) ("org-last-heading-marker" variable nil (make-marker) nil "Marker pointing to the headline that last changed its TODO state
by a remote command from the agenda." nil [885521 885673]) ("org-agenda-todo-nextset" function nil nil ((user-visible . t)) "Switch TODO entry to next sequence." nil [885675 885794]) ("org-agenda-todo-previousset" function nil nil ((user-visible . t)) "Switch TODO entry to previous sequence." nil [885796 885927]) ("org-agenda-todo" function nil ("&optional" "arg") ((user-visible . t)) "Cycle TODO state of line at point, also in Org-mode file.
This changes the line at point, all other lines in the agenda referring to
the same tree node, and the headline of the tree node in the Org-mode file." nil [885929 887189]) ("org-agenda-change-all-lines" function nil ("newhead" "hdmarker" "&optional" "fixface") nil "Change all lines in the agenda buffer which match HDMARKER.
The new content of the line will be NEWHEAD (as modified by
`org-format-agenda-item').  HDMARKER is checked with
`equal' against all `org-hd-marker' text properties in the file.
If FIXFACE is non-nil, the face of each item is modified acording to
the new TODO state." nil [887191 889210]) ("org-agenda-align-tags" function nil ("&optional" "line") nil "Align all tags in agenda items to `org-agenda-tags-column'." nil [889212 890229]) ("org-agenda-priority-up" function nil nil ((user-visible . t)) "Increase the priority of line at point, also in Org-mode file." nil [890231 890375]) ("org-agenda-priority-down" function nil nil ((user-visible . t)) "Decrease the priority of line at point, also in Org-mode file." nil [890377 890525]) ("org-agenda-priority" function nil ("&optional" "force-direction") ((user-visible . t)) "Set the priority of line at point, also in Org-mode file.
This changes the line at point, all other lines in the agenda referring to
the same tree node, and the headline of the tree node in the Org-mode file." nil [890527 891608]) ("org-get-tags-at" function nil ("&optional" "pos") ((user-visible . t)) "Get a list of all headline tags applicable at POS.
POS defaults to point.  If tags are inherited, the list contains
the targets in the same sequence as the headlines appear, i.e.
the tags of the current headline come last." nil [891610 892590]) ("org-agenda-set-tags" function nil nil ((user-visible . t)) "Set tags for the current headline." nil [892651 893750]) ("org-agenda-toggle-archive-tag" function nil nil ((user-visible . t)) "Toggle the archive tag for the current entry." nil [893752 894683]) ("org-agenda-date-later" function nil ("arg" "&optional" "what") ((user-visible . t)) "Change the date of this item to one day later." nil [894685 895440]) ("org-agenda-date-earlier" function nil ("arg" "&optional" "what") ((user-visible . t)) "Change the date of this item to one day earlier." nil [895442 895606]) ("org-agenda-show-new-time" function nil ("marker" "stamp" "&optional" "prefix") nil "Show new date stamp via text properties." nil [895608 896733]) ("org-agenda-date-prompt" function nil ("arg") ((user-visible . t)) "Change the date of this item.  Date is prompted for, with default today.
The prefix ARG is passed to the `org-time-stamp' command and can therefore
be used to request time specification in the time stamp." nil [896735 897557]) ("org-agenda-schedule" function nil ("arg") ((user-visible . t)) "Schedule the item at point." nil [897559 898218]) ("org-agenda-deadline" function nil ("arg") ((user-visible . t)) "Schedule the item at point." nil [898220 898894]) ("org-get-heading" function nil ("&optional" "no-tags") nil "Return the heading of the current entry, without the stars." nil [898896 899247]) ("org-agenda-clock-in" function nil ("&optional" "arg") ((user-visible . t)) "Start the clock on the currently selected item." nil [899249 899703]) ("org-agenda-clock-out" function nil ("&optional" "arg") ((user-visible . t)) "Stop the currently running clock." nil [899705 899960]) ("org-agenda-clock-cancel" function nil ("&optional" "arg") ((user-visible . t)) "Cancel the currently running clock." nil [899962 900225]) ("org-agenda-diary-entry" function nil nil ((user-visible . t)) "Make a diary entry, like the `i' command from the calendar.
All the standard commands work: block, weekly etc." nil [900227 902216]) ("org-agenda-execute-calendar-command" function nil ("cmd") nil "Execute a calendar command from the agenda, with the date associated to
the cursor position." nil [902219 903270]) ("org-agenda-phases-of-moon" function nil nil ((user-visible . t)) "Display the phases of the moon for the 3 months around the cursor date." nil [903272 903465]) ("org-agenda-holidays" function nil nil ((user-visible . t)) "Display the holidays for the 3 months around the cursor date." nil [903467 903643]) ("org-agenda-sunrise-sunset" function nil ("arg") ((user-visible . t)) "Display sunrise and sunset for the cursor date.
Latitude and longitude can be specified with the variables
`calendar-latitude' and `calendar-longitude'.  When called with prefix
argument, latitude and longitude will be prompted for." nil [903645 904229]) ("org-agenda-goto-calendar" function nil nil ((user-visible . t)) "Open the Emacs calendar with the date at the cursor." nil [904231 904736]) ("org-calendar-goto-agenda" function nil nil ((user-visible . t)) "Compute the Org-mode agenda for the calendar date displayed at the cursor.
This is a command that has to be installed in `calendar-mode-map'." nil [904738 905067]) ("org-agenda-convert-date" function nil nil nil (interactive) nil [905069 906568]) ("org-cdlatex-mode-map" variable nil (make-sparse-keymap) nil "Keymap for the minor `org-cdlatex-mode'." nil [906592 906687]) ("org-defkey" code nil [906689 906756]) ("org-defkey" code nil [906757 906824]) ("org-defkey" code nil [906825 906883]) ("org-defkey" code nil [906884 906946]) ("org-defkey" code nil [906947 907009]) ("org-cdlatex-texmathp-advice-is-done" variable nil nil nil "Flag remembering if we have applied the advice to texmathp already." nil [907011 907131]) ("define-minor-mode" code nil [907133 908354]) ("turn-on-org-cdlatex" function nil nil nil "Unconditionally turn on `org-cdlatex-mode'." nil [908356 908457]) ("org-inside-LaTeX-fragment-p" function nil nil nil "Test if point is inside a LaTeX fragment.
I.e. after a \\begin, \\(, \\[, $, or $$, without the corresponding closing
sequence appearing also before point.
Even though the matchers for math are configurable, this function assumes
that \\begin, \\(, \\[, and $$ are always used.  Only the single dollar
delimiters are skipped when they have been removed by customization.
The return value is nil, or a cons cell with the delimiter and
and the position of this delimiter.

This function does a reasonably good job, but can locally be fooled by
for example currency specifications.  For example it will assume being in
inline math after \"$22.34\".  The LaTeX fragment formatter will only format
fragments that are properly closed, but during editing, we have to live
with the uncertainty caused by missing closing delimiters.  This function
looks only before point, not after." nil [908459 910590]) ("org-try-cdlatex-tab" function nil nil nil "Check if it makes sense to execute `cdlatex-tab', and do it if yes.
It makes sense to do so if `org-cdlatex-mode' is active and if the cursor is
  - inside a LaTeX fragment, or
  - after the first word in a line, where an abbreviation expansion could
    insert a LaTeX environment." nil [910593 911159]) ("org-cdlatex-underscore-caret" function nil ("&optional" "arg") ((user-visible . t)) "Execute `cdlatex-sub-superscript' in LaTeX fragments.
Revert to the normal definition outside of these fragments." nil [911161 911536]) ("org-cdlatex-math-modify" function nil ("&optional" "arg") ((user-visible . t)) "Execute `cdlatex-math-modify' in LaTeX fragments.
Revert to the normal definition outside of these fragments." nil [911538 911900]) ("org-latex-fragment-image-overlays" variable nil nil nil "List of overlays carrying the images of latex fragments." nil [911902 912009]) ("make-variable-buffer-local" code nil [912010 912073]) ("org-remove-latex-fragment-image-overlays" function nil nil nil "Remove all overlays with LaTeX fragment images in current buffer." nil [912075 912306]) ("org-preview-latex-fragment" function nil ("&optional" "subtree") ((user-visible . t)) "Preview the LaTeX fragment at point, or all locally or globally.
If the cursor is in a LaTeX fragment, create the image and overlay
it over the source code.  If there is no fragment at point, display
all fragments in the current text, from one headline to the next.  With
prefix SUBTREE, display all fragments in the current subtree.  With a
double prefix `C-u C-u', or when the cursor is before the first headline,
display all fragments in the buffer.
The images can be removed again with \\[org-ctrl-c-ctrl-c]." nil [912308 914178]) ("org-latex-regexps" variable nil (quote (("begin" "^[ 	]*\\(\\\\begin{\\([a-zA-Z0-9\\*]+\\)[^ ]+?\\\\end{\\2}\\)" 1 t) ("$" "\\([^$]\\)\\(\\(\\$\\([^      
,;.$][^$
]*?\\(
[^$
]*?\\)\\{0,2\\}[^        
,.$]\\)\\$\\)\\)\\([        .,?;:'\") ]\\|$\\)" 2 nil) ("\\(" "\\\\([^ ]*?\\\\)" 0 nil) ("\\[" "\\\\\\[[^ ]*?\\\\\\]" 0 t) ("$$" "\\$\\$[^ ]*?\\$\\$" 0 t))) nil "Regular expressions for matching embedded LaTeX." nil [914180 914856]) ("org-format-latex" function nil ("prefix" "&optional" "dir" "overlays" "msg" "at" "forbuffer") nil "Replace LaTeX fragments with links to an image, and produce images." nil [914858 917378]) ("org-create-formula-image" function nil ("string" "tofile" "options" "buffer") nil (let* ((tmpdir (if (featurep (quote xemacs)) (temp-directory) temporary-file-directory)) (texfilebase (make-temp-name (expand-file-name "orgtex" tmpdir))) (texfile (concat texfilebase ".tex")) (dvifile (concat texfilebase ".dvi")) (pngfile (concat texfilebase ".png")) (fnh (face-attribute (quote default) :height nil)) (scale (or (plist-get options (if buffer :scale :html-scale)) 1.0)) (dpi (number-to-string (* scale (floor (* 0.9 (if buffer fnh 140)))))) (fg (or (plist-get options (if buffer :foreground :html-foreground)) "Black")) (bg (or (plist-get options (if buffer :background :html-background)) "Transparent"))) (if (eq fg (quote default)) (setq fg (org-dvipng-color :foreground))) (if (eq bg (quote default)) (setq bg (org-dvipng-color :background))) (with-temp-file texfile (insert org-format-latex-header "
\\begin{document}
" string "
\\end{document}
")) (let ((dir default-directory)) (condition-case nil (progn (cd tmpdir) (call-process "latex" nil nil nil texfile)) (error nil)) (cd dir)) (if (not (file-exists-p dvifile)) (progn (message "Failed to create dvi file from %s" texfile) nil) (call-process "dvipng" nil nil nil "-E" "-fg" fg "-bg" bg "-D" dpi "-T" "tight" "-o" pngfile dvifile) (if (not (file-exists-p pngfile)) (progn (message "Failed to create png file from %s" texfile) nil) (copy-file pngfile tofile (quote replace)) (loop for e in (quote (".dvi" ".tex" ".aux" ".log" ".png")) do (delete-file (concat texfilebase e))) pngfile))) nil [917438 919467]) ("org-dvipng-color" function nil ("attr") nil "Return an rgb color specification for dvipng." nil [919469 919689]) ("org-normalize-color" function nil ("value") nil "Return string to be used as color value for an RGB component." nil [919691 919826]) ("org-level-max" variable nil 20 ((const . t)) nil nil [919892 919919]) ("org-export-html-preamble" variable nil nil nil "Preamble, to be inserted just after <body>.  Set by publishing functions." nil [919921 920036]) ("org-export-html-postamble" variable nil nil nil "Preamble, to be inserted just before </body>.  Set by publishing functions." nil [920037 920155]) ("org-export-html-auto-preamble" variable nil t nil "Should default preamble be inserted?  Set by publishing functions." nil [920156 920267]) ("org-export-html-auto-postamble" variable nil t nil "Should default postamble be inserted?  Set by publishing functions." nil [920268 920381]) ("org-current-export-file" variable nil nil nil nil nil [920382 920418]) ("org-current-export-dir" variable nil nil nil nil nil [920450 920485]) ("org-export-plist-vars" variable nil (quote ((:language . org-export-default-language) (:customtime . org-display-custom-times) (:headline-levels . org-export-headline-levels) (:section-numbers . org-export-with-section-numbers) (:table-of-contents . org-export-with-toc) (:preserve-breaks . org-export-preserve-breaks) (:archived-trees . org-export-with-archived-trees) (:emphasize . org-export-with-emphasize) (:sub-superscript . org-export-with-sub-superscripts) (:footnotes . org-export-with-footnotes) (:drawers . org-export-with-drawers) (:tags . org-export-with-tags) (:TeX-macros . org-export-with-TeX-macros) (:LaTeX-fragments . org-export-with-LaTeX-fragments) (:skip-before-1st-heading . org-export-skip-text-before-1st-heading) (:fixed-width . org-export-with-fixed-width) (:timestamps . org-export-with-timestamps) (:author-info . org-export-author-info) (:time-stamp-file . org-export-time-stamp-file) (:tables . org-export-with-tables) (:table-auto-headline . org-export-highlight-first-table-line) (:style . org-export-html-style) (:agenda-style . org-agenda-export-html-style) (:convert-org-links . org-export-html-link-org-files-as-html) (:inline-images . org-export-html-inline-images) (:html-extension . org-export-html-extension) (:expand-quoted-html . org-export-html-expand) (:timestamp . org-export-html-with-timestamp) (:publishing-directory . org-export-publishing-directory) (:preamble . org-export-html-preamble) (:postamble . org-export-html-postamble) (:auto-preamble . org-export-html-auto-preamble) (:auto-postamble . org-export-html-auto-postamble) (:author . user-full-name) (:email . user-mail-address))) ((const . t)) nil nil [920519 922596]) ("org-default-export-plist" function nil nil nil "Return the property list with default settings for the export variables." nil [922598 922855]) ("org-infile-export-plist" function nil nil nil "Return the property list with file-local settings for export." nil [922857 925093]) ("org-export-directory" function nil ("type" "plist") nil (let* ((val (plist-get plist :publishing-directory)) (dir (if (listp val) (or (cdr (assoc type val)) ".") val))) dir) nil [925095 925303]) ("org-skip-comments" function nil ("lines") nil "Skip lines starting with \"#\" and subtrees starting with COMMENT." nil [925305 926457]) ("org-export" function nil ("&optional" "arg") nil (interactive) nil [926459 928294]) ("org-html-entities" variable nil (quote (("nbsp") ("iexcl") ("cent") ("pound") ("curren") ("yen") ("brvbar") ("vert" . "&#124;") ("sect") ("uml") ("copy") ("ordf") ("laquo") ("not") ("shy") ("reg") ("macr") ("deg") ("plusmn") ("sup2") ("sup3") ("acute") ("micro") ("para") ("middot") ("odot" . "o") ("star" . "*") ("cedil") ("sup1") ("ordm") ("raquo") ("frac14") ("frac12") ("frac34") ("iquest") ("Agrave") ("Aacute") ("Acirc") ("Atilde") ("Auml") ("Aring") ("AA" . "&Aring;") ("AElig") ("Ccedil") ("Egrave") ("Eacute") ("Ecirc") ("Euml") ("Igrave") ("Iacute") ("Icirc") ("Iuml") ("ETH") ("Ntilde") ("Ograve") ("Oacute") ("Ocirc") ("Otilde") ("Ouml") ("times") ("Oslash") ("Ugrave") ("Uacute") ("Ucirc") ("Uuml") ("Yacute") ("THORN") ("szlig") ("agrave") ("aacute") ("acirc") ("atilde") ("auml") ("aring") ("aelig") ("ccedil") ("egrave") ("eacute") ("ecirc") ("euml") ("igrave") ("iacute") ("icirc") ("iuml") ("eth") ("ntilde") ("ograve") ("oacute") ("ocirc") ("otilde") ("ouml") ("divide") ("oslash") ("ugrave") ("uacute") ("ucirc") ("uuml") ("yacute") ("thorn") ("yuml") ("fnof") ("Alpha") ("Beta") ("Gamma") ("Delta") ("Epsilon") ("Zeta") ("Eta") ("Theta") ("Iota") ("Kappa") ("Lambda") ("Mu") ("Nu") ("Xi") ("Omicron") ("Pi") ("Rho") ("Sigma") ("Tau") ("Upsilon") ("Phi") ("Chi") ("Psi") ("Omega") ("alpha") ("beta") ("gamma") ("delta") ("epsilon") ("varepsilon" . "&epsilon;") ("zeta") ("eta") ("theta") ("iota") ("kappa") ("lambda") ("mu") ("nu") ("xi") ("omicron") ("pi") ("rho") ("sigmaf") ("varsigma" . "&sigmaf;") ("sigma") ("tau") ("upsilon") ("phi") ("chi") ("psi") ("omega") ("thetasym") ("vartheta" . "&thetasym;") ("upsih") ("piv") ("bull") ("bullet" . "&bull;") ("hellip") ("dots" . "&hellip;") ("prime") ("Prime") ("oline") ("frasl") ("weierp") ("image") ("real") ("trade") ("alefsym") ("larr") ("leftarrow" . "&larr;") ("gets" . "&larr;") ("uarr") ("uparrow" . "&uarr;") ("rarr") ("to" . "&rarr;") ("rightarrow" . "&rarr;") ("darr") ("downarrow" . "&darr;") ("harr") ("leftrightarrow" . "&harr;") ("crarr") ("hookleftarrow" . "&crarr;") ("lArr") ("Leftarrow" . "&lArr;") ("uArr") ("Uparrow" . "&uArr;") ("rArr") ("Rightarrow" . "&rArr;") ("dArr") ("Downarrow" . "&dArr;") ("hArr") ("Leftrightarrow" . "&hArr;") ("forall") ("part") ("partial" . "&part;") ("exist") ("exists" . "&exist;") ("empty") ("emptyset" . "&empty;") ("nabla") ("isin") ("in" . "&isin;") ("notin") ("ni") ("prod") ("sum") ("minus") ("lowast") ("ast" . "&lowast;") ("radic") ("prop") ("proptp" . "&prop;") ("infin") ("infty" . "&infin;") ("ang") ("angle" . "&ang;") ("and") ("vee" . "&and;") ("or") ("wedge" . "&or;") ("cap") ("cup") ("int") ("there4") ("sim") ("cong") ("simeq" . "&cong;") ("asymp") ("approx" . "&asymp;") ("ne") ("neq" . "&ne;") ("equiv") ("le") ("ge") ("sub") ("subset" . "&sub;") ("sup") ("supset" . "&sup;") ("nsub") ("sube") ("supe") ("oplus") ("otimes") ("perp") ("sdot") ("cdot" . "&sdot;") ("lceil") ("rceil") ("lfloor") ("rfloor") ("lang") ("rang") ("loz") ("Diamond" . "&loz;") ("spades") ("spadesuit" . "&spades;") ("clubs") ("clubsuit" . "&clubs;") ("hearts") ("diamondsuit" . "&hearts;") ("diams") ("diamondsuit" . "&diams;") ("smile" . "&#9786;") ("blacksmile" . "&#9787;") ("sad" . "&#9785;") ("quot") ("amp") ("lt") ("gt") ("OElig") ("oelig") ("Scaron") ("scaron") ("Yuml") ("circ") ("tilde") ("ensp") ("emsp") ("thinsp") ("zwnj") ("zwj") ("lrm") ("rlm") ("ndash") ("mdash") ("lsquo") ("rsquo") ("sbquo") ("ldquo") ("rdquo") ("bdquo") ("dagger") ("Dagger") ("permil") ("lsaquo") ("rsaquo") ("euro") ("arccos" . "arccos") ("arcsin" . "arcsin") ("arctan" . "arctan") ("arg" . "arg") ("cos" . "cos") ("cosh" . "cosh") ("cot" . "cot") ("coth" . "coth") ("csc" . "csc") ("deg" . "deg") ("det" . "det") ("dim" . "dim") ("exp" . "exp") ("gcd" . "gcd") ("hom" . "hom") ("inf" . "inf") ("ker" . "ker") ("lg" . "lg") ("lim" . "lim") ("liminf" . "liminf") ("limsup" . "limsup") ("ln" . "ln") ("log" . "log") ("max" . "max") ("min" . "min") ("Pr" . "Pr") ("sec" . "sec") ("sin" . "sin") ("sinh" . "sinh") ("sup" . "sup") ("tan" . "tan") ("tanh" . "tanh"))) ((const . t)) "Entities for TeX->HTML translation.
Entries can be like (\"ent\"), in which case \"\\ent\" will be translated to
\"&ent;\".  An entry can also be a dotted pair like (\"ent\".\"&other;\").
In that case, \"\\ent\" will be translated to \"&other;\".
The list contains HTML entities for Latin-1, Greek and other symbols.
It is supplemented by a number of commonly used TeX macros with appropriate
translations.  There is currently no way for users to extend this." nil [928296 933850]) ("org-cleaned-string-for-export" function nil ("string" "&rest" "parameters") ((user-visible . t)) "Cleanup a buffer STRING so that links can be created safely." nil [933892 943115]) ("org-export-grab-title-from-buffer" function nil nil nil "Get a title for the current document, from looking at the buffer." nil [943117 943755]) ("org-export-get-title-from-subtree" function nil nil nil "Return subtree title and exclude it from export." nil [943757 944381]) ("org-solidify-link-text" function nil ("s" "&optional" "alist") nil "Take link text and make a safe target out of it." nil [944383 944680]) ("org-get-min-level" function nil ("lines") nil "Get the minimum level in LINES." nil [944682 944950]) ("org-section-numbers" variable nil (make-vector org-level-max 0) nil nil nil [945004 945062]) ("org-init-section-numbers" function nil nil nil "Initialize the vector for the section numbers." nil [945064 945726]) ("org-section-number" function nil ("&optional" "level") nil "Return a string with the current section number.
When LEVEL is non-nil, increase section numbers on that level." nil [945728 946737]) ("org-last-level" variable nil nil nil nil nil [946757 946784]) ("org-min-level" variable nil nil nil nil nil [946815 946841]) ("org-levels-open" variable nil nil nil nil nil [946872 946900]) ("org-ascii-current-indentation" variable nil nil nil nil nil [946932 946974]) ("org-export-as-ascii" function nil ("arg") ((user-visible . t)) "Export the outline as a pretty ASCII file.
If there is an active region, export only the region.
The prefix ARG specifies how many levels of the outline should become
underlined headlines.  The default is 3." nil [946996 958067]) ("org-search-todo-below" function nil ("line" "lines" "level") nil "Search the subtree below LINE for any TODO entries." nil [958069 958768]) ("org-html-expand-for-ascii" function nil ("line") nil "Handle quoted HTML for ASCII export." nil [958770 959032]) ("org-insert-centered" function nil ("s" "&optional" "underline") nil "Insert the string S centered and underline it with character UNDERLINE." nil [959034 959393]) ("org-ascii-level-start" function nil ("level" "title" "umax" "&optional" "lines") nil "Insert a new level in ASCII export." nil [959395 960843]) ("org-export-visible" function nil ("type" "arg") ((user-visible . t)) "Create a copy of the visible part of the current buffer, and export it.
The copy is created in a temporary buffer and removed after use.
TYPE is the final key (as a string) that also select the export command in
the `C-c C-e' export dispatcher.
As a special case, if the you type SPC at the prompt, the temporary
org-mode file will not be removed but presented to you so that you can
continue to use it.  The prefix arg ARG is passed through to the exporting
command." nil [960845 963876]) ("org-find-visible" function nil nil nil (let ((s (point))) (while (and (not (= (point-max) (setq s (next-overlay-change s)))) (get-char-property s (quote invisible)))) s) nil [963878 964055]) ("org-find-invisible" function nil nil nil (let ((s (point))) (while (and (not (= (point-max) (setq s (next-overlay-change s)))) (not (get-char-property s (quote invisible))))) s) nil [964056 964241]) ("org-get-current-options" function nil nil nil "Return a string with current options as keyword options.
Does include HTML export options as well as TODO and CATEGORY stuff." nil [964260 966454]) ("org-insert-export-options-template" function nil nil ((user-visible . t)) "Insert into the buffer a template with information for exporting." nil [966456 966768]) ("org-toggle-fixed-width-section" function nil ("arg") ((user-visible . t)) "Toggle the fixed-width export.
If there is no active region, the QUOTE keyword at the current headline is
inserted or removed.  When present, it causes the text between this headline
and the next to be exported as fixed-width text, and unmodified.
If there is an active region, this command adds or removes a colon as the
first character of this line.  If the first character of a line is a colon,
this line is also exported in fixed-width font." nil [966770 968509]) ("org-export-as-html-and-open" function nil ("arg") ((user-visible . t)) "Export the outline as HTML and immediately open it with a browser.
If there is an active region, export only the region.
The prefix ARG specifies how many levels of the outline should become
headlines.  The default is 3.  Lower levels will become bulleted lists." nil [968511 968909]) ("org-export-as-html-batch" function nil nil nil "Call `org-export-as-html', may be used in batch processing as
emacs   --batch
        --load=$HOME/lib/emacs/org.el
        --eval \"(setq org-export-headline-levels 2)\"
        --visit=MyFile --funcall org-export-as-html-batch" nil [968911 969237]) ("org-export-as-html-to-buffer" function nil ("arg") ((user-visible . t)) "Call `org-exort-as-html` with output to a temporary buffer.
No file is created.  The prefix ARG is passed through to `org-export-as-html'." nil [969239 969553]) ("org-replace-region-by-html" function nil ("beg" "end") ((user-visible . t)) "Assume the current region has org-mode syntax, and convert it to HTML.
This can be used in any buffer.  For example, you could write an
itemized list in org-mode syntax in an HTML buffer and then use this
command to convert it." nil [969555 970407]) ("org-export-region-as-html" function nil ("beg" "end" "&optional" "body-only" "buffer") ((user-visible . t)) "Convert region from BEG to END in org-mode buffer to HTML.
If prefix arg BODY-ONLY is set, omit file header, footer, and table of
contents, and only produce the region of converted text, useful for
cut-and-paste operations.
If BUFFER is a buffer or a string, use/create that buffer as a target
of the converted HTML.  If BUFFER is the symbol `string', return the
produced HTML as a string and leave not buffer behind.  For example,
a Lisp program could call this function in the following way:

  (setq html (org-export-region-as-html beg end t 'string))

When called interactively, the output buffer is selected, and shown
in a window.  A non-interactive call will only retunr the buffer." nil [970409 971660]) ("org-export-as-html" function nil ("arg" "&optional" "hidden" "ext-plist" "to-buffer" "body-only") ((user-visible . t)) "Export the outline as a pretty HTML file.
If there is an active region, export only the region.  The prefix
ARG specifies how many levels of the outline should become
headlines.  The default is 3.  Lower levels will become bulleted
lists.  When HIDDEN is non-nil, don't display the HTML buffer.
EXT-PLIST is a property list with external parameters overriding
org-mode's default settings, but still inferior to file-local
settings.  When TO-BUFFER is non-nil, create a buffer with that
name and export to that buffer.  If TO-BUFFER is the symbol `string',
don't leave any buffer behind but just return the resulting HTML as
a string.  When BODY-ONLY is set, don't produce the file header and footer,
simply return the content of <body>...</body>, without even
the body tags themselves." nil [971662 1002636]) ("org-table-colgroup-info" variable nil nil nil nil nil [1002638 1002674]) ("org-format-table-ascii" function nil ("lines") nil "Format a table for ascii export." nil [1002675 1004038]) ("org-colgroup-info-to-vline-list" function nil ("info") nil (let (vl new last) (while info (setq last new new (pop info)) (if (or (memq last (quote (:end :startend))) (memq new (quote (:start :startend)))) (push t vl) (push nil vl))) (setq vl (nreverse vl)) (and vl (setcar vl nil)) vl) nil [1004040 1004362]) ("org-format-table-html" function nil ("lines" "olines") nil "Find out which HTML converter to use and return the HTML code." nil [1004364 1005604]) ("org-format-org-table-html" function nil ("lines" "&optional" "splice") nil "Format a table into HTML." nil [1005606 1009027]) ("org-table-clean-before-export" function nil ("lines") nil "Check if the table has a marking column.
If yes remove the column and the special lines." nil [1009029 1011121]) ("org-format-table-table-html" function nil ("lines") nil "Format a table generated by table.el into HTML.
This conversion does *not* use `table-generate-source' from table.el.
This has the advantage that Org-mode's HTML conversions can be used.
But it has the disadvantage, that no cell- or row-spanning is allowed." nil [1011123 1013058]) ("org-format-table-table-html-using-table-generate-source" function nil ("lines") nil "Format a table into html, using `table-generate-source' from table.el.
This has the advantage that cell- or row-spanning is allowed.
But it has the disadvantage, that Org-mode's HTML conversions cannot be used." nil [1013060 1013831]) ("org-html-handle-time-stamps" function nil ("s") nil "Format time stamps in string S, or remove them." nil [1013833 1015086]) ("org-html-protect" function nil ("s") nil (let ((start 0)) (while (string-match "&" s start) (setq s (replace-match "&amp;" t t s) start (1+ (match-beginning 0)))) (while (string-match "<" s) (setq s (replace-match "&lt;" t t s))) (while (string-match ">" s) (setq s (replace-match "&gt;" t t s)))) nil [1015088 1015470]) ("org-export-cleanup-toc-line" function nil ("s") nil "Remove tags and time staps from lines going into the toc." nil [1015472 1016033]) ("org-html-expand" function nil ("string") nil "Prepare STRING for HTML export.  Applies all active conversions.
If there are links in the string, don't modify these." nil [1016035 1016644]) ("org-html-do-expand" function nil ("s") nil "Apply all active conversions to translate special ASCII to HTML." nil [1016646 1017538]) ("org-create-multibrace-regexp" function nil ("left" "right" "n") nil "Create a regular expression which will match a balanced sexp.
Opening delimiter is LEFT, and closing delimiter is RIGHT, both given
as single character strings.
The regexp returned will match the entire expression including the
delimiters.  It will also define a single group which contains the
match except for the outermost delimiters.  The maximum depth of
stacked delimiters is N.  Escaping delimiters is not possible." nil [1017540 1018386]) ("org-match-substring-regexp" variable nil (concat "\\([^\\]\\)\\([_^]\\)\\(" "\\(" (org-create-multibrace-regexp "{" "}" org-match-sexp-depth) "\\)" "\\|" "\\(" (org-create-multibrace-regexp "(" ")" org-match-sexp-depth) "\\)" "\\|" "\\(\\(?:\\*\\|[-+]?[^-+*!@#$%^_ 	
,:\"?<>~;./{}=()]+\\)\\)\\)") nil "The regular expression matching a sub- or superscript." nil [1018388 1018762]) ("org-export-html-convert-sub-super" function nil ("string") nil "Convert sub- and superscripts in STRING to HTML." nil [1018907 1019773]) ("org-export-html-convert-emphasize" function nil ("string") nil "Apply emphasis." nil [1019775 1020415]) ("org-par-open" variable nil nil nil nil nil [1020417 1020442]) ("org-open-par" function nil nil nil "Insert <p>, but first close previous paragraph if any." nil [1020443 1020592]) ("org-close-par-maybe" function nil nil nil "Close paragraph if there is one open." nil [1020593 1020735]) ("org-close-li" function nil nil nil "Close <li> if necessary." nil [1020736 1020833]) ("body-only" variable nil nil nil nil nil [1020835 1020853]) ("org-html-level-start" function nil ("level" "title" "umax" "with-toc" "head-count") nil "Insert a new level in HTML export.
When TITLE is nil, just close all open levels." nil [1020886 1022978]) ("org-html-level-close" function nil ("level" "max-outline-level") nil "Terminate one level in HTML export." nil [1022980 1023178]) ("org-export-icalendar-this-file" function nil nil ((user-visible . t)) "Export current file as an iCalendar file.
The iCalendar file will be located in the same directory as the Org-mode
file, but with extension `.ics'." nil [1023217 1023472]) ("org-export-icalendar-all-agenda-files" function nil nil ((user-visible . t)) "Export all files in `org-agenda-files' to iCalendar .ics files.
Each iCalendar file will be located in the same directory as the Org-mode
file, but with extension `.ics'." nil [1023489 1023785]) ("org-export-icalendar-combine-agenda-files" function nil nil ((user-visible . t)) "Export all files in `org-agenda-files' to a single combined iCalendar file.
The file is stored under the name `org-combined-agenda-icalendar-file'." nil [1023802 1024077]) ("org-export-icalendar" function nil ("combine" "&rest" "files") nil "Create iCalendar files for all elements of FILES.
If COMBINE is non-nil, combine all calendar entries into a single large
file and store it under the name `org-combined-agenda-icalendar-file'." nil [1024079 1026449]) ("org-after-save-iCalendar-file-hook" variable nil nil nil "Hook run after an iCalendar file has been saved.
The iCalendar buffer is still current when this hook is run.
A good way to use this is to tell a desktop calenndar application to re-read
the iCalendar file." nil [1026451 1026709]) ("org-print-icalendar-entries" function nil ("&optional" "combine") nil "Print iCalendar entries for the current Org-mode file to `standard-output'.
When COMBINE is non nil, add the category to each line." nil [1026711 1033456]) ("org-get-cleaned-entry" function nil ("what") nil "Clean-up description string." nil [1033458 1034268]) ("org-start-icalendar-file" function nil ("name") nil "Start an iCalendar file by inserting the header." nil [1034270 1034642]) ("org-finish-icalendar-file" function nil nil nil "Finish an iCalendar file by inserting the END statement." nil [1034644 1034769]) ("org-ical-ts-to-string" function nil ("s" "keyword" "&optional" "inc") nil "Take a time string S and convert it to iCalendar format.
KEYWORD is added in front, to make a complete line like DTSTART....
When INC is non-nil, increase the hour by two (if time string contains
a time), or the day by one (if it does not contain a time)." nil [1034771 1035794]) ("org-export-as-xoxo-insert-into" function nil ("buffer" "&rest" "output") nil (with-current-buffer buffer (apply (quote insert) output)) nil [1035813 1035931]) ("put" code nil [1035932 1035993]) ("org-export-as-xoxo" function nil ("&optional" "buffer") ((user-visible . t)) "Export the org buffer as XOXO.
The XOXO buffer is named *xoxo-<source buffer name>*" nil [1035995 1039118]) ("org-defkey" code nil [1039171 1039228]) ("org-defkey" code nil [1039256 1039305]) ("org-defkey" code nil [1039306 1039355]) ("org-defkey" code nil [1039356 1039423]) ("org-defkey" code nil [1039424 1039476]) ("org-defkey" code nil [1039477 1039524]) ("org-defkey" code nil [1039525 1039579]) ("unless" code nil [1039636 1039722]) ("org-defkey" code nil [1039723 1039779]) ("define-key" code nil [1039780 1039829]) ("org-defkey" code nil [1039831 1039896]) ("org-defkey" code nil [1039897 1039969]) ("org-defkey" code nil [1039970 1040034]) ("org-defkey" code nil [1040066 1040120]) ("org-defkey" code nil [1040121 1040176]) ("org-defkey" code nil [1040177 1040229]) ("org-defkey" code nil [1040230 1040284]) ("org-defkey" code nil [1040286 1040352]) ("org-defkey" code nil [1040353 1040420]) ("org-defkey" code nil [1040421 1040485]) ("org-defkey" code nil [1040486 1040552]) ("org-defkey" code nil [1040554 1040614]) ("org-defkey" code nil [1040615 1040677]) ("org-defkey" code nil [1040678 1040740]) ("org-defkey" code nil [1040741 1040804]) ("org-defkey" code nil [1040806 1040878]) ("org-defkey" code nil [1040879 1040950]) ("when" code nil [1041083 1042523]) ("org-defkey" code nil [1042550 1042596]) ("org-defkey" code nil [1042626 1042674]) ("org-defkey" code nil [1042675 1042732]) ("org-defkey" code nil [1042733 1042790]) ("org-defkey" code nil [1042791 1042863]) ("org-defkey" code nil [1042864 1042928]) ("org-defkey" code nil [1042929 1042995]) ("org-defkey" code nil [1042996 1043042]) ("org-defkey" code nil [1043043 1043089]) ("org-defkey" code nil [1043090 1043140]) ("org-defkey" code nil [1043141 1043191]) ("org-defkey" code nil [1043192 1043248]) ("org-defkey" code nil [1043249 1043305]) ("org-defkey" code nil [1043306 1043363]) ("org-defkey" code nil [1043364 1043417]) ("org-defkey" code nil [1043442 1043500]) ("org-defkey" code nil [1043519 1043571]) ("org-defkey" code nil [1043572 1043628]) ("org-defkey" code nil [1043629 1043707]) ("org-defkey" code nil [1043708 1043763]) ("org-defkey" code nil [1043764 1043823]) ("org-defkey" code nil [1043824 1043877]) ("org-defkey" code nil [1043878 1043933]) ("org-defkey" code nil [1043934 1043990]) ("org-defkey" code nil [1043991 1044047]) ("org-defkey" code nil [1044048 1044100]) ("org-defkey" code nil [1044124 1044176]) ("org-defkey" code nil [1044200 1044261]) ("org-defkey" code nil [1044278 1044328]) ("org-defkey" code nil [1044354 1044415]) ("org-defkey" code nil [1044416 1044471]) ("org-defkey" code nil [1044472 1044532]) ("org-defkey" code nil [1044533 1044601]) ("org-defkey" code nil [1044602 1044671]) ("org-defkey" code nil [1044672 1044734]) ("org-defkey" code nil [1044735 1044788]) ("org-defkey" code nil [1044789 1044843]) ("org-defkey" code nil [1044844 1044890]) ("org-defkey" code nil [1044891 1044946]) ("org-defkey" code nil [1044947 1045015]) ("org-defkey" code nil [1045016 1045079]) ("org-defkey" code nil [1045080 1045128]) ("org-defkey" code nil [1045129 1045187]) ("org-defkey" code nil [1045188 1045247]) ("org-defkey" code nil [1045248 1045299]) ("org-defkey" code nil [1045300 1045360]) ("org-defkey" code nil [1045361 1045422]) ("org-defkey" code nil [1045423 1045481]) ("org-defkey" code nil [1045482 1045559]) ("org-defkey" code nil [1045560 1045619]) ("org-defkey" code nil [1045620 1045691]) ("org-defkey" code nil [1045692 1045760]) ("org-defkey" code nil [1045761 1045820]) ("org-defkey" code nil [1045821 1045895]) ("org-defkey" code nil [1045896 1045967]) ("org-defkey" code nil [1045968 1046016]) ("org-defkey" code nil [1046017 1046085]) ("org-defkey" code nil [1046086 1046141]) ("org-defkey" code nil [1046143 1046200]) ("org-defkey" code nil [1046201 1046258]) ("org-defkey" code nil [1046259 1046317]) ("org-defkey" code nil [1046318 1046377]) ("org-defkey" code nil [1046379 1046451]) ("org-defkey" code nil [1046452 1046506]) ("org-defkey" code nil [1046507 1046562]) ("org-defkey" code nil [1046563 1046619]) ("org-defkey" code nil [1046620 1046678]) ("org-defkey" code nil [1046679 1046738]) ("org-defkey" code nil [1046739 1046797]) ("org-defkey" code nil [1046798 1046857]) ("org-defkey" code nil [1046858 1046926]) ("org-defkey" code nil [1046927 1046988]) ("org-defkey" code nil [1046989 1047047]) ("org-defkey" code nil [1047048 1047115]) ("define-key" code nil [1047117 1047170]) ("when" code nil [1047172 1047253]) ("org-table-p" function nil nil nil (org-at-table-p) nil [1047255 1047297]) ("org-self-insert-command" function nil ("N") ((user-visible . t)) "Like `self-insert-command', use overwrite-mode for whitespace in tables.
If the cursor is in a table looking at whitespace, the whitespace is
overwritten, and the table is not marked as requiring realignment." nil [1047299 1048570]) ("org-fix-tags-on-the-fly" function nil nil nil (when (and (equal (char-after (point-at-bol)) 42) (org-on-heading-p)) (org-align-tags-here org-tags-column)) nil [1048572 1048734]) ("org-delete-backward-char" function nil ("N") ((user-visible . t)) "Like `delete-backward-char', insert whitespace at field end in tables.
When deleting backwards, in tables this function will insert whitespace in
front of the next \"|\" separator, to keep the table aligned.  The table will
still be marked for re-alignment if the field did fill the entire column,
because, in this case the deletion might narrow the column." nil [1048736 1049779]) ("org-delete-char" function nil ("N") ((user-visible . t)) "Like `delete-char', but insert whitespace at field end in tables.
When deleting characters, in tables this function will insert whitespace in
front of the next \"|\" separator, to keep the table aligned.  The table will
still be marked for re-alignment if the field did fill the entire column,
because, in this case the deletion might narrow the column." nil [1049781 1050882]) ("put" code nil [1050951 1051001]) ("put" code nil [1051002 1051055]) ("put" code nil [1051056 1051107]) ("put" code nil [1051108 1051168]) ("put" code nil [1051220 1051270]) ("put" code nil [1051271 1051324]) ("put" code nil [1051325 1051367]) ("put" code nil [1051368 1051419]) ("eval-after-load" code nil [1051421 1051660]) ("org-remap" function nil ("map" "&rest" "commands") nil "In MAP, remap the functions given in COMMANDS.
COMMANDS is a list of alternating OLDDEF NEWDEF command names." nil [1051773 1052165]) ("when" code nil [1052167 1052559]) ("org-shiftcursor-error" function nil nil nil "Throw an error because Shift-Cursor command was applied in wrong context." nil [1052561 1052762]) ("org-shifttab" function nil ("&optional" "arg") ((user-visible . t)) "Global visibility cycling or move to previous table field.
Calls `org-cycle' with argument t, or `org-table-previous-field', depending
on context.
See the individual commands for more information." nil [1052764 1053289]) ("org-shiftmetaleft" function nil nil ((user-visible . t)) "Promote subtree or delete table column.
Calls `org-promote-subtree', `org-outdent-item',
or `org-table-delete-column', depending on context.
See the individual commands for more information." nil [1053291 1053764]) ("org-shiftmetaright" function nil nil ((user-visible . t)) "Demote subtree or insert table column.
Calls `org-demote-subtree', `org-indent-item',
or `org-table-insert-column', depending on context.
See the individual commands for more information." nil [1053766 1054235]) ("org-shiftmetaup" function nil ("&optional" "arg") ((user-visible . t)) "Move subtree up or kill table row.
Calls `org-move-subtree-up' or `org-table-kill-row' or
`org-move-item-up' depending on context.  See the individual commands
for more information." nil [1054237 1054711]) ("org-shiftmetadown" function nil ("&optional" "arg") ((user-visible . t)) "Move subtree down or insert table row.
Calls `org-move-subtree-down' or `org-table-insert-row' or
`org-move-item-down', depending on context.  See the individual
commands for more information." nil [1054712 1055205]) ("org-metaleft" function nil ("&optional" "arg") ((user-visible . t)) "Promote heading or move table column to left.
Calls `org-do-promote' or `org-table-move-column', depending on context.
With no specific context, calls the Emacs default `backward-word'.
See the individual commands for more information." nil [1055207 1055778]) ("org-metaright" function nil ("&optional" "arg") ((user-visible . t)) "Demote subtree or move table column to right.
Calls `org-do-demote' or `org-table-move-column', depending on context.
With no specific context, calls the Emacs default `forward-word'.
See the individual commands for more information." nil [1055780 1056342]) ("org-metaup" function nil ("&optional" "arg") ((user-visible . t)) "Move subtree up or move table row up.
Calls `org-move-subtree-up' or `org-table-move-row' or
`org-move-item-up', depending on context.  See the individual commands
for more information." nil [1056344 1056839]) ("org-metadown" function nil ("&optional" "arg") ((user-visible . t)) "Move subtree down or move table row down.
Calls `org-move-subtree-down' or `org-table-move-row' or
`org-move-item-down', depending on context.  See the individual
commands for more information." nil [1056841 1057368]) ("org-shiftup" function nil ("&optional" "arg") ((user-visible . t)) "Increase item in timestamp or increase priority of current headline.
Calls `org-timestamp-up' or `org-priority-up', or `org-previous-item',
depending on context.  See the individual commands for more information." nil [1057370 1058007]) ("org-shiftdown" function nil ("&optional" "arg") ((user-visible . t)) "Decrease item in timestamp or decrease priority of current headline.
Calls `org-timestamp-down' or `org-priority-down', or `org-next-item'
depending on context.  See the individual commands for more information." nil [1058009 1058558]) ("org-shiftright" function nil nil ((user-visible . t)) "Next TODO keyword or timestamp one day later, depending on context." nil [1058560 1058992]) ("org-shiftleft" function nil nil ((user-visible . t)) "Previous TODO keyword or timestamp one day earlier, depending on context." nil [1058994 1059446]) ("org-shiftcontrolright" function nil nil ((user-visible . t)) "Switch to next TODO set." nil [1059448 1059628]) ("org-shiftcontrolleft" function nil nil ((user-visible . t)) "Switch to previous TODO set." nil [1059630 1059817]) ("org-ctrl-c-ret" function nil nil ((user-visible . t)) "Call `org-table-hline-and-move' or `org-insert-heading' dep. on context." nil [1059819 1060063]) ("org-copy-special" function nil nil ((user-visible . t)) "Copy region in table or copy current subtree.
Calls `org-table-copy' or `org-copy-subtree', depending on context.
See the individual commands for more information." nil [1060065 1060365]) ("org-cut-special" function nil nil ((user-visible . t)) "Cut region in table or cut current subtree.
Calls `org-table-copy' or `org-cut-subtree', depending on context.
See the individual commands for more information." nil [1060367 1060661]) ("org-paste-special" function nil ("arg") ((user-visible . t)) "Paste rectangular region into table, or past subtree relative to level.
Calls `org-table-paste-rectangle' or `org-paste-subtree', depending on context.
See the individual commands for more information." nil [1060663 1061006]) ("org-ctrl-c-ctrl-c" function nil ("&optional" "arg") ((user-visible . t)) "Set tags in headline, or update according to changed information at point.

This command does many different things, depending on context:

- If the cursor is in a headline, prompt for tags and insert them
  into the current line, aligned to `org-tags-column'.  When called
  with prefix arg, realign all tags in the current buffer.

- If the cursor is in one of the special #+KEYWORD lines, this
  triggers scanning the buffer for these lines and updating the
  information.

- If the cursor is inside a table, realign the table.  This command
  works even if the automatic table editor has been turned off.

- If the cursor is on a #+TBLFM line, re-apply the formulas to
  the entire table.

- If the cursor is a the beginning of a dynamic block, update it.

- If the cursor is inside a table created by the table.el package,
  activate that table.

- If the current buffer is a remember buffer, close note and file it.
  with a prefix argument, file it without further interaction to the default
  location.

- If the cursor is on a <<<target>>>, update radio targets and corresponding
  links in this buffer.

- If the cursor is on a numbered item in a plain list, renumber the
  ordered list." nil [1061008 1064209]) ("org-mode-restart" function nil nil ((user-visible . t)) "Restart Org-mode, to scan again for special lines.
Also updates the keyword regular expressions." nil [1064211 1064475]) ("org-kill-note-or-show-branches" function nil nil ((user-visible . t)) "If this is a Note buffer, abort storing the note. Else call `show-branches'." nil [1064477 1064757]) ("org-return" function nil nil ((user-visible . t)) "Goto next table row or insert a newline.
Calls `org-table-next-row' or `newline', depending on context.
See the individual commands for more information." nil [1064759 1065105]) ("org-ctrl-c-minus" function nil nil ((user-visible . t)) "Insert separator line in table or modify bullet type in list.
Calls `org-table-insert-hline' or `org-cycle-list-bullet',
depending on context." nil [1065108 1065712]) ("org-meta-return" function nil ("&optional" "arg") ((user-visible . t)) "Insert a new heading or wrap a region in a table.
Calls `org-insert-heading' or `org-table-wrap-region', depending on context.
See the individual commands for more information." nil [1065714 1066081]) ("easy-menu-define" code nil [1066130 1068942]) ("easy-menu-define" code nil [1068944 1075569]) ("org-info" function nil ("&optional" "node") ((user-visible . t)) "Read documentation for Org-mode in the info system.
With optional NODE, go directly to that node." nil [1075571 1075791]) ("org-install-agenda-files-menu" function nil nil nil (let ((bl (buffer-list))) (save-excursion (while bl (set-buffer (pop bl)) (if (org-mode-p) (setq bl nil))) (when (org-mode-p) (easy-menu-change (quote ("Org")) "File List for Agenda" (append (list ["Edit File List" (org-edit-agenda-file-list) t] ["Add/Move Current File to Front of List" org-agenda-file-to-front t] ["Remove Current File from List" org-remove-file t] ["Cycle through agenda files" org-cycle-agenda-files t] ["Occur in all agenda files" org-occur-in-agenda-files t] "--") (mapcar (quote org-file-menu-entry) (org-agenda-files t))))))) nil [1075793 1076516]) ("org-customize" function nil nil ((user-visible . t)) "Call the customize function with org as argument." nil [1076538 1076658]) ("org-create-customize-menu" function nil nil ((user-visible . t)) "Create a full customization menu for Org-mode, insert it into the menu." nil [1076660 1077380]) ("org-context" function nil nil nil "Return a list of contexts of the current cursor position.
If several contexts apply, all are returned.
Each context entry is a list with a symbol naming the context, and
two positions indicating start and end of the context.  Possible
contexts are:

:headline         anywhere in a headline
:headline-stars   on the leading stars in a headline
:todo-keyword     on a TODO keyword (including DONE) in a headline
:tags             on the TAGS in a headline
:priority         on the priority cookie in a headline
:item             on the first line of a plain list item
:item-bullet      on the bullet/number of a plain list item
:checkbox         on the checkbox in a plain list item
:table            in an org-mode table
:table-special    on a special filed in a table
:table-table      in a table.el table
:link             on a hyperlink
:keyword          on a keyword: SCHEDULED, DEADLINE, CLOSE,COMMENT, QUOTE.
:target           on a <<target>>
:radio-target     on a <<<radio-target>>>
:latex-fragment   on a LaTeX fragment
:latex-preview    on a LaTeX fragment with overlayed preview image

This function expects the position to be visible because it uses font-lock
faces as a help to recognize the following contexts: :table-special, :link,
and :keyword." nil [1077441 1081508]) ("org-in-regexp" function nil ("re" "&optional" "nlines" "visually") nil "Check if point is inside a match of regexp.
Normally only the current line is checked, but you can include NLINES extra
lines both before and after point into the search.
If VISUALLY is set, require that the cursor is not after the match but
really on, so that the block visually is on the match." nil [1081562 1082327]) ("org-at-regexp-p" function nil ("regexp") nil "Is point inside a match of REGEXP in the current line?" nil [1082329 1082719]) ("org-occur-in-agenda-files" function nil ("regexp" "&optional" "nlines") ((user-visible . t)) "Call `multi-occur' with buffers for all agenda files." nil [1082721 1083318]) ("org-uniquify" function nil ("list") nil "Remove duplicate elements from LIST." nil [1083320 1083468]) ("org-delete-all" function nil ("elts" "list") nil "Remove all elements in ELTS from LIST." nil [1083470 1083610]) ("org-point-in-group" function nil ("point" "group" "&optional" "context") nil "Check if POINT is in match-group GROUP.
If CONTEXT is non-nil, return a list with CONTEXT and the boundaries of the
match.  If the match group does ot exist or point is not inside it,
return nil." nil [1083612 1084079]) ("org-switch-to-buffer-other-window" function nil ("&rest" "args") nil "Switch to buffer in a second window on the current frame.
In particular, do not allow pop-up frames." nil [1084081 1084412]) ("org-combine-plists" function nil ("&rest" "plists") nil "Create a single property list from all plists in PLISTS.
The process starts by copying the first list, and then setting properties
from the other lists.  Settings in the last list are the most significant
ones and overrule settings in the other lists." nil [1084414 1084920]) ("org-move-line-down" function nil ("arg") ((user-visible . t)) "Move the current line down.  With prefix argument, move it past ARG lines." nil [1084922 1085375]) ("org-move-line-up" function nil ("arg") ((user-visible . t)) "Move the current line up.  With prefix argument, move it past ARG lines." nil [1085377 1085824]) ("org-replace-escapes" function nil ("string" "table") nil "Replace %-escapes in STRING with values in TABLE.
TABLE is an association list with keys like \"%a\" and string values.
The sequences in STRING may contain normal field width and padding information,
for example \"%-5s\".  Replacements happen in the sequence given by TABLE,
so values can contain further %-escapes if they are define later in TABLE." nil [1085826 1086584]) ("org-sublist" function nil ("list" "start" "end") nil "Return a section of LIST, from START to END.
Counting starts at 1." nil [1086587 1086862]) ("org-find-base-buffer-visiting" function nil ("file") nil "Like `find-buffer-visiting' but alway return the base buffer and
not an indirect buffer" nil [1086864 1087109]) ("org-image-file-name-regexp" function nil nil nil "Return regexp matching the file names of images." nil [1087111 1087658]) ("org-file-image-p" function nil ("file") nil "Return non-nil if FILE is an image." nil [1087660 1087804]) ("org-indent-line-function" function nil nil ((user-visible . t)) "Indent line like previous, but further if previous was headline or item." nil [1087895 1089917]) ("org-set-autofill-regexps" function nil nil nil (interactive) nil [1089919 1091514]) ("org-fill-paragraph" function nil ("&optional" "justify") nil "Re-align a table, pass through to fill-paragraph if no table." nil [1091516 1091948]) ("org-adaptive-fill-function" function nil nil nil "Return a fill prefix for org-mode files.
In particular, this makes sure hanging paragraphs for hand-formatted lists
work correctly." nil [1092129 1092546]) ("org-beginning-of-line" function nil ("&optional" "arg") ((user-visible . t)) "Go to the beginning of the current line.  If that is invisible, continue
to a visible line beginning.  This makes the function of C-a more intuitive.
If this is a headline, and `org-special-ctrl-a/e' is set, ignore tags on the
first attempt, and only move to after the tags when the cursor is already
beyond the end of the headline." nil [1092596 1094154]) ("org-end-of-line" function nil ("&optional" "arg") ((user-visible . t)) "Go to the end of the line.
If this is a headline, and `org-special-ctrl-a/e' is set, ignore tags on the
first attempt, and only move to after the tags when the cursor is already
beyond the end of the headline." nil [1094156 1095088]) ("define-key" code nil [1095090 1095145]) ("define-key" code nil [1095146 1095195]) ("org-invisible-p" function nil nil nil "Check if point is at a character currently not visible." nil [1095197 1095458]) ("org-invisible-p2" function nil nil nil "Check if point is at a character currently not visible." nil [1095460 1095802]) ("defalias" code nil [1095804 1095860]) ("defalias" code nil [1095861 1095911]) ("defalias" code nil [1095912 1095962]) ("org-at-heading-or-item-p" function nil nil nil (or (org-on-heading-p) (org-at-item-p)) nil [1095963 1096040]) ("org-on-target-p" function nil nil nil (or (org-in-regexp org-radio-target-regexp) (org-in-regexp org-target-regexp)) nil [1096042 1096155]) ("org-up-heading-all" function nil ("arg") nil "Move to the heading line of which the present line is a subheading.
This function considers both visible and invisible heading lines.
With argument, move up ARG levels." nil [1096157 1096504]) ("org-up-heading-safe" function nil nil nil "Move to the heading line of which the present line is a subheading.
This version will not throw an error.  It will return the level of the
headline found, or nil if no higher level is found." nil [1096543 1097157]) ("org-goto-sibling" function nil ("&optional" "previous") nil "Goto the next sibling, even if it is invisible.
When PREVIOUS is set, go to the previous sibling instead.  Returns t
when a sibling was found.  When none is found, return nil and don't
move point." nil [1097159 1097981]) ("org-show-siblings" function nil nil nil "Show all siblings of the current headline." nil [1097983 1098220]) ("org-show-hidden-entry" function nil nil nil "Show an entry where even the heading is hidden." nil [1098222 1098346]) ("org-flag-heading" function nil ("flag" "&optional" "entry") nil "Flag the current heading.  FLAG non-nil means make invisible.
When ENTRY is non-nil, show the entire entry." nil [1098348 1098936]) ("org-end-of-subtree" function nil ("&optional" "invisible-OK" "to-heading") nil (org-back-to-heading invisible-OK) nil [1098938 1099810]) ("org-show-subtree" function nil nil nil "Show everything after this heading at deeper levels." nil [1099812 1100019]) ("org-show-entry" function nil nil ((user-visible . t)) "Show the body directly following this heading.
Show the heading too, if it is currently invisible." nil [1100021 1100543]) ("org-make-options-regexp" function nil ("kwds") nil "Make a regular expression for keyword lines." nil [1100545 1100740]) ("org-isearch-end" function nil nil nil "Reveal context after isearch exits." nil [1100787 1101538]) ("org-isearch-post-command" function nil nil nil "Remove self from hook, and show context." nil [1101540 1101718]) ("org-mode-flyspell-verify" function nil nil nil "Don't let flyspell put overlays at active buttons." nil [1101838 1101972]) ("eval-after-load" code nil [1102039 1102384]) ("org-bookmark-jump-unhide" function nil nil nil "Unhide the current position, to show the bookmark location." nil [1102386 1102693]) ("eval-after-load" code nil [1102743 1102827]) ("org-closed-in-range" function nil nil ((user-visible . t)) "Sparse tree of items closed in a certain time range.
Still experimental, may disappear in the furture." nil [1102853 1103780]) ("org-fill-paragraph-experimental" function nil ("&optional" "justify") nil "Re-align a table, pass through to fill-paragraph if no table." nil [1103782 1104578]) ("org-assign-fast-keys" function nil ("alist") nil "Assign fast keys to a keyword-key alist.
Respect keys that are already there." nil [1104679 1105522]) ("org" package nil nil nil [1106151 1106165]) ("run-hooks" code nil [1106167 1106193]))
    )
   )
  )
